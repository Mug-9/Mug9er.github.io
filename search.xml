<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数学基础</title>
    <url>//e403a46/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h2><p>向量一范数：$||X||_1=\sum\limits_{i=1}^n|x_i|$</p>
<p>向量二范数：$||X||_2=(\sum\limits_{i=1}^nx_i^2)^{\frac{1}{2}}=\sqrt{\sum\limits_{i=1}^nx_i^2}$</p>
<p>向量无穷范数：$||X||_{\infty}=\max\limits_{i\le i\le n}|x_i|$</p>
<h2 id="不等式"><a href="#不等式" class="headerlink" title="不等式"></a>不等式</h2><h3 id="柯西不等式"><a href="#柯西不等式" class="headerlink" title="柯西不等式"></a>柯西不等式</h3><p>对于实数：$|\sum\limits_{i=1}^{n}a_i|\le \sum\limits_{i=1}^n|a_i|,a_i\in \mathbb{R}$</p>
<p>对于向量形式：$(\sum\limits_{i=1}^na_ib_i)^2\le \sum\limits_{i=1}^na_i^2 \sum\limits_{i=1}^nb_i^2\leftrightarrow|<a,b>|\le ||a|| \cdot ||b||$</a,b></p>
<p><strong>证明</strong>：</p>
<p>右边-左边$=\sum\limits_{ij}(a_ib_j-a_jb_i)^2\ge0$</p>
<p><strong>??</strong>：</p>
<p>$\forall \lambda \ge 0,\sum\limits_{i=1}^n(a_i-\lambda b_i)^2\ge0$</p>
<p>$\sum\limits_{i=1}^n(a_i^2-2a_ib_i\lambda+b_i^2\lambda^2) \ge 0 \\ (\sum\limits_{i=1}^{n}b_i^2)\lambda^2-2(\sum\limits_{i=1}^na_ib_i)\lambda+\sum\limits_{i=1}^na_i^2\ge 0$</p>
<p>这是关于$\lambda$的二次函数</p>
<h3 id="算数几何平均不等式"><a href="#算数几何平均不等式" class="headerlink" title="算数几何平均不等式"></a>算数几何平均不等式</h3><p>$(a_1,a_2,…a_n)$</p>
<p>算数平均值：$\frac{\sum\limits_{i=1}^na_i}{n}$</p>
<p>几何平均值：$(\prod\limits_{i=1}^na_i)^\frac{1}{n}$</p>
<p>算数平均值大于等于几何平均值</p>
<p>$\frac{\sum\limits_{i=1}^na_i}{n} \ge (\prod\limits_{i=1}^na_i)^\frac{1}{n}$</p>
<p><strong>证明</strong></p>
<p>$n=2$时：</p>
<p>$\frac{1}{2}(a_1+a_2)\ge \sqrt{a_1a_2}\\ \leftrightarrow(a_1+a_2)^2\ge4a_1a_2\\ \leftrightarrow (a_1-a_2)^2 \ge 0$</p>
<p>$n=3$时：</p>
<p>$\frac{1}{2}(a_1+a_2+a_3)\ge (a_1a_2a_3)^{\frac{1}{3}}\\ \leftrightarrow x^3+y^3+z^3 \ge 3xyz\\ \leftrightarrow (x+y+z)((x-y)^2+(y-z)^2+(z-x)^2) \ge 0$</p>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><ul>
<li><p>序列$a_n$收敛跟$a_n$时柯西列等价</p>
</li>
<li><p>单调有界序列一定有极限</p>
</li>
<li>$\lim\limits_{n\to\infty}(1+\frac{1}{n})^n=e$</li>
<li>$|a_n| \le b_n$， $\sum\limits_{n\ge 1}b_n$收敛那么$\sum\limits_{n\ge 1}a_n$收敛</li>
<li>上极限：$\lim\limits_{n\to \infty}\sup a_n \triangleq \lim\limits_{n\to \infty}(\sup\limits_{m\ge n}a_m) = \inf\limits_{n\ge 1}(\sup\limits_{m\ge n} a_m)$</li>
<li>下极限：$\lim\limits_{n\to \infty}\inf a_n \triangleq \lim\limits_{n\to \infty}(\inf\limits_{m\ge n}a_m) = \sup\limits_{n\ge 1}(\inf\limits_{m\ge n} a_m)$</li>
<li>$\sum\limits_{n\ge 1}\frac{1}{n^s}$收敛$\iff\ s&gt;1$，$\sum\limits_{n\ge 1}\frac{1}{n}$发散</li>
<li>$\sum\limits_{n\ge 2}\frac{1}{n(\log n)^s}$收敛$\iff\ s&gt;1$，$\sum\limits_{n\ge 2}\frac{1}{n(\log n)}$发散</li>
<li>$\sum\limits_{n\ge0}\frac{(-1)^n}{2n+1}=\frac{\pi}{4}$</li>
</ul>
<h2 id="点集"><a href="#点集" class="headerlink" title="点集"></a>点集</h2><p>开集，闭集，紧集</p>
<h3 id="开集"><a href="#开集" class="headerlink" title="开集"></a>开集</h3><p>定义： $A \subset \mathbb{R}^n, \forall  x \in A$都存在以$x$为中心，$r&gt;0$为半径的一个球$\{y\in\mathbb{R}^n: ||y-x|| &lt; r\}$叫做$B(x,r)$ 然后$B(x,r)\subset A$。</p>
<p>性质： </p>
<ul>
<li>任意个开集并，那么也是开集$\cup A_i$</li>
<li>有限个开集交，那么也是开集 $\cap^NA_i$</li>
</ul>
<h3 id="闭集"><a href="#闭集" class="headerlink" title="闭集"></a>闭集</h3><p>$A$闭集 $\iff A^C$开集</p>
<p>$\{ x_k\}_{k\ge 1} \subset A, \lim\limits_{k\to \infty}x_k = x \in A$</p>
<p>$x_k$序列属于$A$，并且$x_k$的极限在$A$中，那么$x$也属于$A$</p>
<h3 id="紧集"><a href="#紧集" class="headerlink" title="紧集"></a>紧集</h3><p>$A$称为紧集，如果$A$是有界闭集，即$A$是闭集并且存在开球$B(x,r)$使得$A\subset B(x,r)$</p>
<h3 id="空集和实数集"><a href="#空集和实数集" class="headerlink" title="空集和实数集"></a>空集和实数集</h3><p>空集：是开集，是闭集，是紧集</p>
<p>实数集：是开集，是闭集，不是紧集</p>
<h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><p>连续函数： $\lim\limits_{x\to a}f(x)=f(a)$</p>
<ul>
<li>$\forall \gt 0, \exists\delta\gt0$使得对于任何满足条件$||x-a||\lt\delta$的$x$都成立$|f(x)-f(a)|&lt;\epsilon$</li>
</ul>
<p>若$f:D\subset \mathbb{R}^n \to \mathbb{R}$，那么$|f(x)-f(y)|\le k||x-y||$对于任何属于$D$的$x,y$都成立</p>
<p>若$f:D\subset \mathbb{R}^n \to \mathbb{R}$在$D$中任何点都连续，则称其在$D$上连续</p>
<ul>
<li>$f$在开集$D$上连续，等价于，对于任何开集$U\subset \mathbb{R}$，其逆像$f^{-1}(U)=\{x\in\mathbb{R}^n : f(x)\in U\}\subset \mathbb{R}^n$仍是开集</li>
</ul>
<p>常用函数(幂指对，三角函数，多项式)都是连续函数</p>
<h3 id="两个重要函数极限"><a href="#两个重要函数极限" class="headerlink" title="两个重要函数极限"></a>两个重要函数极限</h3><ul>
<li>$\lim\limits_{x\to 0}\frac{sinx}{x}=1$<ul>
<li>$0\lt x \lt \frac{\pi}{2} \Longrightarrow cosx \lt \frac{sinx}{x} \lt 1$</li>
<li>因此，函数$\frac{sinx}{x}$可看作定义在$\mathbb{R}$上的连续函数</li>
</ul>
</li>
<li>$\lim\limits_{x\to +\infty}(1+\frac{1}{x})^x=e$<ul>
<li>$n\le x \le n+1 \Longrightarrow (1+\frac{1}{n+1})^n \lt (1+\frac{1}{x})^x \lt (1+\frac{1}{n})^{n+1}$</li>
</ul>
</li>
</ul>
<h3 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h3><p>函数$f:[a,b]\to \mathbb{R}$连续，且$f(a)\not= f(b)$,则对于任何$f(a)$和$f(b)$之间的值$s$,都存在$x\in (a,b)$使得$f(x)=s$</p>
<h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><ul>
<li><p>可导$\Longrightarrow$连续,可导$\not\Longleftarrow$连续</p>
</li>
<li><p>$(fg)’=f’g+fg’,(af+bg)’=af’+bg’,(\frac{f}{g})’=\frac{f’g-fg’}{g^2}$</p>
</li>
<li>链式法则：$(f(g(x)))’=f’(g(x))g’(x)$</li>
<li>$f(x) = det(I+xA),f’(0)=tr(A)$</li>
<li>$f:[a,b]\to\mathbb{R}$,$f$在$x\in (a,b)$取得局部最小值$\Longrightarrow f’(x)=0$</li>
</ul>
<h3 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h3><p>$f$在$[a,b]$上连续，并在$(a,b)$上可微，则存在$x\in (a,b)$使得$f’(x)=\frac{f(b)-f(a)}{b-a}$</p>
<p>$Rlolle$定理：如果$f(a)=f(b)$，则存在$x\in(a,b)$使得$f’(x)=0$</p>
<h3 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h3><p>假设$f$和$g$在$(a,b)$上可微，并且对于任何$x\in (a,b)$都有$g’(x)\not=0$,如果下述条件满足</p>
<ul>
<li>$\lim\limits_{x-\to a}f(x)=\lim\limits_{x\to a}g(x)=0$或者$\lim\limits_{x\to a}g(x)=+\infty$</li>
<li>$\lim\limits_{x\to a}\frac{f’(x)}{g’(x)}=A$</li>
</ul>
<p>则有$\lim\limits_{x\to a}\frac{f(x)}{g(x)}=A$</p>
<p>$\frac{f(x)}{g(x)}\approx \frac{f’(x)}{g’(x)}=\lim\limits_{x\to a}\frac{f’(x)}{g’(x)}$</p>
<p>$[a,b]$上的单调函数几乎处处可微</p>
<h2 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h2><p>若$f$在$x_0$的一个邻域内$(n+1)$次可微，则对于该邻域内的任意$x$都成立</p>
<p>$f(x)=\sum\limits_{k=0}^n\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k+R_n(x)$</p>
<p>其中余项$R_n(x)$满足</p>
<ul>
<li>无穷小量形式：$R_n(x)=o((x-x_0)^n)$</li>
<li>微分形式：存在$\theta\in(x,x_0)$使得$R_n(x)=\frac{f^{(n+1)}(\theta)}{(n+1)!}(x-x_0)^{(n+1)}$</li>
<li>积分形式：$R_n(x)=\frac{1}{n!}\int_{x_0}^x(x-t)^nf^{(n+1)}(t)dt $</li>
<li>$e^x=\sum\limits_{k=0}^n\frac{x^k}{k!}+o(x^n)$</li>
<li>$\log(1+x)=\sum\limits_{k=1}^n(-1)^{(k+1)}\frac{x^k}{k}+o(x^n)$</li>
<li>$\log(1-x)=-\sum\limits_{k=1}^n\frac{x^k}{k}+o(x^n)$</li>
</ul>
<h2 id="多元微分"><a href="#多元微分" class="headerlink" title="多元微分"></a>多元微分</h2><h3 id="一元微分"><a href="#一元微分" class="headerlink" title="一元微分"></a>一元微分</h3><p>$f$在点$x$处可微$\iff f(y)=f(x)+a(y-x)+o(y-x),f(x)$是固定的$a(y-x)$可以看成增量$\Delta x,$$o(y-x)$ 是无穷小量</p>
<p>不考虑无穷小量时，$f(y)$可近似看成$f(y)\approx f(x)+a(y-x)$,这个就是关于增量$\Delta x=y-x$的线性函数</p>
<p>这样一元微分就在$x$出展开成了一个线性函数</p>
<h3 id="多元微分-1"><a href="#多元微分-1" class="headerlink" title="多元微分"></a>多元微分</h3><h3 id="什么是多元函数"><a href="#什么是多元函数" class="headerlink" title="什么是多元函数"></a>什么是多元函数</h3><p>多元函数就是在定义域$D\subset\mathbb{R}^n$ 通过某些规则达到$f(x)$</p>
<p>比如$f(x)=||x||_2^2=\sum\limits_{i=1}^nx_i^2$这就是一个多元函数</p>
<p>如果$f:D\subset \mathbb{R}^n \to \mathbb{R}$ 这就代表$f(x)$是一个单值多元函数</p>
<p>如果：$f:D\subset\mathbb{R}^n\to\mathbb{R}^m$,这就代表$f(x)$是一个多值多元函数</p>
<p>关于多值多元函数，可以看成$x\to(f_1(x),\cdots,f_m(x))$其中每个$f$都是一个单值多元函数$f:D\subset\mathbb{R}^n \to \mathbb{R}$</p>
<p>$f(x_1,x_2)=(x_1+x_2, x_1x_2)$这个就是一个$\mathbb{R}^2\to\mathbb{R}^2$的多元函数</p>
<h3 id="多元微分-2"><a href="#多元微分-2" class="headerlink" title="多元微分"></a>多元微分</h3><p>对多元函数$f:D\subset\mathbb{R}^n\to\mathbb{R}^m$求微分可以借鉴一元微分的方法，在$x$处将微分展开成一个线性函数</p>
<p>$f(y)\approx f(x)+L(y-x)$</p>
<p>$L$是一个线性映射，将$n$维的向量映射成$m$为的向量，也可以说是一个矩阵，$L(y-x)$是作用在$y-x$之上的</p>
<blockquote>
<p>$L(y-x)$也可写成$L(y-x)=A(y-x)$,$L(y-x)$是$n\times m$形式的， $y-x$是一个$n\times1$的向量，$A$是一个$m\times$n的矩阵，线性映射可以唯一的写成矩阵形式</p>
</blockquote>
<p>对于$f:D\subset \mathbb{R}^n\to \mathbb{R}^m$，如果存在一个矩阵$A$，使得$f(y)=f(x)+A(y-x)+o(||y-x||)$成立，那么就称$f$在点$x\subset D$处可微,$A$记作微分$A=Df(x)$</p>
<p>也可以写成$\exists A \ \ st. \ \ \lim\limits_{y\to x} \frac{||f(y)-f(x)-A(y-x)||}{||y-x||}=0$</p>
<p>例子： $f(x)=Ax+b, A_{m\times n},b\in \mathbb{R}^m$</p>
<p>此时$Df(x)=?$</p>
<p>证明： $f(y)-f(x)\\=Ay+b-(Ax+b)\\=A(y-x)$</p>
<p>所以$f(y)-f(x)=A(y-x)$</p>
<p>那么$\lim\limits_{y\to x} \frac{||f(y)-f(x)-A(y-x)||}{||y-x||}=0$成立，所以$Df(x)=A$</p>
<h3 id="偏导"><a href="#偏导" class="headerlink" title="偏导"></a>偏导</h3><p>$f:D\subset\mathbb{R}^n\to\mathbb{R}$,对于这样一个映射，其多元微分可以写成$f(y)=f(x)+Df(x)(y-x)+o(||y-x||)$</p>
<p>其中$Df(x)$是$1\times n$的，所以$Df(x)$也可以看成$v^t$</p>
<p>即$f(y)=f(x)+v^t(y-x)+o(||y-x||)\\f(y)=f(x)+\sum\limits_{i=1}^nv_i(y_i-x_i)+o(||y-x||)$</p>
<p>将$i$固定，$\forall j\not= i,y_j=x_j$，保留一个$i$将其他方向的变量全部固定，这样$x,y$就可以看成处于同一条轴上</p>
<p>此时$f(x_1,\cdots,x_{i-1},y_i,x_{i+1},\cdots,x_n)=f(x_1,\cdots,x_n)+v_i(y_i-x_i)+o(|y_i-x_i|)$</p>
<p>因为$f$函数的所有其他变量全部都固定成了$x_i$,$f(x_1,\cdots,x_{i-1},y_i,x_{i+1},\cdots,x_n)$相当于只有一个自变量$y_i$这样$f(x_1,\cdots,x_{i-1},y_i,x_{i+1},\cdots,x_n)$可以看成是一个关于$y_i$的函数$g(y_i)$,此时$g(y_i)=g(x_1)+v_i(y_i-x_i)+o(|y_i-x_i|)$在这个一元函数中，可以明显发现$g$的微分就是$v_i=g’(x_i)$</p>
<p>其他的$i$都被固定住，求出的这个$g’_i(x_i)$就叫做$f$在$x$处第$i$个方向的偏导数，$g’_i(x_i)$可以写成$\partial_if(x)$</p>
<p>如果偏导存在,那么$Df(x)=(g’_1(x_i),g’_2(x_i),\cdots,g’_n(x_n))=(\partial_1if(x),\cdots,\partial_nif(x))$</p>
<p>将$Df(x)$竖起来的话，就叫做梯度</p>
<h3 id="梯度和偏导"><a href="#梯度和偏导" class="headerlink" title="梯度和偏导"></a>梯度和偏导</h3><p>如果$f$在点$x$处可维$\Longrightarrow Df(x)=(\triangledown f(x))^t$，梯度是多元微分的转置，也能推出$f(y)=f(x)+\triangledown f(x)(y-x)+o(||y-x||)$</p>
<p>可微$\Longrightarrow $梯度存在，梯度存在$\not\Longrightarrow$ 可微</p>
<p>当$f:D\in\mathbb{R}^n\to \mathbb{R}，D是开集$，向量每个方向的偏导数$\partial_if(x)$都存在并且连续，此时可以推出来$\Longrightarrow $$f$在$D$上可微</p>
<p>$f$在$D$上偏导存在并且连续，我们记作$f\in C^1(D)$</p>
<h3 id="计算微分"><a href="#计算微分" class="headerlink" title="计算微分"></a>计算微分</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>对于$A\in \mathbb{R}^{m\times n},b\in \mathbb{R}^m$</p>
<p>计算一个函数$f(x)=||AX-b||^2$的微分</p>
<p>$f(x)$ $=||AX-b||^2\\=(AX-b)^t(AX-b)\\=(X^tA^t-b^t)(AX-b) \\ = X^tA^tAX-b^tAX-X^tA^tb+b^tb\\=X^t(A^tA)X-2(A^tb)^tX+b^tb\$</p>
<p>这个就是关于$X$的二次函数</p>
<p>$f(x)=\frac{1}{2}X^tpX+q^tX+r,p=2A^tA,q=-2(A^tb)$</p>
<p>此时对$X$微分，梯度就等于$\triangledown f(x)=pX=q=2A^tAX+2A^tb$</p>
<p>梯度转置一下就是微分了</p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>$f(x)=e^{w^tx},w,x\in \mathbb{R}^n$求微分</p>
<p>$f(x)$可以看成$f(x)=e^{w_1x_1+w_2x_2+\cdots+w_nx_n}$</p>
<p>求偏导时$\part_1f(x)=w_1e^{w_1x_1+\cdots+w_nx_n} \\ \part_if(x)=w_ie^{w_1x_1+\cdots+w_nx_n}$</p>
<p>$\triangledown f(x) = (w_1e^{w_1x_1+\cdots+w_nx_n},\cdots, w_ne^{w_1x_1+\cdots+w_nx_n})^t=f(x)w$</p>
<p>计算出来的梯度为$wf(x)$，因为$f(x)$是连续的，所以梯度也是连续的，那么就可以推出$\triangledown f(x)=(Df(x))^t, Df(x)=f(x)w^t$</p>
<h3 id="复合函数求导"><a href="#复合函数求导" class="headerlink" title="复合函数求导"></a>复合函数求导</h3><p>一元函数求导: $g(f(x))’=g’(f(x))f’(x)$</p>
<p>多元函数: $D(g\circ f(x))=D g(f(x))Df(x)$</p>
<blockquote>
<p>$g\circ f(x)=g(f(x))$</p>
<p>其中$f:\mathbb{R}^n\to \mathbb{R}^m \\g:\mathbb{R}^m\to \mathbb{R}^k$</p>
<p>$g\circ f(x): \mathbb{R}^n\to \mathbb{R}^k$</p>
</blockquote>
<p>一元函数：$(fg)’(x)=f(x)g’(x)+f’(x)=g(x)$</p>
<p>多元函数：$D(fg)(x)=f(x)Dg(x)+g(x)Df(x)$</p>
<h3 id="矩阵微分"><a href="#矩阵微分" class="headerlink" title="矩阵微分"></a>矩阵微分</h3><p>$f: D\in \mathbb{R}^{m\times n}\to \mathbb{R}, f(A),A_{m\times n}$</p>
<p>多元函数参数是矩阵时求偏导，实际上$f(A)$的参数是一个$m\times n$的行向量，但是写的时候还是当作矩阵来写</p>
<p>$(Df(A))_{i,j}=\part_{a_{ij}}f(A)$,对矩阵的第$i,j$位置求偏导</p>
<p>例子：$f(A)=tr(AB),A:m\times n,B: n\times m$，求$Df(A)$</p>
<p>$f(A) = tr(AB)=\sum\limits_{i=1}^m(AB)_{ii}\\ =\sum\limits_{i=1}^m\sum\limits_{j=1}^na_{i,j}b_{j,i}=\sum\limits_{i.j}a_{j,i}b_{i,j}$</p>
<p>此时$f(A)=\sum a_{i,j}b_{j,i}$</p>
<p>$\part_{a_{i,j}}f(A)=b_{j,i}\(Df(A))_{i,j}=b_{j,i}=(B^t)_{i,j}$</p>
<p>所以$f(A)=tr(AB) \Longrightarrow D(f(A))=B^t$</p>
<p>$tr(A)=tr(A^t) \\ f(A)=tr(ABA^t)\Longrightarrow A(B+B^t)$</p>]]></content>
      <categories>
        <category>数学基础</category>
      </categories>
      <tags>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习5</title>
    <url>//7e4dc831/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h1><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704195854656.2lsjkjwd5e80.png" alt="命名规则"></p>
<p>使用$L$来代表神经网络的层数</p>
<p>使用$s_l$来代表第$l$层的神经元数目</p>
<h2 id="代价函数-1"><a href="#代价函数-1" class="headerlink" title="代价函数"></a>代价函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704200652152.6e3sjb675mo0.png" alt="代价函数"></p>
<p>相对于单个的逻辑回归的代价函数，整个神经网络的代价函数只对输出层进行计算，计算第$i$的输出与训练集的结果$y_i$之间的差距。因为神经网络的数据不是唯一，可能由多个分类的输出，所以$K$代表输出的分类个数。计算正则化也是如何，跟逻辑回归类似，不计算0下表的$\Theta$</p>
<h1 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h1><h2 id="向前传播方法"><a href="#向前传播方法" class="headerlink" title="向前传播方法"></a>向前传播方法</h2><p>向前传播方法是前面用到的方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704201536262.33e5qpshz1o0.png" alt="向前传播方法"></p>
<p>从输入开始，对每一层进行计算得到下一层的结果，以此往复得到最终结果</p>
<h2 id="反向传播方法"><a href="#反向传播方法" class="headerlink" title="反向传播方法"></a>反向传播方法</h2><p>方向传播方法从直观上说就是对每一个节点计算$\delta_j^{(l)}$代表第$l$层，第$j$个节点的误差</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704205325691.3i6ni2tf3u40.png" alt="反向传播方法"></p>
<p>还是使用4层的神经网络来说</p>
<p>$\delta_j^{(4)}=a_j^{(4)}-y_j$</p>
<p>第四层就是输出值和$y$值的误差，然后我们反向传播到第三层</p>
<p>$\delta^{(3)}=(\Theta^{(3)})^T\delta^{(4)} .* g’(z^{(3)})$</p>
<p>$\delta^{(3)}$由参数$\Theta^{(3)}$转置叉乘$\delta^{(4)}$然后点乘(这里点乘只是各个数字相乘) $g(z^{(3)})$的导数，</p>
<blockquote>
<p>对$g$函数求导，先设</p>
<p>$a = g(z) = \frac{1}{1+e^{-z}} $</p>
<p>$g’(z) \\ = (\frac{1}{1+e^{-z}})’ \\ = \frac{1’(\frac{1}{1+e^{-z}})+1(\frac{1}{1+e^{-z}})’}{(1+e^{-z})^2} \\ = \frac{e^{-z}}{(1+e^{-z})^2} \\ = \frac{e^{-z}+1-1}{(1+e^{-z})^2} \\ = \frac{(e^{-z}+1) -1}{(1+e^{-z})^2} \\ = \frac{1}{(1+e^{-z})}-\frac{1}{(1+e^{-z})^2} \\ = a - a^2 \\ = a(1-a)$</p>
</blockquote>
<p>那么现在$g’(z^{(3)})$就为$a^{(3)}.*(1-a^{(3)})$</p>
<p>同样的$\delta^{(2)}$也是如此</p>
<p>$\delta^{(2)}=(\Theta^{(2)})^T\delta^{(3)} .* g’(z^{(2)})$</p>
<p>在不严谨的情况下，我们可以得到初略的偏导数$\frac{\partial}{\partial \Theta_{ij}^{(l)}}J(\Theta)=a_j^{(l)}\delta_i^{l+1}$ 这些都是忽略的正则化的情况下</p>
<h3 id="反向传播算法-1"><a href="#反向传播算法-1" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704205722145.5eidr8is6h00.png" alt="反向传播算法"></p>
<p>一开始我们将所有的$\Delta$设置为0，$\Delta$是$\delta$的大写形式</p>
<p>然后我们每一层计算$a^{l}$,计算到输出层以后倒回来计算$\delta$,一直计算到$\delta^2$</p>
<p>然后计算$\Delta$,$\Delta$的计算公式:$\Delta_{ij}^{(l)}:=\Delta_{ij}^{(l)}+a_j^{(l)}\delta_i^{(l+1)}$</p>
<p>向量式写法可以写成$\Delta^{(l)}:=\Delta^{(l)}+\delta^{(l+1)}(a^{(l)})^T$</p>
<p>最终计算$D$,$  \begin{array}{lr} D_{ij}^{(l)}:=\frac{1}{m}\Delta_{ij}^{(l)}+\lambda\Theta_{ij}^{(l)}  &amp; if\ j \not=0 \\ D_{ij}^(l) := \frac{1}{m}\Delta_{ij}^{(l)} &amp; if\ j = 0 \end{array} $</p>
<p>这里加上了正则化</p>
<p>最终的偏导正好等于$\frac{\partial}{\partial \Theta_{ij}^{(l)}}J(\Theta)=D_{ij}^{(l)}$</p>
<h3 id="理解反向传播算法"><a href="#理解反向传播算法" class="headerlink" title="理解反向传播算法"></a>理解反向传播算法</h3><p>以单一的输出并且忽略$\lambda$为例，代价函数可以写成$cost(i)=y^{(i)}\log h_{\Theta}(x^{(i)})+(1-y^{(i)})\log h_{\Theta}(x^{(i)})$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210704212854863.47c4lnlvmdy0.png" alt="理解反向传播算法"></p>
<p>最终的代价值是由每个节点的误差累计而成，所以对于最终的带价值，每一个$\delta_j^{(l)}$都相当于这个代价的偏导，由这些误差联合作用得到最终的误差值，而每一个$\delta_{i}^{(l)}$都可以从后面的$\delta$推导出来，比如$\delta_2^{2}=\Theta_{12}^{(2)}\delta_{1}^{(3)}+\Theta_{22}^{(2)}\delta^{(3)}_2$</p>
<p>这样就可以得出$\delta$的推导公式$\delta^{(l)}=(\Theta^{(l)})^T\delta^{(l+1)}$，至于那么求导暂时没搞懂</p>
<h1 id="展开参数"><a href="#展开参数" class="headerlink" title="展开参数"></a>展开参数</h1><p>假设一个神经网络第一层有10个节点，第二层有10个节点，第三层有1个节点</p>
<p>$s_1=10,s_2=10,s_3=1$</p>
<p>那么对应的参数就为</p>
<p>$\Theta^{(1)}\in\R^{10\times11},\Theta^{(2)}\in\R^{(10\times11)},\Theta^{(3)}\in\R^{(1\times11)}$</p>
<p>$D^{(1)}\in\R^{10\times11},D^{(2)}\in\R^{(10\times11)},D^{(3)}\in\R^{(1\times11)}$</p>
<p>$\Theta,D$都是矩阵，但是对于高级优化函数</p>
<blockquote>
<p>$function\ [jVal,\ gradient] = costFunction(theta)\\ … \\ optTheta=fminunc(@costFunction, initialTheta, options)$</p>
</blockquote>
<p>$theta, initialTheta, gradient$都是向量</p>
<p>所以这里就有一个向量展开的问题，通过操作将各个参数合并成一个向量</p>
<p>$thetaVec = [Theta1(:); Theta2(:);Theta3(:)];\\DVec=[D1(:);D2(:);D3(:)];$</p>
<p>在使用时再通过操作将向量转化成矩阵</p>
<p>$Theta1=reshape(thetaVec(1:110), 10,11);\\Theta2=reshape(thetaVec(111:220), 10,11);\\Theta1=reshape(thetaVec(221:231), 1,11);$</p>
<p>在使用高级优化函数时，也传入合并的向量</p>
<blockquote>
<p>$fminunc(@costFunction,initialTheta,options)$</p>
<p>代价函数也有所改变</p>
<p>$function\ [jval,gradientVec]=costFunction(thetaVec)$</p>
<p>从$thetaVec$中获得$\Theta^{(1)},\Theta^{(2)},\Theta^{(3)}$，</p>
<p>通过反向传播算出$D^{(1)},D^{(2)},D^{(3)}$和$J(\Theta)$,再将矩阵转化成向量得到$gradientVec$</p>
</blockquote>
<h1 id="梯度检测"><a href="#梯度检测" class="headerlink" title="梯度检测"></a>梯度检测</h1><p>有时反向传播会出现一些我们发现不了的bug，而为了检测出这个bug，可以使用梯度检测的方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210705212725734.5o567d738t00.png" alt="image-20210705212725734"></p>
<p>再常数的情况下，取一个很小的$\epsilon$，这样$\frac{d}{d\theta}J(\theta)\approx\frac{J(\theta+\epsilon)-J(\theta-\epsilon)}{2\epsilon}$</p>
<p>在向量的情况下，每个偏导都计算一次，跟反向传播所计算出来的导数相比，就可以得出反向传播的正确率了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210705213106111.3rw779pt1uk0.png" alt="image-20210705213106111"></p>
<blockquote>
<p>$for i = 1:n,$</p>
<p> ​    $thetaPlus = theta;$</p>
<p>​    $thetaPlus(i) = thetaPlus(i) + EPSILON;$</p>
<p>​    $thetaMinus = theta;$</p>
<p>​    $thetaMinus(i) = thetaMinus(i) - EPSILON;$</p>
<p>​    $gradApprox(i) = (J(thetaPlus)-J(thetaMinus)) / (2*EPSILON)$</p>
<p>$end;$</p>
</blockquote>
<p>检查是否$gradApprox\approx DVec$</p>
<p>如果跟$DVec$相差不是很大，那么就可以证明反向传播是正确的。</p>
<p><strong>注意梯度检测只适用于检测阶段，是检测手段，不能再正式运行梯度下降时使用梯度检测，这会大大拖慢梯度下降的效率</strong></p>
<h1 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h1><p>在梯度下降算法中，需要初始化初始的参数，那么如何初始化呢。</p>
<h2 id="对称权重"><a href="#对称权重" class="headerlink" title="对称权重"></a>对称权重</h2><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210705214536814.sbpj5yog9vk.png" alt="image-20210705214536814"></p>
<p>逻辑回归的初始化是将所有的参数设置成0，这样会造成一个问题，就是对称权重，每个输入值的权重相同，那么就导致隐藏层的值也相同，反馈到输出结果是造成每个隐藏层的$\delta$也相同，这也就意味着偏导数相同，对于隐藏层的一个节点，它的输入的边偏导相同时，无论经过多少次迭代，边始终都相同。$a^{(2)}_1,a^{(2)}_2$以相同的参数进行计算，它们始终相同。</p>
<p>所有的隐藏节点都在计算相同的特征，所有的隐藏单元都在以相同的函数作为输入，这是一种高度冗余的现象，因此这也意味着最终的输出单元，只能得到一种特征，因为所有的单元都一样。</p>
<h2 id="随机初始化-1"><a href="#随机初始化-1" class="headerlink" title="随机初始化"></a>随机初始化</h2><p>随机初始化是解决对称权重的初始化方法。</p>
<p>随机初始化所有的$\Theta_{ij}^{(l)}$在$[-\epsilon,\epsilon]$之间</p>
<blockquote>
<p>$Theta = ranf(10,11)<em>(2</em>INIT_EPSILON) - INIT_EPSILON$</p>
</blockquote>
<h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><h2 id="选择神经网络结构"><a href="#选择神经网络结构" class="headerlink" title="选择神经网络结构"></a>选择神经网络结构</h2><ul>
<li>根据特征的维度确定输入单元个数</li>
<li>根据分类的需求确定输出单元个数</li>
<li>一般情况下隐藏层个数1个或者多个，每一层隐藏层单元数量个数相等，可以是输入单元的倍数</li>
<li>一般情况下，隐藏层个数越多越好，但是越多计算量越大</li>
</ul>
<h2 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h2><ul>
<li>构建神经网络，随机初始化权重</li>
<li>执行向前传播算法，根据输入的$x^{(i)}$计算输出值$h_{\Theta}(x^{(i)})$</li>
<li>通过代码计算代价函数$J(\theta)$</li>
<li>执行反向传播算法算出偏导数项$\frac{\partial}{\partial \Theta_{jk}^{(l)}}J(\Theta)$</li>
<li>使用梯度检测来检测已经计算出来的偏导数项，通过梯度检测方法可以保证我们反向传播得到的结果是正确的，然后停止梯度检测，因为梯度检测非常的慢</li>
<li>使用高级优化算法与反向传播算法结合</li>
</ul>]]></content>
      <categories>
        <category>机器学习</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习4</title>
    <url>//94af8a7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>对于复杂的问题，由于特征值的数量增多，对于拟合出来的多项式复杂度可能会急剧膨胀，这样一来单独使用线性回归或逻辑回归可能就不太能满足需求了</p>
<h3 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h3><p>神经元是神经网络里的一个运算单元，可以是线性回归，可以实逻辑回归或是其他算法，图中简单的表示对$h$函数做运算，$h_{\theta}(x)=\frac{1}{1+e^{-\theta^TX}}$ ，有输入$x_1,x_2,x_3$，有$x_0$没有绘出但是$x_0$存在且始终等于0，$x_0$称为偏移单元或偏移神经元。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210628215722790.77ybw4u1djg0.png" alt="神经元"></p>
<p>有时我们会说这是一个带有$Sigmoid$或者是$Logistic$激活函数的人工神经元，在神经网络的术语中，激活单元是指代非线性函数$g(z)=\frac{1}{1+e^{-z}}$的另一个术语</p>
<p>$\theta$在之前的描述种被称为模型的参数，在神经网络种有人会称它为模型的权重</p>
<h3 id="神经网络-1"><a href="#神经网络-1" class="headerlink" title="神经网络"></a>神经网络</h3><p>神经网络其实就是一组神经元链接在一起的集合，图中的神经网络输入$x_1,x_2,x_3$，当然有一个隐藏的$x_0$,$a_1^{(2)},a_2^{(2)},a_3^{(2)}$是3个神经元，并且有一个隐藏的神经元$a_0^{(2)}$，最后一层有一个输出节点假设函数$h_{\Theta}(x)$。</p>
<p>在神经网络的术语中第一层叫做输入层，最后一层叫做输出层，中间的叫做隐藏层</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210628222223412.3bc00ng5hx40.png" alt="神经网络"></p>
<h4 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h4><p>$a_i^{(j)}$代表第$j$层第$i$个神经元或单元</p>
<p>$\Theta^{(j)}$ 权重参数，控制从某一层到下一层的映射</p>
<p>从第一层的4个参数到第二层的3个神经元，通过$\Theta$来转换，$\Theta$的维度可以表示为$s_{j+1}\times (s_j+1)$</p>
<p>每一层的转换都是通过$\Theta$来实现，</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210628223711250.nxoa5h4xysg.png" alt="计算步骤"></p>
<h3 id="向量化表示"><a href="#向量化表示" class="headerlink" title="向量化表示"></a>向量化表示</h3><p>仔细观察$x$向$z$转换的过程，我们将$x$组成一个向量，$z^{(2)}$来表示运算时$g$的参数,$z^{(2)}$的大小时$3\times 1$</p>
<p>$z^{(2)}$由$\Theta^{(1)}$与$a^{(1)}$矩阵相乘而来，$a^{(1)}$时输入的参数，加上隐藏的$x_0$的话，$a^{(1)}$的规格时$4\times 1$，以此类推，</p>
<p>计算$z^{(3)}$时，通过$\Theta^{(2)}$与$a^{(2)}$相乘就可以得到，而结果$h_{\Theta}(x)$就是$z^{(3)}$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210628224340442.5da2n0tpw8c0.png" alt="向量化表示"></p>
<p>神经网络与常规的逻辑回归相比特殊之处在于，不直接使用输入的参数来计算结果，而是通过$\Theta$来计算中间隐藏层，通过隐藏层来计算最终结果</p>
<h3 id="神经元计算样例"><a href="#神经元计算样例" class="headerlink" title="神经元计算样例"></a>神经元计算样例</h3><p>通过神经网络的一层层传递，我们可以在一些简单的计算的基础上再进行一些复杂计算，从而得到很好的计算结果</p>
<h4 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210629212300157.6kenj8uti7k0.png" alt="与运算"></p>
<p>如图所示，我们设计设计一个神经元，将参数设置成$(-30,10,10)$，利用$g$函数可以达到与运算的效果</p>
<h4 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210629212455820.2ufhqvf7l5u0.png" alt="或运算"></p>
<p>跟与运算相似，将参数设置成$(-10, 20, 20)$就可以达到或运算的效果</p>
<h4 id="非运算"><a href="#非运算" class="headerlink" title="非运算"></a>非运算</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210629212850643.1pxty2aj90tc.png" alt="非运算"></p>
<p>非运算，在需要运算的值前面加上一个很大的参数，就可以实现非运算了</p>
<h4 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210629213642403 (1" alt="异或运算">.32ylofm62j40.png)</p>
<p>异或运算在中间的隐藏层实现与预算和非与运算来通过或运算得到异或运算，通过真值表可以看到正确性</p>
<h3 id="多元分类"><a href="#多元分类" class="headerlink" title="多元分类"></a>多元分类</h3><p>多元分类是在单元分类的基础上输出多个结果代表多个种类</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/image-20210629214734064.4rz1e6wlqd80.png" alt="多元分类"></p>
<p>再多元分类中$y^{(i)}$不在代表一个值，而是一个向量，其中1的位置代表$y^{(i)}$的类型，我们要做的就是通过训练找到合适的$\Theta$，使得$h_{\Theta}(x^{(i)})\approx y^{(i)}$</p>]]></content>
      <categories>
        <category>机器学习</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习3</title>
    <url>//972e6d04/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><h3 id="二元分类"><a href="#二元分类" class="headerlink" title="二元分类"></a>二元分类</h3><p>二元分类中$y$值只能取两个值，0或1</p>
<p>$y=\{ 0, 1\}$</p>
<p>一般的话，0代表没有，1代表有</p>
<h3 id="逻辑回归-1"><a href="#逻辑回归-1" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><p>逻辑回归实际是一种分类算法，逻辑回归的输出值在0到1之间</p>
<p>$0\le h_{\theta}(x)\le1$</p>
<p>线性回归的一般公式是：$h_{\theta}(x)=\theta^Tx$,得到的是一个数值</p>
<p>而逻辑回归的公式则为：$h_{\theta}(x)=g(\theta^Tx)\\g(z)=\frac{1}{1+e^{-z}}$</p>
<p>$g$函数一般被称为 $sigmoid\ $函数或 $logistic\ $函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/logisic.3eotdbigmhu0.png" alt="逻辑函数"></p>
<p>逻辑函数$h$的曲线在0到1之间，也可以说逻辑曲线的值参数$x$为1的可能性</p>
<p>$h_{\theta}(x)=p(y=1|x;\theta)$</p>
<p>在给定参数下，$h$函数判断同一数据为0的概率和为1的概率应该和是1</p>
<p>$P(y=0|x;\theta)+P(y=1|x;\theta)=1$</p>
<h3 id="决策界限"><a href="#决策界限" class="headerlink" title="决策界限"></a>决策界限</h3><p>根据上图所示，当$g$的参数$\ge0$时，$g$函数的值大于$0.5$，相应的当$g$的参数$\lt0$时，$g$函数的值小于$0.5$,而$g$函数的参数又是$\theta^TX$，所以我们可以得到结论当$\theta^TX\ge0$时，$h_{\theta}(x)\ge0.5$，当$\theta^TX&lt;0$时，$h_{\theta}(x)&gt;0.5$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/decision boundary.4ro0dxvzpug0.png" alt="决策界限"></p>
<p>图上两种分类中间的直线就是决策界限</p>
<h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><p>原先的代价函数可以写成 $J(\theta)=Cost(h_{\theta}(x^{(i)}),y^{(i)})=\frac{1}{2}(h_{\theta}(x^{(i)})-y^{(i)})^2$</p>
<p>因为$h$函数是一个复杂的函数$h_{\theta}(x)=\frac{1}{1+e^{-\theta^Tx}}$，导致代价函数$J$是一个非凹函数，这样在梯度下降的过程中不一定会找到全局最小值</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/no-convex.43lq2vuti0c0.png" alt="no-convex"></p>
<p>很显然这个代价函数并不适合逻辑回归，这里将介绍一个新的代价函数</p>
<p>$Cost(h_{\theta}(x),y) = \left\{ \begin{array}{lr} -\log(h_{\theta}(x)) &amp; if\ y = 1  \\ -\log(1-h_{\theta}(x)) &amp; if\ y = 0 \end{array} \right. $</p>
<p>当$y=1,h_{\theta}(x) =1$时$Cost$为0，如果$h_{\theta}(x)\to0$ ，那么$Cost\to \infty$</p>
<p>当$y=0,h_{\theta}(x)=0$时$Cost$为1，如果$h_{\theta}(x)\to1$，那么$Cost\to \infty$</p>
<h3 id="简化代价函数"><a href="#简化代价函数" class="headerlink" title="简化代价函数"></a>简化代价函数</h3><p>$J(\theta)=\frac{1}{m}\sum\limits_{i=1}^mCost(h_{\theta}(x^{(i)}), y^{(i)})$</p>
<p>$Cost(h_{\theta}(x),y) = \left\{ \begin{array}{lr} -\log(h_{\theta}(x)) &amp; if\ y = 1  \\ -\log(1-h_{\theta}(x)) &amp; if\ y = 0 \end{array} \right. $</p>
<p>因为代价函数中包括了两种不同的状态，不利于梯度下降函数的运行，所以我们要简化代价函数</p>
<p>$Cost(h_{\theta}(x),y) = -y \log(h_{\theta}(x)) - (1-y)\log(1-h_{\theta}(x))$</p>
<blockquote>
<p> 关于为什么要选择这个代价函数，我偶然看见一个UP做过一个视频，<a href="https://www.bilibili.com/video/BV1Y64y1Q7hi?spm_id_from=333.851.b_7265636f6d6d656e64.9">视频在这</a>我简单说一下我的理解</p>
<p>因为神经网络的每次迭代都是通过改变$W,b$的值来实现，那么对于每一次训练我们来比较差错的话，就是在</p>
<p>当前$W,b$的情况下，去得到得出原本正确的$x_1,x_2,x_3…$的概率$P(x_1,x_2,…,x_n|W,b)$</p>
<p>因为神经网络得到的$y_i$跟$W,b$存在线性关系，所以还可以写成$\prod\limits_{i=1}^nP(x_i|y_i)$</p>
<p>神经网络算出的$y_i$的值只有01两种情况，所以这个式子还符合伯努利分布 :</p>
<p>$x_i\in{0,1}$</p>
<p>$f(x)=p^x(1-p)^{1-x}= \left\{ \begin{array}{lr} p, &amp; x=1  \\ 1-p, &amp; x=0 \end{array} \right. \ $</p>
<p>在伯努利分布中$p$代表为1的概率，而神经网络中的$y_i$也是为真的概率,那么方程就可以写成</p>
<p>$\prod\limits_{i=1}^ny_i^{x_i}(1-y_i)^{1-x_i}$，加上$log$变成加法</p>
<p> $\log(\prod\limits_{i=1}^ny_i^{x_i}(1-y_i)^{1-x_i}) \\ = \sum\limits_{i=1}^n \log(y_i^{x_i}(1-y_i)^{1-x_i}) \\ = \sum\limits_{i=1}^n (x_i  \log y_i + (1-x_i) \log(1-y_i)) $</p>
<p>那么这里就是在当前迭代的情况下，最符合训练集的概率，这个公式是寻找最大值，所以加上负号变成</p>
<p>寻找最小值，以符合梯度下降，这就是逻辑回归的梯度下降</p>
<p>$Cost(h_{\theta}(x),y) = -y \log(h_{\theta}(x)) - (1-y)\log(1-h_{\theta}(x))$</p>
</blockquote>
<p>这样我们就将两个式子简化成一行，新的代价函数为：</p>
<p>$J(\theta)=\frac{1}{m}\sum\limits_{i=1}^mCost(h_{\theta}(x^{(i)}), y^{(i)}) \\ = -\frac{1}{m}\sum\limits_{i=1}^m[y^{(i)}\log(h_{\theta}(x^{(i)}))+(1-y^{(i)})\log(1-h_{\theta}(x^{(i)}))] $</p>
<p>我们利用梯度下降去寻找最小的$\min\limits_{\theta}J(\theta)$,去预测一个新的参数$x$为1的概率</p>
<h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>逻辑回归的的梯度下降公式跟线性回归的几乎一样</p>
<p>$Repeat \{  \\ \theta_j:=\theta_j-\frac{\alpha}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j \\ \}$</p>
<p>向量式写法：</p>
<p>$\theta := \theta - \frac{\alpha}{m}X^T(g(X\theta)-y)$</p>
<h3 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h3><p>Octave中有许多由于梯度下降的算法，但是你并不需要全部掌握，你可以使用Octave提供的库</p>
<p>比如说<code>fminunc</code>你只需要提供所计算的代价函数，每个$\theta$的导数，初始$\theta$即可以使用</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/Advanced Optimization.13yvc5mix3cw.png" alt="Advanced Optimization"></p>
<p>比如对于图上的代价函数$J$，你需要提供一个代价函数<code>costFunction</code>，返回[代价值<code>jVal</code>，每个参数的导数<code>gradient</code>]</p>
<p>设置高级优化函数的参数<code>options</code>,提供初始化的参数<code>initialTheta</code>，函数经过计算会返回[最佳的参数<code>optTheta</code>, 代价函数的值<code>functionVal</code>，是否收敛<code>exitFlag</code>]</p>
<h3 id="多类别分类"><a href="#多类别分类" class="headerlink" title="多类别分类"></a>多类别分类</h3><p>有时候需要你区分的类别可能不止2中，可能有3种，4种或更多</p>
<p>比如，病人带着鼻塞来到诊所，你需要区分是没生病，还是着凉还是流感，这里$y=0$代表没生病，$y=1$代表着凉, $y=2$代表流感</p>
<p>对于这种情况，我们可以将3种类型看成2种，进行3次的逻辑回归</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/cqmPjanSEeawbAp5ByfpEg_299fcfbd527b6b5a7440825628339c54_Screenshot-2016-11-13-10.52.29.ofas81igcps.png" alt="多类别分类"></p>
<p>我们每次只看1类，$h_{\theta}^{(i)}(x) = P(y=1|x;\theta)$为为这种情况为1的概率</p>
<p>当我们接收一个新的$x$时，我们对于每个逻辑回归最判断，得出最有可能的概率$\max\limits_{i}h_{\theta}^{(i)}(x)$</p>
<h3 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h3><p>在拟合数据时，为了更好的拟合数据集，我们可能会选择一个很复杂的函数，它对于数据集有很好的效果，但是对于验证集的效果却很差</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/overfit.4027os0dync0.png" alt="overfit"></p>
<h4 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h4><h5 id="减少特征的数量"><a href="#减少特征的数量" class="headerlink" title="减少特征的数量"></a>减少特征的数量</h5><ul>
<li>尽量减少特征的数量</li>
<li>通过模型选择算法</li>
</ul>
<h5 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h5><ul>
<li>保持所有的特征，但是减少$\theta$的量级或是大小</li>
<li>当你面对大量的特征时，使用正则化</li>
</ul>
<h3 id="正则化和代价函数"><a href="#正则化和代价函数" class="headerlink" title="正则化和代价函数"></a>正则化和代价函数</h3><p>正则化思想： 每个参数都很小</p>
<ul>
<li>对于很小的参数，我们可以得到更简单的假设模型</li>
<li>更不容易出现过拟合的情况</li>
</ul>
<p>但是我们要怎么决定哪些参数应该去缩小呢，这就要去修改我们的代价函数</p>
<p>这是线性回归的代价函数$J(\theta)=\frac{1}{2m}(h_{\theta}(x^{(i)})-y^{(i)})^2$</p>
<p>我们在后面加入一个新的项用来减小每个$\theta$,$J(\theta)=\frac{1}{2m}[(h_{\theta}(x^{(i)})-y^{(i)})^2 + \lambda\sum\limits_{i=1}^n\theta_{j}^2]$</p>
<p>$\lambda$：正则化参数，控制两个不同目标的取舍，第一个目标就是我们的代价函数，我们想让代价函数尽可能的小，同时第二个目标是$\theta$的和，我们也想让参数的和尽可能的小</p>
<h3 id="正则化线性回归"><a href="#正则化线性回归" class="headerlink" title="正则化线性回归"></a>正则化线性回归</h3><p>代价函数发生了改变，那么相对于的，线性回归的梯度下降公式也会发生改变</p>
<p>$Repeat\ \{ \\ \theta_{0} := \theta_{0} - \alpha \frac{1}{m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_{0}^{(i)} \\ \theta_{j} := \theta_{j} - \alpha [(\frac{1}{m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}) + \frac{\lambda}{m}\theta_j] \\ \}$</p>
<p>因为正则化并没有加入$\theta_0$,所以$\theta_0$需要特殊处理</p>
<p>观察$\theta_j$，我们能可以做一个简单的合并$\theta_j := \theta_j(1-\alpha\frac{\lambda}{m})-\lambda\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}$</p>
<h3 id="正则化正规方程"><a href="#正则化正规方程" class="headerlink" title="正则化正规方程"></a>正则化正规方程</h3><p>$X = \begin{bmatrix} (x^{(1)})^T \\ \dots \\ (x^{(m)})^T \end{bmatrix}$ $y=\begin{bmatrix} y^{(1)} \\ \dots \\ y^{(m)} \end{bmatrix}$</p>
<p>正规方程的公式修改后成为：</p>
<p>$\theta = (X^TX + \lambda \begin{bmatrix} 0 &amp; &amp;  &amp; \\ &amp; 1 &amp; &amp; \\ &amp; &amp; \ddots \\ &amp; &amp; &amp; 1 \end{bmatrix}_{(n\times1)\times(n\times1)})^{-1}X^Ty$</p>
<h3 id="正则化逻辑回归"><a href="#正则化逻辑回归" class="headerlink" title="正则化逻辑回归"></a>正则化逻辑回归</h3><p>逻辑回归的代价函数</p>
<p>$J(\theta)=-[\frac{1}{m}\sum\limits_{i=1}^{m}y^{(i)}\log h_{\theta}(x^{(i)})+(1-y^{(i)})\log (1-h_{\theta}(x^{(i)}))]+\frac{\lambda}{2m}\sum\limits_{j=1}^n\theta_j^2$</p>
<p>逻辑回归的梯度下降</p>
<p>$Repeat\ \{ \\ \theta_{0} := \theta_{0} - \alpha \frac{1}{m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_{0}^{(i)} \\ \theta_{j} := \theta_{j} - \alpha [(\frac{1}{m}\sum\limits_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}) + \frac{\lambda}{m}\theta_j] \\ \}$</p>
<p>逻辑回归的梯度下降的转换跟线性回归的类似，但是因为$h$函数的不同，它们实际上还是不同的函数</p>
<h3 id="正则化高级优化函数"><a href="#正则化高级优化函数" class="headerlink" title="正则化高级优化函数"></a>正则化高级优化函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/reg advanced opt.6086pgobg5s0.png" alt="reg advanced opt"></p>]]></content>
      <categories>
        <category>机器学习</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习作业</title>
    <url>//74ea918c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="Warm-Up-Exercise"><a href="#Warm-Up-Exercise" class="headerlink" title="$Warm\ Up\ Exercise$"></a>$Warm\ Up\ Exercise$</h3><p>— $warmUpExercise.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function A = warmUpExercise()
% ============= YOUR CODE HERE ==============
A = eye(5);
% ===========================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Plot-Data"><a href="#Plot-Data" class="headerlink" title="$Plot\ Data$"></a>$Plot\ Data$</h3><p>— $plotData.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function plotData(x, y)
% ====================== YOUR CODE HERE ======================
figure(1);
plot(X, y, 'r');
xlabel("x");
ylabel("y");
% ===========================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Compute-Cost"><a href="#Compute-Cost" class="headerlink" title="$Compute\ Cost$"></a>$Compute\ Cost$</h3><p>且代价函数直接套公式</p>
<p>$J(\theta)=\frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2$</p>
<p>— $computeCost.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function J = computeCost(X, y, theta)
m = length(y); % number of training examples
% You need to return the following variables correctly 
J = 0;
% ====================== YOUR CODE HERE ======================
J = X * theta - y;
J = 1/(2*m) * sum(J .^ 2);
% =========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="$Gradient\ Descent$"></a>$Gradient\ Descent$</h3><p>直接套公式即可</p>
<p>$Repeat \{  \\ \theta_j:=\theta_j-\alpha\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j \\ \}$</p>
<p>— $gradientDescent.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
for iter = 1:num_iters
    % ====================== YOUR CODE HERE ======================
    theta = theta - alpha/m * X' * (X*theta - y);
    % ============================================================
    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
end
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><h3 id="Feature-Normalize"><a href="#Feature-Normalize" class="headerlink" title="$Feature\ Normalize$"></a>$Feature\ Normalize$</h3><p>特征放缩，每个特征减去平均值并除以方差</p>
<p>— $featureNormalize.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [X_norm, mu, sigma] = featureNormalize(X)
X_norm = X;
mu = zeros(1, size(X, 2));
sigma = zeros(1, size(X, 2));
% ====================== YOUR CODE HERE ======================    
mu = mean(X);
sigma = std(X);
for i = 1:size(X, 1)
  for j = 1:size(mu, 2)
    X_norm(i,j) = (X_norm(i,j) - mu(1,j)) / sigma(1, j);
  endfor
end
% ============================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Compute-CostMulti"><a href="#Compute-CostMulti" class="headerlink" title="$Compute\ CostMulti$"></a>$Compute\ CostMulti$</h3><p>套公式</p>
<p>— $computeCostMulti.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function J = computeCostMulti(X, y, theta)
m = length(y); % number of training examples
J = 0;
% ====================== YOUR CODE HERE ======================
%               You should set J to the cost.
J = 1 / (2 * m) * sum(((X * theta) - y) .^ 2);
% =========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Gradient-DescentMulti"><a href="#Gradient-DescentMulti" class="headerlink" title="$Gradient\ DescentMulti$"></a>$Gradient\ DescentMulti$</h3><p>跟单个特征的算法类似，直接套公式即可</p>
<p>— $gradientDescentMulti.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [theta, J_history] = gradientDescentMulti(X, y, theta, alpha, num_iters)
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
for iter = 1:num_iters
    % ====================== YOUR CODE HERE ======================
  theta = theta - alpha / m * (X' * (X * theta - y));
    % ============================================================
    % Save the cost J in every iteration    
    J_history(iter) = computeCostMulti(X, y, theta); 
end
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Normal-Equations"><a href="#Normal-Equations" class="headerlink" title="$Normal\ Equations$"></a>$Normal\ Equations$</h3><p>直接套公式即可</p>
<p>$\theta=(X^TX)^{-1}X^Ty$</p>
<p>— $normalEqn.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [theta] = normalEqn(X, y)
theta = zeros(size(X, 2), 1);
% ====================== YOUR CODE HERE ======================
theta = pinv((X'*X))*X'*y
% ============================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h3 id="Sigmoid-function"><a href="#Sigmoid-function" class="headerlink" title="$Sigmoid\ function$"></a>$Sigmoid\ function$</h3><p>$sigmoid$函数是$\frac{1}{1+e^{-x}}$</p>
<p>根据传进来的数据输出$sigmoid$</p>
<p>— $sigmoid.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function g = sigmoid(z)
%SIGMOID Compute sigmoid function
g = zeros(size(z));
% ====================== YOUR CODE HERE ======================
[m, n] = size(z);
for i = 1:m
  for j = 1:n
    g(i,j) = 1 / (1 + e ^ (-z(i, j)));
  endfor
endfor
% =============================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Cost-function-and-gradient"><a href="#Cost-function-and-gradient" class="headerlink" title="$Cost\ function\ and\ gradient$"></a>$Cost\ function\ and\ gradient$</h3><p>使用逻辑回归的代价函数公式</p>
<p>$J(\theta)=-\frac{1}{m}\sum\limits_{i=1}^m[y^{(i)}\log(h_{\theta}(x^{(i)}))+(1-y^{(i)})\log(1-h_{\theta}(x^{(i)}))]$ 直接求代价函数</p>
<p>关于代价函数的导数以后再证</p>
<p>$\frac{\partial J(\theta)}{\partial \theta_j}=\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j$</p>
<p>— $costFunction.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [J, grad] = costFunction(theta, X, y)
%COSTFUNCTION Compute cost and gradient for logistic regression
m = length(y);
J = 0;
grad = zeros(size(theta));
% ====================== YOUR CODE HERE ======================
h = sigmoid(X * theta);
J = -1 / m * (y' * log(h) + (1-y') * log(1-h));
grad = 1 / m * (X' * (h - y));
% =============================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="predict"><a href="#predict" class="headerlink" title="$predict$"></a>$predict$</h3><p>— $predict.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function p = predict(theta, X)
%PREDICT Predict whether the label is 0 or 1 using learned logistic 
m = size(X, 1); % Number of training examples
p = zeros(m, 1);
% ====================== YOUR CODE HERE ======================
p =  sigmoid(X * theta);
for i = 1:m
  if p(i) &gt;= 0.5
    p(i) = 1;
  else
    p(i) = 0;
  endif
end
% =========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="附加-1"><a href="#附加-1" class="headerlink" title="附加"></a>附加</h2><h3 id="Cost-function-and-gradient-1"><a href="#Cost-function-and-gradient-1" class="headerlink" title="$Cost\ function\ and\ gradient$"></a>$Cost\ function\ and\ gradient$</h3><p>代价函数：$J(\theta)=-\frac{1}{m}\sum\limits_{i=1}^m[y^{(i)}\log(h_{\theta}(x^{(i)}))+(1-y^{(i)})\log(1-h_{\theta}(x^{(i)}))]+\frac{\lambda}{2m}\sum\limits_{i=1}^n\theta_j^2$</p>
<p>导数：</p>
<p>$\frac{\partial J(\theta)}{\partial \theta_j}=\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j \ for\ j = 0$</p>
<p>$\frac{\partial J(\theta)}{\partial \theta_j}=(\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j)+\frac{\lambda}{m}\theta_j \ for\ j \ge 1$</p>
<p>— $costFuntionReg.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [J, grad] = costFunctionReg(theta, X, y, lambda)
%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization
m = length(y); % number of training examples
J = 0;
grad = zeros(size(theta));
% ====================== YOUR CODE HERE ======================
J = costFunction(theta, X, y) + lambda / (2 * m) * (sum(theta .^ 2) - theta(1) .^ 2);
h = sigmoid(X * theta);
grad = 1 / m * X' * (h - y) + lambda / m * theta;
grad(1) =  1 / m * (X' * (h - y))(1);
% =============================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h1><h3 id="Vectorize-Logistic-Regression"><a href="#Vectorize-Logistic-Regression" class="headerlink" title="$Vectorize\ Logistic\ Regression$"></a>$Vectorize\ Logistic\ Regression$</h3><p>跟过拟合的代价函数类似，可以直接套</p>
<p>— $lrCostFunction.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [J, grad] = lrCostFunction(theta, X, y, lambda)
%LRCOSTFUNCTION Compute cost and gradient for logistic 
m = length(y);
J = 0;
grad = zeros(size(theta));
% ====================== YOUR CODE HERE ======================
h = sigmoid(X * theta);
J = -1 / m * (y' * log(h) + (1-y')*(log(1-h))) + lambda / (2 * m) * (sum(theta .^ 2) - theta(1) .^ 2);
grad = 1 / m * X' * (h - y) + lambda / m * theta;
grad(1) =  1 / m * (X' * (h - y))(1);
% =============================================================
grad = grad(:);
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="One-vs-All-Training"><a href="#One-vs-All-Training" class="headerlink" title="$One-vs-All\ Training$"></a>$One-vs-All\ Training$</h3><p>利用$fmincg$来计算$all_theta$ ,$fmincg$计算训练集对每个数字算出的参数，把参数加入$all_theta$ 即可</p>
<p>— $oneVsAll.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function [all_theta] = oneVsAll(X, y, num_labels, lambda)
m = size(X, 1);
n = size(X, 2);
all_theta = zeros(num_labels, n + 1);
X = [ones(m, 1) X];
% ====================== YOUR CODE HERE ======================
initial_theta = zeros(n + 1, 1);
options = optimset('GradObj', 'on', 'MaxIter', 50);
for i = 1:num_labels
  all_theta(i,:) = fmincg(@(t)(lrCostFunction(t, X, (y==i), lambda)), initial_theta, options);
endfor
% ========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Predict-for-One-Vs-All"><a href="#Predict-for-One-Vs-All" class="headerlink" title="$Predict\ for\ One-Vs-All$"></a>$Predict\ for\ One-Vs-All$</h3><p>用$X\times \theta^T$来计算每个样例对每个数字的几率</p>
<p>$[m\times(n+1)]\times[10\times(n+1)]^T$</p>
<p>利用max来得到最大几率的索引</p>
<p>— $predictOneVsAll.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function p = predictOneVsAll(all_theta, X)
m = size(X, 1);
num_labels = size(all_theta, 1);
p = zeros(size(X, 1), 1);
X = [ones(m, 1) X];
% ====================== YOUR CODE HERE ====================== 
all_p = sigmoid(X * all_theta');
[A, p] = max(all_p,  [], 2);
% =========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Implement-Predict"><a href="#Implement-Predict" class="headerlink" title="$Implement\ Predict$"></a>$Implement\ Predict$</h3><p>题目给出了$4000\to 25\to10$的神经网络，输入层400个参数，隐藏层25个，输出层10个，代表这个样例是某个数字的可能性</p>
<p>题目给出了参数$\Theta_1$和$\Theta_2$,我们只需要使用即可</p>
<p>— $predict.m$</p>
<pre class="line-numbers language-octave" data-language="octave"><code class="language-octave">function p = predict(Theta1, Theta2, X)
m = size(X, 1);
num_labels = size(Theta2, 1);
p = zeros(size(X, 1), 1);
% ====================== YOUR CODE HERE ======================
X = [ones(m, 1) X];
hide_layer =  sigmoid(X * Theta1');
hide_layer = [ones(m, 1) hide_layer];
out_layer = sigmoid(hide_layer * Theta2');
[A, p] = max(out_layer, [], 2);
% =========================================================================
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>机器学习</category>
        <category>机器学习作业</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>机器学习作业</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习2</title>
    <url>//e0295d92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="多个特征值"><a href="#多个特征值" class="headerlink" title="多个特征值"></a>多个特征值</h2><p>对于多个特征的线性回归，我们使用</p>
<p>$m$：代表训练集的大小</p>
<p>$n$：代表特性的数量</p>
<p>$x^{(i)}$：代表第$i$组数据</p>
<p>$x^{(i)}_j$：代表第$i$组数据中的第$j$个特征</p>
<p>对于多个特性的线性回归公式</p>
<p>$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_2+\cdots+\theta_nx_n$</p>
<p>我们把参数和特征值看成两个向量</p>
<p>$\theta=\begin{bmatrix}\theta_0 \\ \theta_1 \\  \dots \\ \theta_n \end{bmatrix} ,X = \begin{bmatrix}x_0\\ x_1\\ \dots \\x_n \end{bmatrix}(x_0=1),$</p>
<p>那么$h$就可以看成</p>
<p>$h_{\theta}(x) = \theta^{T}X$</p>
<h2 id="多个特征值的梯度下降"><a href="#多个特征值的梯度下降" class="headerlink" title="多个特征值的梯度下降"></a>多个特征值的梯度下降</h2><p>线性回归：$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_2+\cdots+\theta_nx_n=\theta^TX$</p>
<p>代价函数：$J(\theta)=\frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2$</p>
<p>梯度下降跟原来$n=1$的时形式相同，只不过扩展了一下</p>
<p>梯度下降：$Repeat \{  \\ \theta_j:=\theta_j-\alpha\frac{\alpha}{\alpha\theta_j}J(\theta) \\ \}$ </p>
<p>经过求偏导以后梯度下降变为:</p>
<p>$Repeat \{  \\ \theta_j:=\theta_j-\alpha\frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j \\ \}$</p>
<h2 id="特征放缩"><a href="#特征放缩" class="headerlink" title="特征放缩"></a>特征放缩</h2><ul>
<li>尽量保证多个特征的值都处于一个相近的范围</li>
<li>更一般的将特征放缩到$-1\le x_i \le 1$</li>
<li>如果一个特征的范围再$-3\le x_i \le 3$是可以接收的</li>
</ul>
<h3 id="如何特征放缩"><a href="#如何特征放缩" class="headerlink" title="如何特征放缩"></a>如何特征放缩</h3><p>一般的使用：$x_i:=\frac{x_i-\mu_i}{s_i}$来进行特征缩放</p>
<p>$\mu_i$：一般表示训练集中特征$i$的平均值</p>
<p>$s_i$：一般表示训练集中特征$i$的范围(最大值-最小值)</p>
<h2 id="alpha-的调整"><a href="#alpha-的调整" class="headerlink" title="$\alpha$的调整"></a>$\alpha$的调整</h2><p>画一个代价函数随着迭代次数的增加，$J(\theta)$的值的变化图，确保$J(\theta)$随着迭代次数的增加而减小，如果不是，就需要考虑是否再减小$\alpha$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/FEfS3aajEea3qApInhZCFg_6be025f7ad145eb0974b244a7f5b3f59_Screenshot-2016-11-09-09.35.59.4ikm8ukc2ju0.png" alt="代价函数迭代次数"></p>
<p>但是如果$\alpha$太小，那么$J(\theta)$的收敛就会变得非常缓慢</p>
<h3 id="收敛"><a href="#收敛" class="headerlink" title="收敛"></a>收敛</h3><p>如果$J(\theta)$在一次迭代中减小到小于$E$，那么证明$J(\theta)$已经收敛，$E$是某个小值，如$10^{-3}$。但在实际应用中，这个阈值的选择比较困难。</p>
<h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>有时线性回归不足以拟合训练集中的数据，这时我们可以选择多项式回归。</p>
<p>我们可以改变我们的假设函数的行为或曲线，使它成为二次，三次或平方根函数(或任何其他形式)。</p>
<p>例如我们的假设方法是$h_{\theta}(x)=\theta_0+\theta_1x_1$,我们可以根据$x_1$创建附加的特征使其成为二次函数$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_1^2$或者三次函数$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2x_1^2+\theta_3x^3_1$或者我们也可以使用开平方$h_{\theta}(x)=\theta_0+\theta_1x_1+\theta_2\sqrt {x_1}$</p>
<p>值得注意的是，任何形式的参数都需要注意特征放缩使其在一个能够接受的范围</p>
<h2 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h2><p>梯度下降是得到最小代价函数的一种方法，而正规方程也可以得到最小的代价函数，而且是借助数学推导而不是迭代。</p>
<p>在正规方程中，我们显式的对线性回归的每个参数进行偏导，并使它们为0来最小化$J(\theta)$,这使我们在不需要迭代的情况下就能找到最优，正规方程的公式如下</p>
<p>$\theta=(X^TX)^{-1}X^Ty$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/dykma6dwEea3qApInhZCFg_333df5f11086fee19c4fb81bc34d5125_Screenshot-2016-11-10-10.06.16.2yjdw3vx0e60.png" alt="正规方程"></p>
<p>正规方程的特征值不需要进行缩放</p>
<h3 id="梯度下降与正规方程的比较"><a href="#梯度下降与正规方程的比较" class="headerlink" title="梯度下降与正规方程的比较"></a>梯度下降与正规方程的比较</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">梯度下降</th>
<th style="text-align:left">正规方程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">需要选择$\alpha$</td>
<td style="text-align:left">不需要选择$\alpha$</td>
</tr>
<tr>
<td style="text-align:left">需要很多次迭代</td>
<td style="text-align:left">不需要跌代</td>
</tr>
<tr>
<td style="text-align:left">复杂度$O(kn^2)$</td>
<td style="text-align:left">复杂度$O(n^3)$</td>
</tr>
<tr>
<td style="text-align:left">在$n$很大时也能很好的工作</td>
<td style="text-align:left">$n$很大时会很慢</td>
</tr>
</tbody>
</table>
</div>
<p>一般$n\gt 10000$时就不再考虑正规方程了</p>
<p>梯度下降对于很多其他的算法也能有很好的表现，但是正规方程可能并不适合</p>
<h3 id="当-X-TX-不可逆时"><a href="#当-X-TX-不可逆时" class="headerlink" title="当$X^TX$不可逆时"></a>当$X^TX$不可逆时</h3><p>在使用Octave时，我们使用$pinv$来求逆，即使你的矩阵不可逆，它也能够求出逆元</p>
<p>但是当$X^TX$不可逆时，我们可能从两个方面找原因</p>
<ul>
<li>特征之间线性相关</li>
<li>太多的特征值，而样本又太少</li>
</ul>
<p>解决上述问题的方法包括删除一个线性相关的特性，如果有太多的特性，删除一个或多个特性。</p>]]></content>
      <categories>
        <category>机器学习</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>525-连续数组</title>
    <url>//f303f9cc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="525-连续数组"><a href="#525-连续数组" class="headerlink" title="525. 连续数组"></a><a href="https://leetcode-cn.com/problems/contiguous-array/">525. 连续数组</a></h4><p>跟523类似，只不过将0的数量减去1的数量的值做前缀和，再用哈希表存储下标。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>
  <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pre <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> m<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> m<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>523-连续的字数组和</title>
    <url>//51b0a147/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="523-连续的子数组和"><a href="#523-连续的子数组和" class="headerlink" title="523. 连续的子数组和"></a><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">523. 连续的子数组和</a></h4><p>直接用前缀和和$k$取余来记录前面k的余数的位置，判断是否大于2即可</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">checkSubarraySum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    pre <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> pre<span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> m<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> m<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>杭电多校第一场</title>
    <url>//9d88cf0e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-Blank"><a href="#A-Blank" class="headerlink" title="A: Blank"></a>A: Blank</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n (n \leq 100)$ 个格子，向其中填入 $0、1、2、3 $这$4$个数，但是有 $m ( m ≤ 100)$ 个限制</p>
<p>限制 $l$   $ r$    $x$ ：表示 $l ~ r$ 的格子内不同的数的个数为$x$</p>
<p>要求满足所有限制的方案有多少种？</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们首先设$dp[i][j][k][r]$为这$0，1，2，3$四个数字的最后一次出现的位置,$dp$值为方案数</p>
<p>那么转移可以这样写一下:</p>
<p>$dp[cur][j][k][r] += dp[i][j][k][r], dp[i][cur][k][r] += dp[i][j][k][r]$</p>
<p>$dp[i][j][cur][r] += dp[i][j][k][r], dp[i][j][k][cur] += dp[i][j][k][r]$</p>
<p>因为$i,j,k,r$互不相同, 且当位一定为一个数字并且相互之间有大小顺序，那么我们把$dp$按照大小来转移的话</p>
<p>还是$dp[cur][i][j][k]$ 其中$cur \geq i \geq j \geq k$</p>
<p>那么转移就变成</p>
<p>$dp[cur+1][i][j][k]+=dp[cur][i][j][k], dp[cur+1][cur][j][k] += dp[cur][i][j][k]$</p>
<p>$dp[cur+1][cur][i][k] += dp[cur][i][j][k], dp[cur+1][cur][i][j] += dp[cur][i][j]$</p>
<p>我们不必要区分$0,1,2,3$对应的是哪一个，因为这对结果没影响</p>
<p>这样的$dp$数组太大，我们可以用滚动数组来优化一下空间</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><p>实测$dp$数组降序会$T$，可能是因为$dp$过程中地址变换太大造成超时.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>pis<span class="token operator">&gt;</span> lo<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//dp[i][j][k][cur] 升序</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> mod<span class="token punctuation">)</span> a <span class="token operator">-=</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> a <span class="token operator">+=</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lo<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>l<span class="token punctuation">,</span> x<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> cur <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> cur <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> np <span class="token operator">=</span> cur <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">/*add(dp[i][k][cur-1][np], dp[i][j][k][np^1]);
                        地址跨越比add(dp[np][cur-1][k][i], dp[np^1][k][j][i]);
                        要大，可能是造成超时的原因
                        */</span>
                        <span class="token function">add</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">add</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">add</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">add</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> cur<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                        <span class="token keyword">for</span> <span class="token punctuation">(</span>pis it<span class="token operator">:</span> lo<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">int</span> l <span class="token operator">=</span> it<span class="token punctuation">.</span>first<span class="token punctuation">,</span> r <span class="token operator">=</span> cur<span class="token punctuation">,</span> x <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
                            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">!=</span> x<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        
        <span class="token punctuation">}</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="L-Sequence"><a href="#L-Sequence" class="headerlink" title="L: Sequence"></a>L: Sequence</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给一个长度为n的数组，有m次操作，操作有3种，给一个x，每次改变序列的值$b_i=\sum\limits_{j=i-k*x}a_j$</p>
<p>求改变完了的序列的$(i\times a[i])$值的异或和</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>通过打表观察可以发现，一种操作多次操作就是把序列$a$和组合数序列进行卷积，然后就直接用ntt就行了</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">g</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Mod</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&gt;=</span>mod<span class="token operator">?</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>mod<span class="token operator">:</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

ll rnk<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll Fac<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">FacPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        Fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> Fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    inv<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>Fac<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">999999</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> inv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1ll</span> <span class="token operator">*</span> Fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> inv<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> inv<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ntt</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rnk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>rnk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nw <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token punctuation">(</span>mod<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nw <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>nw<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> i <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                    a<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    a<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    w <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> w <span class="token operator">*</span> nw <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> inv <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> inv <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll <span class="token operator">*</span>a<span class="token punctuation">,</span> ll <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lim <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> len <span class="token operator">+</span> len<span class="token punctuation">)</span> n <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> lim<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        rnk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rnk<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>lim<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ntt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ntt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token function">ntt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">FacPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> op<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cnt<span class="token punctuation">[</span>op<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                b<span class="token punctuation">[</span>j<span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>j<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">solve</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>合并排序链表+指针指向问题</title>
    <url>//f9d7dd15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="LeetCode-题目连接：https-leetcode-cn-com-problems-he-bing-liang-ge-pai-xu-de-lian-biao-lcof"><a href="#LeetCode-题目连接：https-leetcode-cn-com-problems-he-bing-liang-ge-pai-xu-de-lian-biao-lcof" class="headerlink" title="LeetCode 题目连接：https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/"></a>LeetCode 题目连接：<a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/</a></h4><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>
<p>示例1：</p>
<p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<br>限制：</p>
<p>0 &lt;= 链表长度 &lt;= 1000</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>很简单的题，直接定义一个头，然后两个指针相互比较即可。</p>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>再最初版本出现了问题，最开始的想法很简单，定义一个头<code>pre</code> 用他去遍历两个链表，再用一个<code>ans</code>来记录<code>pre</code>的头部，然后问题出现了，使用<code>pre=pre-&gt;next, pre=l2</code>时，发现<code>ans</code>并不能完全表达<code>pre</code>的值</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ListNode *pre = NULL;
if(l1-&gt;val &lt;= l2-&gt;val) {
    pre = l1;
    l1 = l1-&gt;next;

}else {
    pre = l2;
    l2 = l2-&gt;next;
}
ListNode* ans = pre;
pre = pre-&gt;next;
while(l1 != NULL &amp;&amp; l2 != NULL) {
    if(l1-&gt;val &lt;= l2-&gt;val) {
        pre = l1;
        l1 = l1-&gt;next;
    }else {
        pre = l2;
        l2 = l2-&gt;next;
    }
    pre = pre-&gt;next;
}           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类似如此，<code>ans</code>返回的时第一次的<code>pre</code>值</p>
<h5 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h5><p>第一次<code>ans=pre</code>，此时<code>ans</code>与<code>pre</code>指向同一个地址，类似如此</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gh8tv20gyfj318z0fsk80.jpg" alt="img1"></p>
<p>当执行<code>pre=pre-&gt;next</code>时</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gh8uasmxrlj31f90kptym.jpg" alt=""></p>
<p>当这时执行到<code>pre=l2</code>时，</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gh8utv4338j31df0mbx5l.jpg" alt=""></p>
<p>会发现<code>pre</code>指针直接指向<code>l2</code>,而不会带着next指针一起指向<code>l2</code>，这就造成了<code>pre</code>自己走完了一整个链表而<code>ans</code>却一直指向开始的位置。</p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>指的时候带上<code>next</code>就可以了</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ListNode* pre = new ListNode(0);
ListNode* cur = pre;
while(l1 != NULL &amp;&amp; l2 != NULL) {
    if(l1-&gt;val &lt;= l2-&gt;val) {
        cur-&gt;next = l1;
        l1 = l1-&gt;next;
    }else {
        cur-&gt;next = l2;
        l2 = l2-&gt;next;
    }
    cur = cur-&gt;next;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* pre = new ListNode(0);
        ListNode* cur = pre;
        while(l1 != NULL &amp;&amp; l2 != NULL) {
            if(l1-&gt;val &lt;= l2-&gt;val) {
                cur-&gt;next = l1;
                l1 = l1-&gt;next;
            }else {
                cur-&gt;next = l2;
                l2 = l2-&gt;next;
            }
            cur = cur-&gt;next;
        }
        if(l1 != NULL) cur-&gt;next = l1;
        if(l2 != NULL) cur-&gt;next = l2;
        return pre-&gt;next;
    }
};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin安装NVIDIA以及refind</title>
    <url>//81fa645f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Deepin安装NVIDIA驱动"><a href="#Deepin安装NVIDIA驱动" class="headerlink" title="Deepin安装NVIDIA驱动"></a>Deepin安装NVIDIA驱动</h1><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><p>首先根据自己电脑独显的型号去NVIDIA<a href="https://www.nvidia.cn/geforce/drivers/">官网</a>选择对应驱动</p>
<p>如果不确定自己电脑显卡型号，可以用<code>sudo lshw -numeric -C display</code>来查看</p>
<h3 id="卸载以前的驱动"><a href="#卸载以前的驱动" class="headerlink" title="卸载以前的驱动"></a>卸载以前的驱动</h3><p>如果之前在Linux中安装过NVIDIA驱动的话，请将其全部删除</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> autoremove nvidia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="禁用nouveau"><a href="#禁用nouveau" class="headerlink" title="禁用nouveau"></a>禁用nouveau</h3><p>nouveau是通过逆向“Nvidia的Linux驱动”创造的一个开源第三方Nvidia显卡驱动程序，因此其效果差，性能低。在手动安装NVIDIA时需要禁用nouveau驱动。</p>
<p>终端执行以下命令修改文件。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以下内容复制到文件中</p>
<pre class="line-numbers language-none"><code class="language-none">blacklist nouveau   
blacklist lbm-nouveau   
options nouveau modeset=0 
alias nouveau off   
alias lbm-nouveau off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>保存退出。<br>其中，blacklist nouveau是禁用nouveau第三方驱动，之后不需要改回来<br>由于nouveau是构建在内核中的，所以要执行下面命令生效:</p>
<pre class="line-numbers language-none"><code class="language-none">sudo update-initramfs -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启后查看nouveau有没有运行,没输出代表禁用生效</p>
<pre class="line-numbers language-none"><code class="language-none">lsmod | grep nouveau  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="关闭图形界面"><a href="#关闭图形界面" class="headerlink" title="关闭图形界面"></a>关闭图形界面</h3><p>安装Nvidia驱动程序时，需要停止当前的图形界面。<br>使用快捷键CTRL+ALT+F2进入超级终端，登录账号，并关闭图形界面：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo service lightdm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="给驱动文件添加执行权限"><a href="#给驱动文件添加执行权限" class="headerlink" title="给驱动文件添加执行权限"></a>给驱动文件添加执行权限</h3><p>下载好的nvidia驱动文件是.run，需要添加执行权限。<br>使用cd指令进入下载好的驱动文件路径，如果没有改浏览器的下载路径，路径一般是/home/（你的用户名）/Downloads 。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo chmod +x NVIDIA***.run  #记得文件名改成自己下载的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><pre class="line-numbers language-none"><code class="language-none">sudo ./NVIDI**.run  #记得文件名改成自己下载的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个时候会出现一个页面，一系列yes，还有一个界面选择install and cover，意为安装和覆盖。然后等待几分钟。</p>
<h3 id="重启-1"><a href="#重启-1" class="headerlink" title="重启"></a>重启</h3><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样NVIDIA驱动就装好了。</p>
<h2 id="检测NVIDIA驱动是否成功安装"><a href="#检测NVIDIA驱动是否成功安装" class="headerlink" title="检测NVIDIA驱动是否成功安装"></a>检测NVIDIA驱动是否成功安装</h2><h3 id="使用nvidia-settings命令"><a href="#使用nvidia-settings命令" class="headerlink" title="使用nvidia-settings命令"></a>使用<strong>nvidia-settings</strong>命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-settings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看到显卡数据</p>
<h3 id="使用nvidia-smi命令"><a href="#使用nvidia-smi命令" class="headerlink" title="使用nvidia-smi命令"></a>使用nvidia-smi命令</h3><p>英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library 的命令行管理组件,旨在帮助管理和监控NVIDIA GPU设备。</p>
<pre class="line-numbers language-none"><code class="language-none">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行这条命令将会打印出当前系统安装的NVIDIA驱动信息</p>
<h3 id="命令行搜索集显和独显"><a href="#命令行搜索集显和独显" class="headerlink" title="命令行搜索集显和独显"></a>命令行搜索集显和独显</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lspci <span class="token operator">|</span> <span class="token function">grep</span> VGA     <span class="token comment"># 查看集成显卡</span>
lspci <span class="token operator">|</span> <span class="token function">grep</span> NVIDIA  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="查看nouveau是否运行"><a href="#查看nouveau是否运行" class="headerlink" title="查看nouveau是否运行"></a>查看nouveau是否运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> nouveau<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="集显与独显切换"><a href="#集显与独显切换" class="headerlink" title="集显与独显切换"></a>集显与独显切换</h2><p>笔记本外出时使用集显可以节省电量，增长待机时间。<br>可以使用插件：dde-dock-switch_graphics_card<br>Github：<a href="https://github.com/zty199/dde-dock-switch_graphics_card">https://github.com/zty199/dde-dock-switch_graphics_card</a><br>安装后可以方便地在dock栏切换显卡</p>
<h1 id="使用refind引导win10和deepin"><a href="#使用refind引导win10和deepin" class="headerlink" title="使用refind引导win10和deepin"></a>使用refind引导win10和deepin</h1><h2 id="安装refind"><a href="#安装refind" class="headerlink" title="安装refind"></a>安装refind</h2><p>最好在deepin环境下安装refind，因为这样比较简单。</p>
<p>在deepin环境下安装refind有两种方法，使用终端命令行或者下载安装包。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-add-repository ppa:rodsmith/refind
sudo apt-get update
sudo apt-get install refind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装好refind后重启，你会发现电脑默认引导已经变成了refind，EFI 分区也出现了refind文件夹。但此时的引导界面有两个问题：</p>
<p>1、选项很多，而且界面很丑；<br>2、选择deepin系统后还是会进入grub引导界面，浪费时间。</p>
<p>因此接下来我们需要修改一些东西。</p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="设置grub等待时间为0"><a href="#设置grub等待时间为0" class="headerlink" title="设置grub等待时间为0"></a>设置grub等待时间为0</h3><p>在deepin中，通用&gt;启动&gt;启动延时关闭</p>
<h3 id="下载好看的refind主题"><a href="#下载好看的refind主题" class="headerlink" title="下载好看的refind主题"></a>下载好看的refind主题</h3><p>首先下载主题压缩包，特别推荐我自己使用的这款极简主题（自带凤凰系统的图标），下载地址：</p>
<p>github：<a href="https://github.com/EvanPurkhiser/rEFInd-minimal">https://github.com/EvanPurkhiser/rEFInd-minimal</a></p>
<p>将解压后的文件放入refind文件夹下的themes文件夹（没有的话可以自行创建）内，可以在deepin环境下使用终端命令操作，也可以切换到win10系统用diskgenius软件进行操作。</p>
<h3 id="修改refind配置文件"><a href="#修改refind配置文件" class="headerlink" title="修改refind配置文件"></a>修改refind配置文件</h3><p>使用deepin终端修改/EFI/refind/refind.conf文件，需要使用的基本命令如下：</p>
<pre class="line-numbers language-none"><code class="language-none">su root    #获取root权限
vim 你的目录/refind.conf    #使用vim修改文件
i    #进入修改模式
ESC按键    #退出修改模式
:wq    #保存并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入vim编辑模式后，可以看到配置文件有大量的注释，需要修改的命令行其实只有如下几处：</p>
<pre class="line-numbers language-none"><code class="language-none">timeout 3
resolution 1920 1080
dont_scan_files /EFI/ubuntu/grubx64.efi,/EFI/UOS/fbx64.efi,/EFI/UOS/mmx64.efi,/EFI/UOS/shimx64.efi,/EFI/boot/bootx64.efi,/EFI/boot/grubx64.efi
scan_all_linux_kernels false
include  themes/rEFInd-minimal/theme.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就可以用refind引导deepin和win10了</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
        <tag>NVIDA驱动</tag>
        <tag>refind</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记（三）</title>
    <url>//a8ec0156/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记-三"><a href="#C-学习笔记-三" class="headerlink" title="C++ 学习笔记(三)"></a>C++ 学习笔记(三)</h1><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><h3 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h3><p>​        在一个类中，若将一个成员变量声明为<code>static</code>，这种成员成为静态变量，与一般的数据成员不同，无论建立了多少个对象，都只有一个静态数据的拷贝，静态成员变量，属于某个类，所有对象共享。</p>
<p>​        静态变量，是在编译阶段就分配空间，对象还没有创建时，就已经分配空间。</p>
<ul>
<li>静态成员变量必须在类中声明，在类外定义</li>
<li>静态数据成员 不属于某个对象，在为对象分配空间中不包括静态对象成员所占空间</li>
<li>静态数据成员可以通过类名或者对象名来引用</li>
<li>静态成员变量在类内声明，在类外初始化</li>
<li>静态成员变量也有权限</li>
</ul>
<h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><ul>
<li>静态成员函数不可以访问普通的成员变量，可以访问静态成员变量</li>
<li>静态成员函数也是有权限的</li>
<li>普通成员函数可以访问普通成员变量，也可以访问静态成员变量    </li>
</ul>
<h2 id="面向对象模型初探"><a href="#面向对象模型初探" class="headerlink" title="面向对象模型初探"></a>面向对象模型初探</h2><h3 id="成员变量和函数的存储"><a href="#成员变量和函数的存储" class="headerlink" title="成员变量和函数的存储"></a>成员变量和函数的存储</h3><p>数据 和 处理数据的操作是分开存储的</p>
<ul>
<li><code>C++</code>中的非静态数据成员直接内含在类对象中，就像<code>C struct</code>一样</li>
<li>成员函数虽然内含在<code>class</code>声明之内，却不出现在对象中</li>
<li>每一个非内联成员函数只会诞生一份函数实例</li>
</ul>
<p>空类的大小为1,每一个实例的对象，都有独一无二的地址，<code>char</code>维护这个地址</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">// 非静态成员变量，属于对象身上</span>
    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//非静态成员函数，不属于对象身上</span>
   	<span class="token keyword">static</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">// 静态成员变量，不属于对象身上</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//静态成员函数，不属于对象身上</span>
<span class="token punctuation">}</span>
<span class="token comment">// 结论： 非静态成员变量，才属于对象身上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><code>this</code>指针</h3><p><code>this</code>指针称为“永远指向本对象的指针”，<code>this</code>指针并不是对象的一部分,<code>*this</code>是对象本体</p>
<p><code>this</code>指针是一种隐含指针，它隐含于每个类的非静态成员函数中，静态成员函数不能访问<code>this</code>指针</p>
<p><code>this</code>指针指向被调用的成员函数所属的对象</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person p1<span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Person<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译器会偷偷加上一个p1的this指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h4><p>空指针可以访问成员函数，但是如果成员函数中用到了<code>this</code>指针，那么就会执行失败</p>
<h4 id="const-修饰成员函数"><a href="#const-修饰成员函数" class="headerlink" title="const 修饰成员函数"></a><code>const</code> 修饰成员函数</h4><p><code>this</code>永远指向本体，类似<code>Person * const this</code>,<code>this</code>的指向不能修改，但指针指向的值可以修改</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// const加后面代表常函数，意味着不允许修改指针指向的值</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_B <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 如果在常函数中修改，那么就在成员变量前面加mutable</span>
<span class="token punctuation">}</span>
<span class="token keyword">mutable</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h4><p>常对象不允许修改属性</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> Person p2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>常对象不可以调用普通的成员函数，可以调用常函数</p>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>友元函数可以访问类的私有成员属性</p>
<h3 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h3><p>全局函数可以作为类的友元函数，在类中声明全局函数，并加上<code>friend</code>关键字</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
	<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>
    <span class="token comment">// B作为A的友元类，可以访问A的私有成员属性</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    firend <span class="token keyword">void</span> <span class="token class-name">B</span><span class="token operator">::</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// B的成员函数作为A的友元，可以访问A的私有成员属性</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>如果想让自定义数据类型进行运算符运算，那么就需要重载运算符。</p>
<p>在成员函数或者在全局函数中，重写一个运算符重载，运算符重载也可以进行重载</p>
<p><strong>对于内置数据类型的表达式运算符是不可以改变的（例如int类型的+号）</strong></p>
<h3 id="号重载"><a href="#号重载" class="headerlink" title="+号重载"></a><code>+</code>号重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类内重载</span>
    A <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>A <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        A tmp<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 全局重载</span>
A <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> A <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A tmp<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lt-左移运算符"><a href="#lt-左移运算符" class="headerlink" title="<左移运算符"></a><code>&lt;</code>左移运算符</h3><p>不要随意使用符号重载，<code>cout &lt;&lt;</code>可以对自定义数据类型进行输出</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一个参数cout，第一个参数A    </span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//全局重载可以在类中添加friend，访问类的私有成员属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="前置后置递增运算符重载"><a href="#前置后置递增运算符重载" class="headerlink" title="前置后置递增运算符重载"></a>前置后置递增运算符重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyInt</span><span class="token punctuation">{</span>  <span class="token comment">// 前置++重载</span>
    MyInt<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 后置++重载，使用int来区分</span>
    MyInt <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInt tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token keyword">int</span>  num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="指针运算符重载"><a href="#指针运算符重载" class="headerlink" title="指针运算符重载"></a>指针运算符重载</h3><p>智能指针，用来托管自定义类型对象，让对象进行自动的释放</p>
<p>智能指针就是一个包含对象类型的类，重载<code>-&gt;</code>可以使得智能指针调用类内指针的成员函数以及成员变量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A <span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 加上*代表返回指针    </span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
A <span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h3><p>一个类默认创建，默认构造、析构、拷贝构造 、<code>operator=</code>赋值元算符</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">// 重载=    </span>
    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>       
        <span class="token comment">//先判断堆区是否有内容       </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>pName <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>pName<span class="token punctuation">;</span>            
            <span class="token keyword">this</span><span class="token operator">-&gt;</span>pName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span>        
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>pName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>pName<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        
        <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>pName<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pName<span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>    
    <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> pName<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="重载"><a href="#重载" class="headerlink" title="[]重载"></a>[]重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyArray</span><span class="token punctuation">{</span> 
    <span class="token keyword">public</span><span class="token operator">:</span>    
              <span class="token comment">// []重载	</span>
              <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span>   idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>		
                  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>pAddress<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>   
              <span class="token punctuation">}</span>   <span class="token keyword">private</span><span class="token operator">:</span>    
    <span class="token keyword">int</span> <span class="token operator">*</span>pAddress<span class="token punctuation">;</span>    
    <span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>   
    <span class="token keyword">int</span> m_Capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>		
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">==</span> p<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>     
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     
        <span class="token punctuation">}</span>       
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>   
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>	
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">==</span> p<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>      
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>      
    string name<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>   
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数调用运算符"><a href="#函数调用运算符" class="headerlink" title="函数调用运算符"></a>函数调用运算符</h3><p>()重载</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
MyPrint mp<span class="token punctuation">;</span><span class="token comment">//仿函数</span>
<span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span> 
<span class="token function">mp</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 匿名对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>=， []，-&gt; 操作符只能通过成员函数进行重载</li>
<li>&lt;&lt;，&gt;&gt;只能通过全局函数配合友元函数重载</li>
<li>不要重载&amp;&amp;，||操作符，因为无法实现短路规则</li>
</ul>]]></content>
      <categories>
        <category>C++ 学习</category>
      </categories>
      <tags>
        <tag>C++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习1</title>
    <url>//79200c28/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><blockquote>
<p>$A\ computer\ program\ is\ said\ to\ learn\ from\  experience\ E\ with $</p>
<p>$respect\ to\ some\ class\ of\ tasks\ T\ and\ performance\ measure\ P,\ if\ $</p>
<p>$its\ performance\ at\ tasks\ in\ T,\ as\ measured\ by\ P,\ improves\ with\ $</p>
<p>$experience\ E.$ </p>
</blockquote>
<p>一个计算机程序可以从经验$E$中学习，执行任务$T$，由$P$做性能评估，并且他在$T$任务中的表现(由$P$衡量)随着经验$E$的提高而提高。</p>
<p>以下跳棋为例:</p>
<blockquote>
<p>$E:$  下过很多跳棋的经验</p>
<p>$T：$下跳棋的任务</p>
<p>$P ：$下一局赢下跳棋的可能性</p>
</blockquote>
<p>一般的任何机器学习都可以分类两类：监督学习和非监督学习</p>
<h3 id="什么是监督学习"><a href="#什么是监督学习" class="headerlink" title="什么是监督学习"></a>什么是监督学习</h3><blockquote>
<p>$In\ supervised\ learning,\ we\ are\ given\ a data\ set\ and\ already\ know\ $</p>
<p>$what\ our\ correct\ output\ should\ look\ like,having\ the\ idea\ that\ there\ $</p>
<p>$is\ a\ relationship\ between\ the\ input\ and\ the\ output.$</p>
</blockquote>
<p>在监督学习中，我们已知一个数据集，并且已经知道正确的输出应该是什么样的，我们知道输入与输出之间存在着一种关系。</p>
<p>在监督学习中，我们已经知道数据集的含义、分布，根据已知的信息来预测。</p>
<blockquote>
<p>$Supervised\ learning\ problems\ are\ categorized\ into\ “regression”\ and\ $</p>
<p>$”classification”\ problems.\ In\ a\ regression\ problem,\ we\ are\ trying\ to\ $</p>
<p>$predict\ results\ within\ a\ continuous\ output,\ meaning\ that \ we\ are\ $</p>
<p>$trying\ to\ map\ input\ variables\ to\ some\ continuous\ function.\ In\ a\ $</p>
<p>$classification\ problem,\ we\  are\  instead\ trying\ to\ predict\ results\ $</p>
<p>$in\ a\ discrete\ output.\ In\ other\ words,\ we\ are\ trying\ to\ map\ input\ $</p>
<p>$variables\ into\ discrete\ categories.\ $</p>
</blockquote>
<p>监督学习问题分为“回归”问题和“分类”问题。在回归问题中，我们试图预测连续输出中的结果，这意味着我们试图将输入变量映射到某个连续函数。在分类问题中，我们试图预测离散输出中的结果。换句话说，我们试图将输入变量映射到离散的类别中。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>回归问题：给一张照片，去预测照片中人的年龄</p>
<p>分类问题：对于患有肿瘤的病人，去预测肿瘤是良性还是恶性</p>
<h3 id="什么是无监督学习"><a href="#什么是无监督学习" class="headerlink" title="什么是无监督学习"></a>什么是无监督学习</h3><blockquote>
<p>$Unsupervised\ learning\ allows\ us\ to\ approach\ problems\ with\ little\ or\ $</p>
<p>$no\ idea\ what\ our\ results\ should\  look\ like.\ We\ can\ derive\ $</p>
<p>$ structure\ from\ data\ where\ we\ don’t\ necessarily\ know\ the\ effect\ of\ $</p>
<p>$the\ variables.\ $</p>
<p>$We\ can\ derive\ this\ structure\ by\ clustering\ the\ data\ based\ on\ $</p>
<p>$relationships\ among\ the\ variables\ in\ the\ data.$</p>
<p>$With\ unsupervised\ learning\ there\ is\ no\ feedback\ based\ on\ the\ prediction\ results.$</p>
</blockquote>
<p>无监督学习让我们在几乎不知道结果是什么的情况下处理问题。我们可以从数据中得出结构，而我们并不一定知道变量的影响。</p>
<p>我们可以根据数据中变量之间的关系对数据进行聚类，从而得到这种结构。</p>
<p>在无监督学习中，没有基于预测结果的反馈。</p>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>收集100万个不同的基因，然后找到一种方法将这些基因分组，这些分组在某种程度上是相似的，或者由不同的变量(如寿命、位置、角色等)相关的。</p>
<h2 id="建立符号规则"><a href="#建立符号规则" class="headerlink" title="建立符号规则"></a>建立符号规则</h2><p>$m$ 表示训练集数量，对于训练集中的每一项，我们使用$x^{(i)}$表示训练集中的第$i$行输入的变量，使用$y^{(i)}$表示训练集中第$i$行输出的变量 。</p>
<p>一对$(x^{(i)},y^{(i)})$成为一个训练样例，$(i)$只是表示训练集中的索引，而不是次幂。还使用$X$来表示输入值的空间，$Y$表示输出值的空间。</p>
<h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><blockquote>
<p>$To\ describe\ the\ supervised\ learning\ problem\ slightly\ more\ formally,\ $</p>
<p>$our\ goal\ is,\ given\ a\ training\ set,\ to\ learn\ a\ function\ h\ :\ X\ →\ Y\ $</p>
<p>$ so\ that\ h(x)\ is\ a\ “good”\ predictor\ for\ the\ corresponding\ value\ of\ y.\ $</p>
<p>$For\ historical\ reasons,\ this\ function\ h\ is\ called\ a\ hypothesis.\ $</p>
<p>$Seen\ pictorially,\ the\ process\ is\ therefore\ like\ this:\ $</p>
</blockquote>
<p>为了更正式地描述监督学习问题，我们的目标是，给定一个训练集，学习一个函数$h: X → Y$，使$h(X)$是对应的$Y$值的一个很好的预测器。由于历史原因，这个函数$h$被称为一个假设。从图片上看，这个过程是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/supervised learning process.3tlcgn2ah0o0.png" alt="supervised learning process"></p>
<h3 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h3><p>假设的$h$函数由$h_{\theta}(x)=\theta_0 + \theta_1x$拟合而来，$\theta_0$和$\theta_1$是两个未知参数</p>
<p>我们的目的是选择最适合的$\theta_0,\theta_1$以便于$h_{\theta}(x)$最接近与真正的训练集对应$Y$值的分布</p>
<p>代价函数$J(\theta_0,\theta_1)=\frac{1}{2m}\sum\limits_{i=1}^m(\hat y_i -y_i)^2=\frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2$表示$h$函数与$Y$值之间的误差</p>
<p>$Goal:\ \min\limits_{\theta_0,\theta_1}J(\theta_0, \theta_1)$</p>
<p>把$\theta_0$设成0,不同的$\theta_1$对应的$h$函数所形成的误差在$J(\theta_1)$的图像上呈现一个二次函数的图像，寻找$J(\theta_1)$的最小值，就是寻找最适合，最拟合与$Y$的$h(\theta_1)$函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/Cost Function.x637adlj7nk.png" alt="Cost Function"></p>
<h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>梯度下降算法就是根据当前的参数和代价函数选择一个下降方向，最终达到局部最优解的一种算法。</p>
<blockquote>
<p>$The\ way\ we\ do\ this\ is\ by\ taking\ the\ derivative\ (the\ tangential$</p>
<p>$line\ to\ a\ function)\ of\ our\ cost\ function.\ The\ slope\ of\ the\ tangent$</p>
<p> $is\ the\ derivative\ at\ that\ point\ and\ it\ will\ give\ us\ a\ direction$</p>
<p>$to\ move\ towards.\ We\ make\ steps\ down\ the\ cost\ function\ in\ the$</p>
<p>$direction\ with\ the\ steepest\ descent.$</p>
</blockquote>
<p>梯度下降算法是求当前代价函数的导数（也就是函数图像的切线），这一点的导数会给我们一个方向，我们按下降最陡的方向逐步降低成本函数。</p>
<blockquote>
<p>$The\ size\ of\ each\ step\ is\ determined\ by\ the\ parameter\ α,\ which\ is$</p>
<p>$called\ the\ learning\ rate.$</p>
</blockquote>
<p>每个步骤的大小由参数α决定，称为学习率。</p>
<p>$repeat\ until\ convergence\ \{ \\ \theta_j\ :=\  \theta_j\ - \alpha \ \frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1) (for j=0 and j=1) \\ \}$</p>
<p>$\theta_0$和$\theta_1$同时更新，而不是先更新$\theta_0$，然后再更新$\theta_1$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/yr-D1aDMEeai9RKvXdDYag_627e5ab52d5ff941c0fcc741c2b162a0_Screenshot-2016-11-02-00.19.56.6zxmtif8pt40.png" alt="更新方法"></p>
<blockquote>
<p><strong>泰勒展开</strong></p>
<p>泰勒公式是将一个在$x=x_0$处具有$n$阶导数的函数$f(x)$利用关于$(x-x0)$的$n$次多项式来逼近函数的方法。</p>
<p>若函数$f(x)$在包含$x_0$的某个闭区间$[a,b]$上具有$n$阶导数，且在开区间$(a,b)$上具有$(n+1)$阶导数，则对闭区间$[a,b]$上任意一点$x$，成立下式：</p>
<p>$f(x) = \frac{f(x_0)}{0!}+\frac{f’(x_0)}{1!}(x-x_0)+…+\frac{f^{(n)}(x_0)}{n!} + R_n(x)$</p>
<p>梯度下降在推导过程中使用了1阶泰勒展开</p>
<p>$f(x+\Delta x)\approx f(x) + a^t\Delta x$</p>
<p>$\Delta x$是一个向量，$a$也是一个向量,$a^t$就是当前的梯度</p>
<p>梯度下降的目的是找到一个方向使得$f(x)\gt f(x+\Delta x)$, 在$x$附近小范围的$\Delta x$找到一个点使得$f(x+\Delta x)$最小，然后向着这个的方向移动并迭代，在计算$\min\limits_{||\Delta x|| \le \epsilon} f(x+\Delta x)$时使用泰勒展开减小计算量</p>
<p><strong>柯西不等式</strong></p>
<p>两个向量做内积时$||<a,b>||^2 \le ||a||^2 ||b||^2$,等式成立当且仅当$a,b$在一条直线上，或者说$a,b$线性相关</a,b></p>
<p>$a^t\Delta x=<a,\delta x=""> \ge -||a|| \ ||b|| \ge -||a||\epsilon$</a,\delta></p>
<p>即$a^t\Delta x \ge -\epsilon ||a||$不等式成立时$\Delta x = -\lambda a, \lambda &gt;0$</p>
</blockquote>
<h4 id="梯度下降如何达到最优点"><a href="#梯度下降如何达到最优点" class="headerlink" title="梯度下降如何达到最优点"></a>梯度下降如何达到最优点</h4><p>我们现在使用一个简单函数来解释一下梯度下降算法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/SMSIxKGUEeav5QpTGIv-Pg_ad3404010579ac16068105cfdc8e950a_Screenshot-2016-11-03-00.05.06.7ce3ttmbrrc.png" alt="梯度下降如何达到最优点"></p>
<p>假设我们的参数只有一个</p>
<p>$\theta_1 :=\theta_1-\alpha \frac{\partial}{\partial\theta_1}J(\theta_0)$</p>
<p>图上第一个例子：当所在点在最优解右侧时，斜率为正$\theta$减去的时正值，$\theta$向左边移动</p>
<p>图上第二个例子：当所在点在最优解左侧时，斜率为正$\theta$减去的时负值，$\theta$向右边移动</p>
<p>根据斜率（也就是导数）移动，可以移动到当前可以到达的最优点</p>
<h4 id="步距"><a href="#步距" class="headerlink" title="步距"></a>步距</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/UJpiD6GWEeai9RKvXdDYag_3c3ad6625a2a4ec8456f421a2f4daf2e_Screenshot-2016-11-03-00.05.27.416l0lpgujs0.png" alt="步距"></p>
<p>当我们的步距过大和过小时都会出现问题</p>
<p>过小时移动次数太多，移动距离太小</p>
<p>过大时会越过最优点</p>
<h4 id="梯度下降如何与固定步长相结合"><a href="#梯度下降如何与固定步长相结合" class="headerlink" title="梯度下降如何与固定步长相结合"></a>梯度下降如何与固定步长相结合</h4><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/RDcJ-KGXEeaVChLw2Vaaug_cb782d34d272321e88f202940c36afe9_Screenshot-2016-11-03-00.06.00.4t7xs1l77fc0.png" alt="梯度下降如何与固定步长相结合"></p>
<p>当点越接近最低点时，导数最小，到最低点时导数为零，这就控制了步长使得步长的移动合适</p>
<h4 id="梯度下降与代价函数结合"><a href="#梯度下降与代价函数结合" class="headerlink" title="梯度下降与代价函数结合"></a>梯度下降与代价函数结合</h4><p>拟合函数：$h(\theta_0,\theta_1)=\theta_0+\theta_1x$</p>
<p>代价函数: $J(\theta_0, \theta_1) = \frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2$</p>
<p>梯度下降:$repeat\ until\ convergence\ \{ \\ \ \ \ \  \theta_j\ :=\  \theta_j\ - \alpha \ \frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1) (for j=0 and j=1) \\ \} $</p>
<p>结合一下: $\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\\ = \frac{1}{2m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2 \\ = \frac{1}{2m}\sum\limits_{i=1}^m(\theta_0+\theta_1(x^{(i)})-y^{(i)})^2$</p>
<p>经过简单的微分过程:$\theta_0\  j = 0 \ :\ \ \frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)= \frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)}) \\  \theta_1\  j = 1 \ :\ \ \frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)= \frac{1}{m}\sum\limits_{i=1}^m(h_{\theta}((x^{(i)})-y^{(i)}) \cdot x^{(i)}) $</p>
<p>$m$是训练集的大小，$\theta_0$是常量它会随着$\theta_1$同步变化</p>
<p>这种方法在每一步上看整个训练集中的每个例子，称为批梯度下降。</p>
<h3 id="矩阵和向量"><a href="#矩阵和向量" class="headerlink" title="矩阵和向量"></a>矩阵和向量</h3><p>矩阵的定义不在赘述，向量是一种特殊的矩阵，向量的结构是$n \times 1$的矩阵</p>
<p>$y=\begin{bmatrix} a\\ b\\c\\d\\ \end{bmatrix}$</p>
<p>$y_i$表示第$i$个元素 </p>
<p>向量的下标可以有不同的起始，从1开始和从0开始，在数学中通常使用从1开始，在计算机领域通常使用从0开始</p>
<p>$y=\begin{bmatrix} y_1\\ y_2\\ y_3\\ y_4\\ \end{bmatrix} , y=\begin{bmatrix} y_0\\ y_1\\ y_2\\ y_3\\ \end{bmatrix}$</p>
<h4 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h4><p>两个矩阵相加必须是规格相同的两个矩阵对应位置相加</p>
<p>$\begin{bmatrix}1 &amp;&amp; 0\\2 &amp;&amp; 5 \\ 3 &amp;&amp; 1\end{bmatrix} + \begin{bmatrix}4 &amp;&amp; 0.5\\2 &amp;&amp; 5 \\ 0 &amp;&amp; 1\end{bmatrix}=\begin{bmatrix}5 &amp;&amp; 0.5\\4 &amp;&amp; 10 \\ 3 &amp;&amp; 2\end{bmatrix}$</p>
<h4 id="矩阵乘除"><a href="#矩阵乘除" class="headerlink" title="矩阵乘除"></a>矩阵乘除</h4><p>矩阵乘以常量就是每个矩阵的每一元素乘上常量，除法类似</p>
<p>$k\times \begin{bmatrix}1 &amp;&amp; 0\\2 &amp;&amp; 5 \\ 3 &amp;&amp; 1\end{bmatrix} = \begin{bmatrix}1k &amp;&amp; 0k\\2k &amp;&amp; 5k \\ 3k &amp;&amp; 1k\end{bmatrix}$</p>
<p>两个矩阵相乘必须是$m\times n$和$n \times k$ 形式的矩阵才能相乘</p>
<p>$\begin{bmatrix} A_{11} &amp;&amp; A_{12} &amp;&amp; A_{13} \\ A_{21} &amp;&amp; A_{22} &amp;&amp; A_{23}\end{bmatrix} \times \begin{bmatrix} B_{11} &amp;&amp; B_{12} \\ B_{21} &amp;&amp; B_{22} \\  B_{31} &amp;&amp; B_{32} \end{bmatrix}$</p>
<p>比如$2\times 3$的矩阵和$3\times 2$的矩阵相乘，新矩阵的元素为$a_{ij}=\sum\limits_{k=1}^{n}A_{ik}*B_{kj}$</p>
<p>新矩阵为：</p>
<p>$\begin{bmatrix} (A_{11}\times B_{11}+A_{12}\times B_{21}+A_{13}\times B_{31}) &amp;&amp; (A_{11}\times B_{12}+A_{12}\times B_{22}+A_{13}\times B_{32}) \\ (A_{21}\times B_{11}+A_{22}\times B_{21}+A_{23}\times B_{31}) &amp;&amp; (A_{21}\times B_{12}+A_{22}\times B_{22}+A_{23}\times B_{32}) \end{bmatrix}$</p>
<h4 id="元矩阵"><a href="#元矩阵" class="headerlink" title="元矩阵"></a>元矩阵</h4><p>$\begin{bmatrix}1 &amp;&amp; 0\\0 &amp;&amp; 1\end{bmatrix}$或者 $\begin{bmatrix}1 &amp;&amp; 0 &amp;&amp; 0\\0 &amp;&amp; 1 &amp;&amp; 0 \\ 0 &amp;&amp; 0 &amp;&amp; 1\end{bmatrix}$ 或者更大</p>
<p>元矩阵通常写作$I$，对于任意矩阵$A$</p>
<p>$A \cdot I=I\cdot A=A$</p>
<h4 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h4><p>如果矩阵$A$是一个方矩阵$m\times m$,那么$A$存在逆矩阵$A^{-1}$</p>
<p>$AA^{-1}=A^{-1}A=I$</p>
<h4 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h4><p>转置就是将矩阵转过来$B_{ji}=A_{ij}$</p>
<p>$A=\begin{bmatrix}1 &amp;&amp; 2 &amp;&amp; 0 \\ 3 &amp;&amp; 5 &amp;&amp; 9 \end{bmatrix}$</p>
<p>$A^T=\begin{bmatrix}1 &amp;&amp; 3 \\ 2 &amp;&amp; 5 \\ 0 &amp;&amp; 9  \end{bmatrix}$</p>
<h4 id="矩阵与梯度下降结合"><a href="#矩阵与梯度下降结合" class="headerlink" title="矩阵与梯度下降结合"></a>矩阵与梯度下降结合</h4><p>两个矩阵，一个$A(m\times n)$ 一个$B(n \times o)$，我们将$B$中的每一列单独取出来最矩阵乘法，得到的结果再合并，跟原来的结果相同</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/matrix multiplication.2naeiuna0b20.png" alt="matrix multiplication"></p>
<p>类似的矩阵的每一列我们都可以看成是一个向量，把不同的$h$函数也看成向量，那么两个矩阵相乘就可以得到不同$h$函数的预测量</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/Andrew-ML/vector_example.6l6prwez9ro0.png" alt="vector_example"></p>]]></content>
      <categories>
        <category>机器学习</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记(一)</title>
    <url>//deefd94b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="机器学习三大步骤"><a href="#机器学习三大步骤" class="headerlink" title="机器学习三大步骤"></a>机器学习三大步骤</h3><h3 id="先写出一个带有未知参数的数学式"><a href="#先写出一个带有未知参数的数学式" class="headerlink" title="先写出一个带有未知参数的数学式"></a>先写出一个带有未知参数的数学式</h3><p>$Function \ with \ Unknown \ Parameters$</p>
<p>$y = b + w x_1$ </p>
<p>带有未知参数$b, w$的公式，叫做<code>model</code>(带有未知的参数的数学式)</p>
<p>$x_1:$ 公式中已知的东西叫做<code>feature</code></p>
<p>$w:$ 不知道的参数叫做<code>weight</code>（权重）</p>
<p>$b:$ 不知道的参数叫做<code>bias</code> （偏移）</p>
<h3 id="根据训练集定义-Loss"><a href="#根据训练集定义-Loss" class="headerlink" title="根据训练集定义$Loss$"></a>根据训练集定义$Loss$</h3><p>$Loss(b,w)$是一个函数，输入是$b,w$</p>
<p>Loss代表训练出来的函数对于训练集的拟合程度</p>
<p>$Loss: L = \frac{1}{N}\sum\limits_n{e_n} (e = |y - y’|)$ 每项$e$是$model$对于训练集的误差</p>
<h3 id="最佳化"><a href="#最佳化" class="headerlink" title="最佳化"></a>最佳化</h3><p>$w^{\star}, b^{\star} = arg \  \min\limits_{w,b}L$</p>
<h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="$Gradient\ Descent$"></a>$Gradient\ Descent$</h4><ul>
<li>随机选取一个初始点$w^0$</li>
<li>计算微分 $\frac{\partial L}{\partial w}|_{w= w^0}$</li>
<li>根据微分的正负选择向前或向后移动$\eta\frac{\partial L}{\partial w}|_{w= w^0}$, $\eta$学习速率，自己设置</li>
<li>迭代的更新$w$值</li>
</ul>
<h2 id="model-的限制"><a href="#model-的限制" class="headerlink" title="$model$ 的限制"></a>$model$ 的限制</h2><p>对于一次项的$model$是一条单纯的斜线，可能无法很好的拟合数据集，这叫做$Model$的$bias$，解决方法，写一个更复杂的，有更多未知参数的$model$</p>
<p>例如需要拟合一个复杂的函数（红色线段）， 可以在每次的转折点添加一个蓝色线段，斜率保持相同即可，按理说，越是复杂的红色线段所需要的蓝色线段越多</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnML/models.5chioa0bzcc0.png" alt="models"></p>
<p>对于连续的曲线可以选择足够多的点，就可以来使用蓝色线段拟合</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnML/piecewise linear.4388gdf4y3c0.png" alt="piecewise linear"></p>
<h3 id="如何来表达蓝色线段"><a href="#如何来表达蓝色线段" class="headerlink" title="如何来表达蓝色线段"></a>如何来表达蓝色线段</h3><p>通过一个函数来逼近蓝色线段 $y = c \frac{1}{1 + e ^{-(b+wx_1)}}$ 即 $y = c \ sigmoid (b + wx_1)$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnML/signoid Function1.71wq3fsce580.png" alt="signoid Function1"></p>
<p>调整$b, w, c$就可以得到各种各样的蓝色线段，改变$w$可以改变斜率，改变$b$会改变偏移，改变$c$会改变高</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnML/change bwc.jhv85766gds.png" alt="change bwc"></p>
<p>对于不同的蓝色线段使用不同的$b,w,c$来通过$sigmoid$逼近，那么红色线段的函数式就为$y = b + \sum\limits_{i}c_i\ sigmoid(b_i  + w_ix_1)$</p>
<h3 id="线性代数表达"><a href="#线性代数表达" class="headerlink" title="线性代数表达"></a>线性代数表达</h3><p>对于数据$x_1, x_2, x_3$</p>
<p>$\sum\limits_{i}c_i\ sigmoid(b_i + w_ix_1)$可以表示为</p>
<script type="math/tex; mode=display">r_1 = b_1 + w_1x_1\\ r_2 = b_2 + w_2x_2 \\ r_3 = b_3 + w_3 x_3</script><p>矩阵写法</p>
<script type="math/tex; mode=display">\begin {bmatrix} r_1\\r_2\\r_3 \end {bmatrix} = \begin {bmatrix} b_1\\b_2\\b_3 \end {bmatrix} + \begin {bmatrix} w_1 \ 0 \ 0\\0\ w_2\ 0\\0 \ 0\ w_3 \end {bmatrix}\begin {bmatrix} x_1\\x_2\\x_3 \end {bmatrix}</script><p>$r = b + Wx$</p>
<p>在对每一个$r$做$sigmoid$运算 $a = \partial(r)$</p>
<p>红色线段函数: $y = b + \sum\limits_{i}c_i \ a$</p>
<p>使用线性代数表达方式: $y = b + c^T a$</p>
<p>使用$\theta $ 来包含所有的未知参数$\theta = \begin{bmatrix} \theta_1\\ \theta_2 \\ \theta_3 \\ \dots \\ \end{bmatrix}$</p>
<h4 id="Loss-使用-theta-参数"><a href="#Loss-使用-theta-参数" class="headerlink" title="$Loss$ 使用$\theta $参数"></a>$Loss$ 使用$\theta $参数</h4><p><strong>$Loss$现在使用写成$L(\theta)$</strong></p>
<p>新的$Loss$表示为：$Loss: \ L = \frac{1}{N}\sum\limits_ne_n$</p>
<h4 id="迭代最好的-model"><a href="#迭代最好的-model" class="headerlink" title="迭代最好的$model$"></a>迭代最好的$model$</h4><p>$\theta^* = arg \ \min\limits_{\theta}L$</p>
<p>随机选择一个初始的$\theta^0$， 对$\theta$的每一项进行微分得到一个向量$g$ ,</p>
<p>$g = \begin{bmatrix} \frac{\partial L}{\partial \theta_1}|_{\theta = \theta^0} \\ \frac{\partial L}{\partial \theta_2}|_{\theta = \theta^0} \\ \frac{\partial L}{\partial \theta_3}|_{\theta = \theta^0} \\ \dots \end{bmatrix}=  \nabla L (\theta ^0)$</p>
<p>在$\theta = \theta^0$的位置把所有的参数都对$L$做微分</p>
<p>更新$\theta$的值</p>
<p>$\begin{bmatrix} \theta_1^1 \\ \theta_2^1\\ \dots \end{bmatrix} \longleftarrow \begin{bmatrix} \theta_1^0 \\ \theta_2^0\\ \dots \end{bmatrix} - \begin{bmatrix} \eta \frac{\partial L}{\partial \theta_1}|_{\theta = \theta^0} \\ \eta \frac{\partial L}{\partial \theta_2}|_{\theta = \theta^0} \\ \dots \end{bmatrix}$</p>
<p>新的$\theta$由原先的$\theta^0$ 减去 微分的向量 × $\eta$</p>
<p>$\theta^1 \longleftarrow  \theta^0 - \eta g$</p>
<p>步骤： 先随机选取$\theta^0$，通过计算$gradient$ 得到 $ g = \nabla L (\theta ^0)$,在如此迭代得到$\theta^1, \theta^2,…$直到无法在计算$gradient$时结束</p>
<p>实际操作时，将数据集分为多组，利用每一组来计算$gradient$更新$\theta$</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnML/compute gradient.lz1l4r37lu.png" alt="compute gradient"></p>
<h3 id="从-sigmoid-到-RELU"><a href="#从-sigmoid-到-RELU" class="headerlink" title="从 $sigmoid$到$RELU$"></a>从 $sigmoid$到$RELU$</h3><p>利用$RELU$来拟合函数 $c\ max(0, b+wx_1)$</p>
<p>$ y = b + \sum\limits_i c_i \ sigmoid(b_i + \sum\limits_jw_{ij}x_j)$</p>
<p>$y = b + \sum\limits_{2i}c_i max(0, b_i+\sum\limits_jw_{ij}x_j)$</p>
<p>$sigmoid$ 和 $RELU$ 统称为$activation\ function$, $RELU$更好一些</p>
<h2 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h2><p>当拟合的函数次数过多时，对于训练数据会出现拟合效果好，但是对于测试数据拟合率爆炸的情况。</p>]]></content>
      <categories>
        <category>ML 学习</category>
      </categories>
      <tags>
        <tag>ML 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(五)</title>
    <url>//2c61a387/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记（五）"><a href="#C-学习笔记（五）" class="headerlink" title="C++ 学习笔记（五）"></a>C++ 学习笔记（五）</h1><h2 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C++类型转换"></a>C++类型转换</h2><p>尽量少使用类型转换，除非用来解决特殊问题</p>
<h3 id="静态转换static-cast"><a href="#静态转换static-cast" class="headerlink" title="静态转换static_cast"></a>静态转换<code>static_cast</code></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">目标类型 目标对象 <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span><span class="token punctuation">(</span>原对象<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>用于类层次结构中的基类和派生类之间指针或引用的转换，没有父子关系的不能转换</p>
<ul>
<li>进行上行转换（派生类的指针或引用转换成基类）是安全的</li>
<li>进行下行转换（基类指针或引用转换成派生类）时，由于没有动态类型检查，所以时不安全的</li>
</ul>
</li>
<li><p>用于基本数据类型之间的转换，如将<code>int</code>转换成<code>char</code>，把<code>char</code>转换成<code>int</code>，这种转换的安全性也要开发人员来保证</p>
</li>
</ul>
<h3 id="动态转换dynamic-cast"><a href="#动态转换dynamic-cast" class="headerlink" title="动态转换dynamic_cast"></a>动态转换<code>dynamic_cast</code></h3><p><code>dynamic_cast</code>非常严格，失去精度或者不安全都不可以转换</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">目标类型 目标对象 <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span><span class="token punctuation">(</span>原对象<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>基础类型之间不能转换</p>
</li>
<li><p><code>dynamic_cast</code>如果发生了多态，那么可以让基类转为派生类，向下转换</p>
</li>
</ul>
<h3 id="常量转换const-cast"><a href="#常量转换const-cast" class="headerlink" title="常量转换const_cast"></a>常量转换<code>const_cast</code></h3><p>用来修改<code>const</code>属性</p>
<ul>
<li>常量指针被转化成非常量指针，并且仍然指向原来的对象</li>
<li>常量引用被转换成非常量引用，并且仍然指向原来的对象</li>
</ul>
<p><strong>注意</strong>:不能直接对非指针和非引用的变量使用<code>const_cast</code>操作符去直接移除它的<code>const</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>newp <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>newp1 <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="重新解释转换reinterpert-cast"><a href="#重新解释转换reinterpert-cast" class="headerlink" title="重新解释转换reinterpert_cast"></a>重新解释转换<code>reinterpert_cast</code></h3><p>最不安全，不推荐使用</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment">// 试图执行的内容</span>
    <span class="token comment">// 在可能出现异常的地方抛出异常throw</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token comment">// try下面catch捕获异常   </span>
    <span class="token comment">// catch(捕获类型) ... 代表所有其他类型</span>
    <span class="token comment">// 如果不想处理异常，继续向上抛出throw</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="跳级"><a href="#跳级" class="headerlink" title="跳级"></a>跳级</h3><p><img src="https://cdn.jsdelivr.net/gh/Mug-9/imge-stroage@master/LearnCFive/image-20210510100605400.1wh5scq2w1c0.png" alt="image-20210510100605400"></p>
<h3 id="异常基本处理"><a href="#异常基本处理" class="headerlink" title="异常基本处理"></a>异常基本处理</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">myd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// return -1; 早期处理方式，返回-1</span>
        <span class="token keyword">throw</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 抛出int类型异常，异常必须处理，如果不处理就挂掉</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span>  <span class="token function">myd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 早期如果返回-1， 无法区分到底是结果还是异常</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">myd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 捕获int类型异常</span>
        <span class="token comment">// 如果不想在这处理，就抛出，返回上一层处理,类型不变</span>
        <span class="token keyword">throw</span><span class="token punctuation">;</span>
    	<span class="token comment">//. 异常处理</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//其他类型异常捕获</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果异常都没有处理，那么成员terminate函数是程序中断</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token operator">:</span>
      <span class="token keyword">void</span> <span class="token function">printError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// try{ 抛出异常</span>
<span class="token comment">//	throw MyException();</span>
<span class="token comment">// }</span>
<span class="token comment">// 捕获异常</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="栈解旋"><a href="#栈解旋" class="headerlink" title="栈解旋"></a>栈解旋</h3><ul>
<li>从try开始到throw抛出异常之前，所有栈上的对象，都会被释放，这个过程称为栈解旋</li>
<li>栈上对象构造和析构顺序相反</li>
</ul>
<h3 id="异常的接口声明"><a href="#异常的接口声明" class="headerlink" title="异常的接口声明"></a>异常的接口声明</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//thrwo(int) 只能抛出int类型异常</span>
    <span class="token keyword">throw</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token comment">// 抛出double类型直接挂掉</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//thrwo() 不跑出任何类型异常</span>
    <span class="token keyword">throw</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="异常变量声明周期"><a href="#异常变量声明周期" class="headerlink" title="异常变量声明周期"></a>异常变量声明周期</h3><p>异常变量的构造是在<code>throw</code>抛出异常时构造，析构实在<code>catch</code>处理完以后析构</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token operator">:</span>
      <span class="token keyword">void</span> <span class="token function">printError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// catch时通过拷贝构造又会有一份数据，所以建议使用&amp; </span>
        <span class="token comment">// catch(MyException &amp;e)</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 返回指针，使用new，在堆区开辟内存，然后手动delete</span>
<span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>MyException <span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// catch时通过拷贝构造又会有一份数据，所以建议使用&amp; </span>
        <span class="token comment">// catch(MyException &amp;e)</span>
        <span class="token keyword">delete</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="异常的多态"><a href="#异常的多态" class="headerlink" title="异常的多态"></a>异常的多态</h3><p>利用多态来实现<code>printError</code>同一个接口的使用</p>
<h3 id="系统的异常库"><a href="#系统的异常库" class="headerlink" title="系统的异常库"></a>系统的异常库</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ofstream <span class="token function">ofs</span><span class="token punctuation">(</span>path， ios<span class="token operator">::</span>out<span class="token operator">|</span>ios<span class="token operator">::</span>trunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ofs<span class="token punctuation">.</span>is_open<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//... 打开失败    }    ofs &lt;&lt; "content" &lt;&lt; endl;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span>is_open<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//... 打开失败    }    // 第一种方式    char buf[1024];    while(ifs &gt;&gt; buf) { // 按行读取        cout &lt;&lt; buf &lt;&lt; endl;    }    // 第二种方式    while(!ifs.enf()) { // enf读到文件尾        ifs.getline(buf, sizeof(buf));        cout &lt;&lt; buf  &lt;&lt; endl;    }    // 第三种方式 不推荐 按单个字符读取    char c;    while((c = ifs.get()) != EOF) {        cout &lt;&lt; c &lt;&lt; endl;    }    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>C++ 学习</category>
      </categories>
      <tags>
        <tag>C++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(四)</title>
    <url>//2acaf4fa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记（四）"><a href="#C-学习笔记（四）" class="headerlink" title="C++学习笔记（四）"></a>C++学习笔记（四）</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> 子类 <span class="token operator">:</span> 继承方式 父类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="继承权限"><a href="#继承权限" class="headerlink" title="继承权限"></a>继承权限</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">继承方式</th>
<th style="text-align:center">特点</th>
<th style="text-align:center">父类私有属性能不能访问</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>public</code></td>
<td style="text-align:center">父类的属性权限不变</td>
<td style="text-align:center">不能</td>
</tr>
<tr>
<td style="text-align:center"><code>protect</code></td>
<td style="text-align:center">父类的属性全变为<code>protect</code></td>
<td style="text-align:center">不能</td>
</tr>
<tr>
<td style="text-align:center"><code>private</code></td>
<td style="text-align:center">父类的属性全变为<code>private</code></td>
<td style="text-align:center">不能</td>
</tr>
</tbody>
</table>
</div>
<p>子类中会继承父类的私有成员，但是被编译器隐藏了起来</p>
<h3 id="继承中的构造与析构"><a href="#继承中的构造与析构" class="headerlink" title="继承中的构造与析构"></a>继承中的构造与析构</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">构造： 先执行父类的构造函数，在调用子类的构造函数

析构：先执行子类的析构，在执行父类的析构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>子类并不能继承父类的构造和析构函数，只有父类自己知道自己构造和析构的属性</p>
<p>如果父类没有默认构造，那么子类在构造时可以通过初始化列表的方式显示调用父类的有参构造</p>
<pre class="line-numbers language-###" data-language="###"><code class="language-###">class Base{
	Base(int a) ;
}
class Son : public Base{
	Son(int a): Base(a) {
} 
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="继承中的同名处理"><a href="#继承中的同名处理" class="headerlink" title="继承中的同名处理"></a>继承中的同名处理</h3><p>子类与父类属性或函数同名时，根据就近原则，属性为子类的值，如果想使用父类的值，那么就在调用时加上作用域</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> m_a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">punlic</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token punctuation">;</span>
    <span class="token function">Son</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> m_a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Son s<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 子类的m_a</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token operator">::</span>m_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 父类的m_a</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果子类与父类的成员函数名称相同，子类会把父类的所有同名版本全隐藏，像调用父类的方法，必须加作用域</p>
<h3 id="继承中的静态成员处理"><a href="#继承中的静态成员处理" class="headerlink" title="继承中的静态成员处理"></a>继承中的静态成员处理</h3><p>静态成员属性，子类可以继承下来，使用时直接在静态成员属性前加作用域即可</p>
<p>静态成员函数，子类也可以继承下来，使用时</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Son</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 子类的func</span>
Son<span class="token operator">::</span><span class="token class-name">Base</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 父类的func</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="非自动继承的函数"><a href="#非自动继承的函数" class="headerlink" title="非自动继承的函数"></a>非自动继承的函数</h3><p>不是所有的函数都能继承到子类，构造和析构函数不能继承，<code>operator=</code>也不能继承，因为它完成类似构造函数的行为</p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>一个类可以继承多个类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token operator">:</span> <span class="token keyword">public</span> B<span class="token punctuation">,</span> <span class="token keyword">public</span> C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="二义性"><a href="#二义性" class="headerlink" title="二义性"></a>二义性</h4><p>多继承中如果多继承的多个类有相同的成员属性，那么子类在调用父类相同的属性时会引发二义性</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span>
<span class="token class-name">A</span> <span class="token class-name">a</span></span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>m_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 如果B和C中都有m_a会引发二义性</span>
cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>B<span class="token operator">::</span>m_a <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>C<span class="token operator">::</span>m_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 使用时在前面加上作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><p>子类继承的父类继承自同一个基类，会导致二义性的产生</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="菱形继承解决方案"><a href="#菱形继承解决方案" class="headerlink" title="菱形继承解决方案"></a>菱形继承解决方案</h3><h4 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">;</span> <span class="token comment">//虚基类B</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">;</span> <span class="token comment">// 虚基类C</span>
<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>虚继承后，子类中会有一个虚指针，指向一张虚基类表，通过表找到偏移量可以找到共有数据</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态分为编译时多态（静态多态）和运行时多态（动态多态），运算符重载和函数重载是编译时多态，派生类和虚函数是运行时多态</p>
<ul>
<li>静态联编： 地址早绑定，编译阶段绑定好地址</li>
<li>动态联编： 地址晚绑定，运行时绑定号地址</li>
<li>多态： 父类的引用或指针 指向子类对象</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"animal speak"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cat speak"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 调用dospeak，没有使用virtual时 speak函数的地址早就绑定好了，静态联编， 编译阶段确定好了地址</span>
<span class="token comment">// 如果想使用cat的speak，那么就不能提前绑定函数的地址，所以需要运行时确定函数地址</span>
<span class="token comment">// 动态联编，写法 dospeak 改为虚函数，在父类上声明虚函数，发生了多态</span>
<span class="token comment">// 父类的引用或指针 指向子类对象</span>
<span class="token keyword">void</span> <span class="token function">doSpeak</span><span class="token punctuation">(</span>Animal<span class="token operator">&amp;</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 使用虚函数时 Animal &amp; animal = cat	</span>
	animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Cat cat<span class="token punctuation">;</span>
	<span class="token comment">//如果发生了继承，编译器允许进行类型转换</span>
	<span class="token function">doSpeak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gqb74bih29j30tx0hu43x.jpg" alt="image-20210508173802580"></p>
<p>当<code>Animal</code>有了虚函数后，内部结构发生了改变， 内部多了一个虚指针，指向<code>Animal</code>的虚函数表 ,<code>Cat</code>内部也有一个虚指针，继承自<code>Animal</code>的虚指针，指向自己内部的虚函数表，父类和子类的虚函数表相同但是地址不同。如果<code>Cat</code>没有重写<code>Animal</code>的<code>speak</code>函数，那么虚函数表中的函数就是<code>Animal</code>的<code>speak</code>，如果重写了，那么就是<code>Cat</code>自身的<code>speak</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Animal <span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> Cat<span class="token punctuation">;</span>
animal<span class="token operator">-&gt;</span><span class="token function">spead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；
<span class="token comment">// 调用的是cat的speak，因为父类指针指向子类对象，指向时，子类已经发生多态，调用的也是多态后的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 告诉编译器在vtable中保留一个位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果父类有纯虚函数，那么子类必须实现纯虚函数</p>
<p>如果父类有了纯虚函数，那么父类就无法实例化对象，变成抽象类</p>
<h3 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h3><p>普通析构函数是不会调用子类的析构的，所以可能导致释放不干净，虚析构可以解决这个问题</p>
<p>纯虚析构需要声明并且实现，在类内声明，在类外实现，只声明不实现会报错，如果类出现了纯析构函数，那么这个类也算抽象类</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li><p>基类转派生类，向下转换，不安全</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Animal <span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> Animal<span class="token punctuation">;</span>
Cat <span class="token operator">*</span>cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token operator">*</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>派生类转基类，向上转换，安全</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Cat <span class="token operator">*</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> Cat<span class="token punctuation">;</span>
Animal <span class="token operator">*</span>animal <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token operator">*</span><span class="token punctuation">)</span>cat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>如果发生了多态，总是安全的</p>
</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于逻辑相似类型不同的函数，可以使用泛型编程—模板技术</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token comment">// 告诉编译器下面如果出现T，不要报错， T是一个通用类型</span>
    <span class="token comment">//template &lt;typename T&gt; class与typename 作用相同</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>模板特点：</p>
<ul>
<li>自动类型推导，自动推导传参的数据类型到模板</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 自动类型推导，按照a，b的类型来替换T</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>显示指定类型</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">swap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>模板必须指定出<code>T</code>才可以使用</li>
<li>函数模板必须紧跟着<code>template&lt;class T&gt;</code></li>
</ul>
<h3 id="函数模板与普通函数的区别以及调用规则"><a href="#函数模板与普通函数的区别以及调用规则" class="headerlink" title="函数模板与普通函数的区别以及调用规则"></a>函数模板与普通函数的区别以及调用规则</h3><ul>
<li>普通函数可以进行隐式类型转换，函数模板不可以进行隐式类型转换</li>
<li>如果函数模板与普通函数出现了重载，那么优先使用普通函数，如果没有实现，出现错误。如果想强制调用模板，可以使用空参数列表</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">swap<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>函数模板可以发生重载</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token function">swap</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">,</span> T c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>如果函数模板可以产生更好的匹配，那么调用函数模板</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用函数模板</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="模板机制"><a href="#模板机制" class="headerlink" title="模板机制"></a>模板机制</h3><ul>
<li>编译器并不是把函数模板处理成能够处理任何类型的函数</li>
<li>函数模板通过具体类型产生不同的函数</li>
<li>编译器会对函数模板进行两次编译，在声明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译</li>
</ul>
<h3 id="模板局限性"><a href="#模板局限性" class="headerlink" title="模板局限性"></a>模板局限性</h3><p>对于自定义的数据类型，使用具体化自定义数据类型解决</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token function">Compare</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> Compare<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>m_age <span class="token operator">==</span> b<span class="token punctuation">.</span>m_age<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果具体化能够优先匹配，那么就选择具体化</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> 返回值 函数名<span class="token operator">&lt;</span>具体类型<span class="token operator">&gt;</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span><span class="token operator">=</span><span class="token keyword">int</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    	<span class="token function">Person</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span> AgeType age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    	NameType m_name<span class="token punctuation">;</span>
    	AgeType m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>类模板不支持自动类型推导</p>
</li>
<li><p>类模板参数可以设默认值</p>
</li>
<li><p>需要指点显示类型</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>成员函数一开始不会创建出来，而是运行时才去创建</p>
</li>
</ul>
<h3 id="类模板做函数的参数"><a href="#类模板做函数的参数" class="headerlink" title="类模板做函数的参数"></a>类模板做函数的参数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//指定传入类型</span>
<span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token comment">// 参数模板化</span>
<span class="token keyword">void</span> <span class="token function">dowork2</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dowork2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 整体类型化</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">dowork3</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dowork3</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类模板和继承"><a href="#类模板和继承" class="headerlink" title="类模板和继承"></a>类模板和继承</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span> 
    	T m_a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// child 继承与base必须告诉base中的T的类型，否则T无法分配内存</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
<span class="token comment">// childr2 也是模板类</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Child2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token class-name">T2</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    T1 m_b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>基类如果是模板类，必须让子类告诉编译器基类中的T是什么类型，如果不告诉，那么就无法分配内存</li>
<li>利用参数列表<code>class Child : public Base&lt;int&gt;</code></li>
</ul>
<h3 id="类模板类外实现成员函数"><a href="#类模板类外实现成员函数" class="headerlink" title="类模板类外实现成员函数"></a>类模板类外实现成员函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    	<span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	T1 m_name<span class="token punctuation">;</span>
    	T2 m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span>T2<span class="token operator">&gt;</span><span class="token operator">::</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类模板分文件编写问题以及解决"><a href="#类模板分文件编写问题以及解决" class="headerlink" title="类模板分文件编写问题以及解决"></a>类模板分文件编写问题以及解决</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">--</span><span class="token operator">-</span> Person<span class="token punctuation">.</span>h
<span class="token operator">--</span><span class="token operator">-</span> Person<span class="token punctuation">.</span>cpp
<span class="token operator">--</span><span class="token operator">-</span> main<span class="token punctuation">.</span>cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>Person.h</code>写<code>Person</code>模板类的声明，<code>Person.cpp</code>写<code>Person</code>模板类的实现，在<code>main.cpp</code>中导入<code>Person.h</code>时，由于类模板的成员函数运行阶段才会去创建，所以编译器在编译时不会对<code>Person.cpp</code>中的方法进行创建，导致在链接时无法链接到方法。无法解析外部命令</p>
<p>解决方法：将类的声明和实现写到同一文件，后缀为<code>.hpp</code></p>
<h3 id="类模板和友元函数"><a href="#类模板和友元函数" class="headerlink" title="类模板和友元函数"></a>类模板和友元函数</h3><ul>
<li>友元函数类内实现跟普通类实现相同</li>
<li>声明时需要加上<code>&lt;&gt;</code>代表声明的是模板函数</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment">// 让编译器看到Person声明</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">printPerson</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让编译器提前看到printPerson声明</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> printPerson<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加上&lt;&gt;代表模板函数</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    	<span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	T1 m_name<span class="token punctuation">;</span>
    	T2 m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span> <span class="token comment">// 友元函数类外实现</span>
<span class="token keyword">void</span> printPerson<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>C++ 学习</category>
      </categories>
      <tags>
        <tag>C++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(二)</title>
    <url>//5287e3ee/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记（二）"><a href="#C-学习笔记（二）" class="headerlink" title="C++学习笔记（二）"></a>C++学习笔记（二）</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是对对象的抽象</p>
<p>对象是对类的实例</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span> 公共权限
    设置 成员属性
    设置 成员函数
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设计一个圆类，求圆的周长"><a href="#设计一个圆类，求圆的周长" class="headerlink" title="设计一个圆类，求圆的周长"></a>设计一个圆类，求圆的周长</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
设计一个类，求圆的周长
*/</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.1415926535</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span> <span class="token comment">//class 代表声明一个类，后面紧跟的是类的名称</span>
  <span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment">//公共权限</span>
  <span class="token comment">// 半径 成员属性</span>
    <span class="token keyword">int</span>  m_R<span class="token punctuation">;</span>
    <span class="token comment">// 求圆周长的函数</span>
    <span class="token keyword">double</span> <span class="token function">calZC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 类里面的函数，叫作成员函数</span>
      <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> pi <span class="token operator">*</span> m_R<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置半径的成员方法 成员函数通常可以修改成员属性</span>
    <span class="token keyword">void</span> <span class="token function">setR</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      m_R <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设计学生类"><a href="#设计学生类" class="headerlink" title="设计学生类"></a>设计学生类</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  string m_Name<span class="token punctuation">;</span> <span class="token comment">// 姓名</span>
  <span class="token keyword">int</span> m_Id<span class="token punctuation">;</span>  <span class="token comment">// 学号</span>

  <span class="token keyword">void</span>  <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m_Id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名:"</span> <span class="token operator">&lt;&lt;</span> m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 学号:"</span> <span class="token operator">&lt;&lt;</span> m_Id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>​        宏函数只是简单的在编译期进行替换，所以宏函数无法对传参进行检查，也会出现歧义。内联函数是一个真正的函数，会检查函数参数列表，并返回值。内联函数在编译期也会进行替换，所以内联函数会占用空间，但是内联函数相对于普通函数的优势是省去了函数调用时的压栈，跳转和返回的开销。我们可以理解为内联函数以空间换时间。类中的成员函数默认是内联函数。</p>
<p>​        内联仅仅是给编译器的一个建议，编译器不一定会接受这种建议，如果你没有江汉数声明为内联函数，那么编译器也可能将此函数做内联编译，一个好的编译器将会内联小的、简单的函数。</p>
<h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 形参b设置默认值，那么后面的形参c也需要设置默认值，如果一个位置有个默认参数，那么后面的参数也必须有默认值</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 如果函数声明和函数定义分开，函数声明设置了默认参数，函数定义不能在设置默认参数</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明时</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//定义时</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数"></a>占位参数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>​        占位参数，函数调用时必需提供这个参数，但是用不到参数，可以有默认值</p>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>实现重载的条件</p>
<ul>
<li>同一个作用域</li>
<li>参数个数不同</li>
<li>参数类型不同</li>
<li>参数顺序不同</li>
</ul>
<p>当函数重载碰到默认参数时，要注意避免二义性问题</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
这里出现了二义性问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>引用的重载</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//引用必需要合法的空间</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//const 也可以作为重载的条件</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数重载的原理"><a href="#函数重载的原理" class="headerlink" title="函数重载的原理"></a>函数重载的原理</h3><p>​        编译器为了实现重载，会用不同的参数来修饰不同的函数名，比如<code>void func();</code> 编译器可能会将函数名修饰成<code>_func</code>，当编译器碰到<code>void func(int x);</code>编译器可能会将函数名修饰为<code>_func_int</code>，当编译器遇到<code>void func(int x, char c);</code>编译器可能会将函数名修改为<code>_func_int_char</code>。这个可能字眼是因为不同的编译器有不同的规则</p>
<h3 id="extern-C"><a href="#extern-C" class="headerlink" title="extern C"></a><code>extern C</code></h3><p>在<code>C++</code>中函数可以重载，在编译器会将函数名称偷偷改变，但是如果想调用<code>C</code>语言的方法时，也会将函数名改变，但是<code>C</code>中是没有重载的，所以编译会出错。这时使用<code>extern</code>可以将函数以<code>C</code>语言方式做链接。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以在<code>C</code>的头文件中加上</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>​        封装就是将现实中的具体的事物抽象化，把其具有的属性和操作合成一个整体，封装到一个类中。</p>
<p>​        <code>C</code>语言使用<code>struct</code>来进行封装，但是在<code>C</code>语言中的<code>struct</code>不能写成员函数，属性和行为是分离的，类型检测不够，写起来比较麻烦。</p>
<p>​        <code>C++</code> 中的封装，严格类型转换检测，让属性和行为绑定到一起。属性和行为作为一个整体来表示生活中的事物。<code>C++</code>中控制权限 <code>public</code>公共权限、<code>private</code>私有权限、<code>protect</code>保护权限。</p>
<p>​        在<code>C++</code>中<code>struct</code>和<code>class</code>是一个意思，唯一的不同是默认权限，<code>struct</code>是<code>public</code>，但是<code>class</code>的默认权限是<code>private</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果不声明权限，默认权限是private</span>
    <span class="token comment">//所谓私有权限就是私有成员（属性、函数），在类内部可以访问，类外部不可以访问</span>
    <span class="token keyword">public</span>：
        <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token comment">// 公共权限，在类内部和类外部都可以访问</span>
    <span class="token keyword">protected</span><span class="token operator">:</span>
    	<span class="token keyword">int</span> wight<span class="token punctuation">;</span>
    <span class="token comment">// 保护权限，类内部可以访问，（当前类的子类可以访问），类外部不可以访问</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">关键词</th>
<th style="text-align:center">类内访问</th>
<th style="text-align:center">类外访问</th>
<th style="text-align:center">子类访问</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>public</code></td>
<td style="text-align:center">可以</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">可以</td>
</tr>
<tr>
<td style="text-align:center"><code>protect</code></td>
<td style="text-align:center">可以</td>
<td style="text-align:center">不可以</td>
<td style="text-align:center">可以</td>
</tr>
<tr>
<td style="text-align:center"><code>private</code></td>
<td style="text-align:center">可以</td>
<td style="text-align:center">不可以</td>
<td style="text-align:center">不可以</td>
</tr>
</tbody>
</table>
</div>
<h3 id="封装一个立方体类"><a href="#封装一个立方体类" class="headerlink" title="封装一个立方体类"></a>封装一个立方体类</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Cube</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">setL</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>m_L <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">getL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_L<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">setW</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>m_W <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> m_W<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//成员函数加const，代表这个成员函数没有修改成员属性</span>
  <span class="token keyword">void</span> <span class="token function">setH</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>m_H <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_H<span class="token punctuation">;</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">getCubeS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体面积为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> m_L<span class="token operator">*</span>m_W <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m_W <span class="token operator">*</span> m_H <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m_L <span class="token operator">*</span> m_H <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">getCubeV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体体积:"</span> <span class="token operator">&lt;&lt;</span> m_L <span class="token operator">*</span> m_W <span class="token operator">*</span> m_H <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//成员函数判断是否相等</span>
  <span class="token keyword">bool</span> <span class="token function">compareCubeByClass</span><span class="token punctuation">(</span>Cube <span class="token operator">&amp;</span> cube<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> m_L<span class="token punctuation">;</span>
  <span class="token keyword">int</span> m_W<span class="token punctuation">;</span>
  <span class="token keyword">int</span> m_H<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 传入参数如果加了const，那么只能调用const方法</span>
<span class="token keyword">bool</span> <span class="token function">compareCube</span><span class="token punctuation">(</span>Cube <span class="token operator">&amp;</span> cub1<span class="token punctuation">,</span> Cube <span class="token operator">&amp;</span> cub2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象的构造和析构"><a href="#对象的构造和析构" class="headerlink" title="对象的构造和析构"></a>对象的构造和析构</h2><p>构造函数没有返回值，没有void，类名相同，可以发生重载，可以有参数</p>
<p>析构函数写法，与类名相同，类名前面加上一个符号 ~ ,也没有返回值，不写void，不可以有参数（不能发生重载）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">// 构造函数写法，与类名相同，没有返回值，可以发生重载（可以有参数）</span>
<span class="token comment">// 构造函数由编译器自动调用，而不是手动，而且只会调用一次</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"构造函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token comment">// 析构函数写法，与类名相同，类名前面加上一个符号 ~ ,也没有返回值，不写void，不可以有参数（不能发生重载）</span>
<span class="token comment">// 自动调用，只会调用一次</span>
  <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Person p1<span class="token punctuation">;</span>
  <span class="token comment">//默认调用构造和析构，是系统提供的两个空函数</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><p><strong>按照参数进行分类</strong> 分为无参构造函数，有参构造函数</p>
<p><strong>按照类型进行分类</strong> 分为普通构造函数，拷贝构造函数</p>
<p><strong>无参构造写法和调用</strong> </p>
<ul>
<li><code>Person p1;</code> 注意不能写成<code>Person p1()</code>, 因为编译器认为这个是函数声明</li>
</ul>
<p><strong>有参构造写法和调用</strong> </p>
<ul>
<li><code>Person p2(10)或者 Person p2 = Person(10)</code></li>
<li><code>Person(10)</code>匿名对象，执行当前行后就会释放这个对象</li>
</ul>
<p><strong>拷贝构造函数</strong></p>
<ul>
<li><code>Person(const Person &amp;p)</code></li>
<li><code>Person p1(p2)</code> 或者 <code>Person p1 = Person(p2)</code></li>
<li><p>不能用拷贝构造函数初始化匿名对象</p>
<ul>
<li>如果写成 <code>Person (p1)</code> 这种写法等价于 <code>Person p1</code></li>
<li>写到右值可以做拷贝构造函数</li>
</ul>
</li>
<li><p><code>Person p = 100</code> ,隐式类型转换，相当于调用 <code>Person=Person(100)</code></p>
</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span> <span class="token comment">// 构造和析构必须写在public下</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 默认 无参构造函数</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"构造"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//有参构造函数 </span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 拷贝函数</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Person p3<span class="token punctuation">;</span> <span class="token comment">//默认构造函数不加(),加（），编译器认为这是函数的声明</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 叫匿名对象，匿名对象特定，如果编译器发现了对象是匿名对象，那么这行执行完，就执行析构函数</span>
  Person p1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这时声明了一个匿名对象并将其命名为p1</span>
  <span class="token function">Person</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能用拷贝构造来初始化匿名对象</span>
  Person p4 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果写成左值，编译器认为你写Person p4,对象的声明，如果写成右值，那么可以</span>
  Person p6 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//相当于调用了Person p7 = Person(100)， 隐式类型转换</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="拷贝构造调用的时机"><a href="#拷贝构造调用的时机" class="headerlink" title="拷贝构造调用的时机"></a>拷贝构造调用的时机</h3><ul>
<li><p>用已经创建好的对象来初始化新的对象</p>
</li>
<li><p>以值传递的方式给函数参数传值</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// Person p1 = Person(p)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>以值的方式返回局部对象</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dowork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person p1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person p <span class="token operator">=</span> <span class="token function">dowork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h3><p>系统默认给一个类提供3个函数，默认构造、拷贝构造、析构函数</p>
<ul>
<li>当提供了有参构造函数，那么系统就不会给我们提供默认构造函数，但是系统还会提供默认拷贝构造函数</li>
<li>当我们提供了 拷贝构造，那么系统就不会提供其他构造了</li>
</ul>
<h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>类在进行指针类型的拷贝时，浅拷贝只是简单的复制堆区地址，会导致重复释放内存的异常，而深拷贝是重新开辟一片内存空间。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m_age <span class="token operator">=</span> p<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
    m_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>m_name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>n_name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>m_name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//析构函数</span>
<span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m_name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>m_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>构造函数后面 +: 属性(参数),属性(参数)  …</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//利用初始化列表初始化数据</span>
<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span>  b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_c</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="类对象作为成员"><a href="#类对象作为成员" class="headerlink" title="类对象作为成员"></a>类对象作为成员</h3><p>构造时，类中的类成员先执行构造函数，类自身在执行构造。析构相反</p>
<h3 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a><code>explicit</code></h3><p>防止隐式类型转换</p>
<h2 id="new-和delete"><a href="#new-和delete" class="headerlink" title="new 和delete"></a><code>new</code> 和<code>delete</code></h2><ul>
<li><code>new</code>在堆区开辟空间</li>
<li>所有<code>new</code>出来的对象，都会返回该类型的指针，<code>malloc</code>返回<code>void *</code>使用时需要强转</li>
<li><code>malloc</code>不会调用构造函数，<code>new</code>会调用</li>
<li><code>new</code>是运算符，<code>malloc</code>是系统的一个函数</li>
<li><code>delete</code>也是运算符，配合<code>new</code>使用，<code>malloc</code>与<code>free</code>配合使用</li>
<li>使用<code>void *</code>来接收<code>new</code>出来的指针，会出现释放问题</li>
<li><code>new</code>会调用默认构造函数</li>
<li><code>new</code>申请内存是无需指定内存块大小，<code>malloc</code>需要</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pa<span class="token punctuation">;</span>
<span class="token comment">// new 数组时需要有默认构造函数</span>
<span class="token comment">// delete 数组时需要加[]</span>
<span class="token comment">// new 的时候加[], 那么delete时加上，new的时候不加，那么delete时也不加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>C++ 学习</category>
      </categories>
      <tags>
        <tag>C++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(一)</title>
    <url>//b34cf332/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记（一）"><a href="#C-学习笔记（一）" class="headerlink" title="C++ 学习笔记（一）"></a>C++ 学习笔记（一）</h1><h2 id="双冒号运算符"><a href="#双冒号运算符" class="headerlink" title="双冒号运算符"></a>双冒号运算符</h2><p>作用域运算符  <code>::</code>全局作用域</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 100</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//输出200</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"nihao"</span><span class="token punctuation">;</span> <span class="token comment">//::前面加std则是说明cout是std作用域下的</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="namespace的使用"><a href="#namespace的使用" class="headerlink" title="namespace的使用"></a><code>namespace</code>的使用</h2><p><code>namespace</code>命名空间主要用于解决命名冲突</p>
<ul>
<li><p>命名空间下可以放函数、变量、结构体、类</p>
</li>
<li><p>命名空间必须定义在全局作用域下</p>
</li>
<li>命名空间可以检讨命名空间</li>
<li>命名空间是开放的，可以随时往原先的命名空间添加内容</li>
<li>一个命名空间分开写会自动合并</li>
<li>命名空间可以匿名，匿名命名空间内的变量相当于<code>static</code></li>
<li>命名空间可以起别名</li>
</ul>
<h2 id="using-声明和using-编译"><a href="#using-声明和using-编译" class="headerlink" title="using 声明和using 编译"></a><code>using</code> 声明和<code>using</code> 编译</h2><h3 id="using-声明"><a href="#using-声明" class="headerlink" title="using 声明"></a><code>using</code> 声明</h3><p>使用<code>using</code>声明时要避免二义性问题，</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> KG<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sunwukongId <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sumwukongId <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> KG<span class="token operator">::</span>sunwukongId<span class="token punctuation">;</span>
    <span class="token comment">// 写了using 声明后，说明以后的所有sunwukongId都是KG下的，</span>
    <span class="token comment">// 但是编译器又有就近原则，这就造成了二义性</span>
    cout <span class="token operator">&lt;&lt;</span> sunwukongId <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="using-编译"><a href="#using-编译" class="headerlink" title="using 编译"></a><code>using</code> 编译</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sunwukongId <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> KG<span class="token punctuation">;</span> <span class="token comment">//打开命名空间KG，可以执行</span>
    cout <span class="token operator">&lt;&lt;</span> sunwukongId <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="C-对C的增强"><a href="#C-对C的增强" class="headerlink" title="C++对C的增强"></a>C++对C的增强</h2><h3 id="全局变量检测增强"><a href="#全局变量检测增强" class="headerlink" title="全局变量检测增强"></a>全局变量检测增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//全局变量中</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//在C语言中可以通过编译</span>
<span class="token comment">//在C++中不能通过编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数检测增强"><a href="#函数检测增强" class="headerlink" title="函数检测增强"></a>函数检测增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 函数 参数类型增强</span>
<span class="token keyword">int</span> <span class="token function">getRecS</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 无返回值可以通过C编译不能通过C++编译</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在C中可以通过编译</span>
<span class="token comment">// 在C++中不可以通过编译</span>

<span class="token comment">//参数检测增强</span>
<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getRecS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>；
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类型转换检测增强"><a href="#类型转换检测增强" class="headerlink" title="类型转换检测增强"></a>类型转换检测增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//malloc返回值是void*</span>
<span class="token punctuation">}</span>
<span class="token comment">// C可以通过编译，因为C认为void*是一个万能指针，可以转换成char*，</span>
<span class="token comment">// 而C++不行，C++ 版本须为</span>
<span class="token comment">// char *p = (char*)malloc(sizeof(64));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="struct增强"><a href="#struct增强" class="headerlink" title="struct增强"></a><code>struct</code>增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> m_Age<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">plusAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// C中struct不能加函数，C++可以</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Person</span> p1<span class="token punctuation">;</span> 
    <span class="token comment">// C语言必须加上struct</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bool类型增强"><a href="#bool类型增强" class="headerlink" title="bool类型增强"></a><code>bool</code>类型增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C中没有bool类型，在C++中bool类型 非0的值都是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="三目运算符增强"><a href="#三目运算符增强" class="headerlink" title="三目运算符增强"></a>三目运算符增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token comment">// 三目运算符，C语言中返回值，C++返回的是变量</span>
    <span class="token comment">// C语言模仿C++写法</span>
    <span class="token comment">// *(a &gt; b ? &amp;a : &amp;b) = 100</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="const增强"><a href="#const增强" class="headerlink" title="const增强"></a><code>const</code>增强</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//全局const，在C和C++中都不能修改</span>
<span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> <span class="token keyword">int</span> m_B <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//C中伪常量，C++中真常量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>m_B<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在C中const的作用仅仅是不允许修改，但是可以通过指针来修改</span>
    <span class="token comment">// 在C++中通过指针修改的仅仅是*p, 而m_B并没有变</span>
    <span class="token comment">// int arr[m_B] 在C中不能来定义数组，在C++中可以</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p><code>C</code>语言中，<code>const</code>修饰的变量，是伪常量，编译器是会分配内存的，只要分配内存就可以更改</p>
</li>
<li><p><code>C++</code>中，<code>const</code>不会分配内存，在<code>C++</code>中<code>int *p = (int*)&amp;m_B</code>的<code>*p</code>指向的是编译器临时开辟的一块内存空间</p>
</li>
<li><p><code>const</code>在<code>C</code>中默认是外部外部链接，在其他文件中使用<code>extern</code>可以找到变量，而在<code>C++</code>中则是默认内部链接</p>
</li>
<li><p><code>const</code>分配内存，取地址会分配临时内存，使用<code>extern</code>时编译器也会给<code>const</code>变量分配内存，用普通变量初始化<code>const</code>变量也会给<code>const</code>分配内存</p>
</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//会分配内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>自定义数据类型，加<code>const</code>也会分配内存</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    string m_Name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_Age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> Person p1<span class="token punctuation">;</span> <span class="token comment">// 分配了内存</span>
    Person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>m_Name <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>m_Age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>const</code>和<code>define</code>区别总结</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1. const 有类型，可进行编译器类型安全检查，#define五类性，不可进行检查
2. const 有作用域，而#define 不重视作用域，默认定义处到文件结尾，如果定义在指定作用域下有效的常量，那么#define就 不能用，#define可以用undef 来结束作用周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用是<code>C++</code>对<code>C</code>的重要扩充。在<code>C/C++</code>中指针的作用基本都是一样的，但是<code>C++</code>增加了另一种给函数传递地址的途径，这就是按引用传递，他也存在与其他一些编程语言中，并不是<code>C++</code>的发明。</p>
<ul>
<li>变量名实质上是一段连续内存的别名，是一个标号（门牌号）</li>
<li>程序中通过变量来申请并命名内存空间</li>
<li>通过变量的名字可以使用存储空间</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//修改b时，a也会修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">引用使用格式：type <span class="token operator">&amp;</span>别名<span class="token operator">=</span>原名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>引用 就是起别名，这里<code>a</code>的<code>b</code>都指向同一片地址空间，<code>&amp;</code>写到左侧叫引用，写到右侧是取地址。</li>
<li>引用必须初始化，引用初始化后不可以修改</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//int &amp;a;//编译不通过</span>
    <span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//引用初始化后不可以修改</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//这里是把c的值赋给b，而不是b引用c，初始化后不可以修改</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>对数组建立引用</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>parr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span>  arr<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> parr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 值传递，直接传递a，b的值，不更改a与b的值</span>
<span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 指针传递，传递a，b的指针，更改a，b的值</span>
<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//引用传递，类似传递地址，相当于int &amp;a = a，可以通过引用改变a，b的值</span>
<span class="token keyword">void</span> <span class="token function">swap3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swap3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="引用注意事项"><a href="#引用注意事项" class="headerlink" title="引用注意事项"></a>引用注意事项</h3><ul>
<li><p>引用必需引一块合法的内存空间</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">&amp;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//引用必需引一块合法的内存空间</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>不要返回局部变量的引用</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">&amp;</span>ret <span class="token operator">=</span>  <span class="token function">dowork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 局部引用已经销毁，数据不准确</span>
	<span class="token function">dowork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> 
    <span class="token comment">// 如果函数的返回值引用，那么这个函数调用可以作为左值，</span>
    <span class="token comment">//相当于写了a=1000</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">引用的本质在C<span class="token operator">++</span>内部实现是一个指针常量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="指针的引用"><a href="#指针的引用" class="headerlink" title="指针的引用"></a>指针的引用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 通过指针给对对象分配内存</span>
<span class="token keyword">void</span> <span class="token function">allocat</span><span class="token punctuation">(</span>Person <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>Person <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">allocat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 利用指针引用开辟空间</span>
<span class="token keyword">void</span> <span class="token function">allocat</span><span class="token punctuation">(</span>Person<span class="token operator">*</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">allocat</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span>  <span class="token operator">&amp;</span>ref <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 引用了不合法的内存，不可以</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>ref <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//加入const后，编译器处理方式为</span>
    <span class="token comment">// int tmp = 10; const int &amp;ref = tmp;</span>
    <span class="token comment">// 常量引用ref可以通过指针来修改</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ref<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常量引用使用场景，通常用来修饰形参</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">showValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果只是想展示内容，而不修改内容，那么就用const来修饰这个形参</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>483</p>]]></content>
      <categories>
        <category>C++ 学习</category>
      </categories>
      <tags>
        <tag>C++ 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt无法输入中文</title>
    <url>//20641ee8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装fcitx-frontend-qt5"><a href="#安装fcitx-frontend-qt5" class="headerlink" title="安装fcitx-frontend-qt5"></a>安装<code>fcitx-frontend-qt5</code></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcitx-frontend-qt51<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看<code>`fcitx-frontend-qt5</code>的安装目录。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dpkg -L fcitx-frontend-qt5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一般是这个</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="复制到安装目录"><a href="#复制到安装目录" class="headerlink" title="复制到安装目录"></a>复制到安装目录</h2><p>我安装的是<code>QT6</code></p>
<pre class="line-numbers language-none"><code class="language-none">sudo cp libfcitxplatforminputcontextplugin.so {QT安装目录}/6.0.3/gcc_64/plugins/platforminputcontexts
sudo cp libfcitxplatforminputcontextplugin.so {QT安装目录}Tools/QtCreator/lib/Qt/plugins/platforminputcontexts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>报错处理</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>VI和VIM基本操作</title>
    <url>//a67e3062/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vi和Vim-基本操作"><a href="#Vi和Vim-基本操作" class="headerlink" title="Vi和Vim 基本操作"></a>Vi和Vim 基本操作</h1><h2 id="Vi的插入"><a href="#Vi的插入" class="headerlink" title="Vi的插入"></a>Vi的插入</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>a</code></td>
<td style="text-align:center">光标位置右边插入文字</td>
</tr>
<tr>
<td style="text-align:center"><code>i</code></td>
<td style="text-align:center">光标位置当前处插入文字</td>
</tr>
<tr>
<td style="text-align:center"><code>o</code></td>
<td style="text-align:center">光标位置下方开启新行</td>
</tr>
<tr>
<td style="text-align:center"><code>O</code></td>
<td style="text-align:center">光标位置上方开启新行</td>
</tr>
<tr>
<td style="text-align:center"><code>I</code></td>
<td style="text-align:center">光标所在行首插入文字</td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center">光标所在行尾插入文字</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi-的退出"><a href="#Vi-的退出" class="headerlink" title="Vi 的退出"></a>Vi 的退出</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>ZZ(shift+z+z)</code></td>
<td style="text-align:center">保存退出</td>
</tr>
<tr>
<td style="text-align:center"><code>:wq</code></td>
<td style="text-align:center">保存退出</td>
</tr>
<tr>
<td style="text-align:center"><code>:x</code></td>
<td style="text-align:center">保存退出</td>
</tr>
<tr>
<td style="text-align:center"><code>:w filename</code></td>
<td style="text-align:center">保存在指定文件</td>
</tr>
<tr>
<td style="text-align:center"><code>:q</code></td>
<td style="text-align:center">退出，如果文件修改但没有保存，会提示无法退出</td>
</tr>
<tr>
<td style="text-align:center"><code>:q!</code></td>
<td style="text-align:center">退出，不保存</td>
</tr>
<tr>
<td style="text-align:center"><code>:!命令</code></td>
<td style="text-align:center">暂时离开<code>vi</code>，执行命令</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi的删除和修改功能"><a href="#Vi的删除和修改功能" class="headerlink" title="Vi的删除和修改功能"></a>Vi的删除和修改功能</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>[n]x</code></td>
<td style="text-align:center">删除光标后<code>n</code>的字符</td>
</tr>
<tr>
<td style="text-align:center"><code>[n]X</code></td>
<td style="text-align:center">删除光标前<code>n</code>的字符</td>
</tr>
<tr>
<td style="text-align:center"><code>D</code></td>
<td style="text-align:center">删除光标所在开始到此行尾的字符</td>
</tr>
<tr>
<td style="text-align:center"><code>[n]dd</code></td>
<td style="text-align:center">删除从当前行开始的<code>n</code>行（准确来说，是剪切，剪切不粘贴即为删除）</td>
</tr>
<tr>
<td style="text-align:center"><code>[n]yy</code></td>
<td style="text-align:center">复制从当前行开始的<code>n</code>行，向下复制</td>
</tr>
<tr>
<td style="text-align:center"><code>p</code></td>
<td style="text-align:center">把粘贴板上的内容插入到当前行</td>
</tr>
<tr>
<td style="text-align:center"><code>dG</code></td>
<td style="text-align:center">删除光标所在开始到文件尾的所有字符</td>
</tr>
<tr>
<td style="text-align:center"><code>J</code></td>
<td style="text-align:center">合并两行，将光标所在行和下一行进行合并，在两行中间加入一个空格</td>
</tr>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">执行上一次的操作</td>
</tr>
<tr>
<td style="text-align:center"><code>u</code></td>
<td style="text-align:center">撤销前一个命令</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi的行定位功能"><a href="#Vi的行定位功能" class="headerlink" title="Vi的行定位功能"></a>Vi的行定位功能</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>ctrl+f</code></td>
<td style="text-align:center">向前滚动一个屏幕</td>
</tr>
<tr>
<td style="text-align:center"><code>ctrl+b</code></td>
<td style="text-align:center">向后滚动一个屏幕</td>
</tr>
<tr>
<td style="text-align:center"><code>gg</code></td>
<td style="text-align:center">到文件第一行行首</td>
</tr>
<tr>
<td style="text-align:center"><code>G</code></td>
<td style="text-align:center">到文件最后一行行首，<code>G</code>必需大写</td>
</tr>
<tr>
<td style="text-align:center"><code>:$</code></td>
<td style="text-align:center">到文件最后一行（行首）</td>
</tr>
<tr>
<td style="text-align:center"><code>mG或mgg</code></td>
<td style="text-align:center">到指定行，<code>m</code>为目标行数</td>
</tr>
<tr>
<td style="text-align:center"><code>/内容</code></td>
<td style="text-align:center">查找指定内容</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi的文本查找功能"><a href="#Vi的文本查找功能" class="headerlink" title="Vi的文本查找功能"></a>Vi的文本查找功能</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>/字符串</code></td>
<td style="text-align:center">查找指定字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>n</code></td>
<td style="text-align:center">寻找下一个</td>
</tr>
<tr>
<td style="text-align:center"><code>N</code></td>
<td style="text-align:center">回到前一个</td>
</tr>
<tr>
<td style="text-align:center"><code>?</code></td>
<td style="text-align:center">查找上一个</td>
</tr>
<tr>
<td style="text-align:center"><code>/^字符串</code></td>
<td style="text-align:center">查找以字符串开始的行</td>
</tr>
<tr>
<td style="text-align:center"><code>/字符串$</code></td>
<td style="text-align:center">查找以字符串结尾的行</td>
</tr>
<tr>
<td style="text-align:center"><code>/a.b</code></td>
<td style="text-align:center">查找字符串<code>a</code>任意字符<code>b</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi的替换功能"><a href="#Vi的替换功能" class="headerlink" title="Vi的替换功能"></a>Vi的替换功能</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>r</code></td>
<td style="text-align:center">替换当前光标字符</td>
</tr>
<tr>
<td style="text-align:center"><code>:r 文件名</code></td>
<td style="text-align:center">在光标当前位置下一行载入另一个文件</td>
</tr>
<tr>
<td style="text-align:center"><code>:s/p1/p2/g</code></td>
<td style="text-align:center">将当前行中所有<code>p1</code>均用<code>p2</code>替代</td>
</tr>
<tr>
<td style="text-align:center"><code>:g/p1/s//p2/g</code></td>
<td style="text-align:center">将文件中所有<code>p1</code>均用<code>p2</code>替代</td>
</tr>
<tr>
<td style="text-align:center"><code>:n1,n2 s/p1/p2/g</code></td>
<td style="text-align:center">将<code>n1</code>到<code>n2</code>行中所有<code>p1</code>用<code>p2</code>替代</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Vi的set指令"><a href="#Vi的set指令" class="headerlink" title="Vi的set指令"></a>Vi的<code>set</code>指令</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>:set ic</code></td>
<td style="text-align:center">搜寻是忽略大小写</td>
</tr>
<tr>
<td style="text-align:center"><code>:set noic</code></td>
<td style="text-align:center">搜寻是不忽略大小写</td>
</tr>
<tr>
<td style="text-align:center"><code>:set nu</code></td>
<td style="text-align:center">显示行号</td>
</tr>
<tr>
<td style="text-align:center"><code>:set nonu</code></td>
<td style="text-align:center">不显示行号</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统管理</title>
    <url>//6c72ecbc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux系统管理"><a href="#Linux系统管理" class="headerlink" title="Linux系统管理"></a>Linux系统管理</h1><h2 id="日历-cal"><a href="#日历-cal" class="headerlink" title="日历 cal"></a>日历 <code>cal</code></h2><p><code>cal</code>命令用户查看当前日历，<code>-y</code>显示整年日历</p>
<h2 id="显示或设置时间date"><a href="#显示或设置时间date" class="headerlink" title="显示或设置时间date"></a>显示或设置时间<code>date</code></h2><p>设置时间格式</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">date</span> <span class="token punctuation">[</span>MMDDhhmm<span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">]</span><span class="token punctuation">[</span>.ss<span class="token punctuation">]</span> + <span class="token function">format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>CC</code>为年的前两位<code>yy</code>为年的后两位，前两为的<code>mm</code>为月，后两位的<code>mm</code>为分钟，<code>dd</code>为天，<code>hh</code>为小时，<code>ss</code>为秒</p>
<h2 id="查看进程信息-ps"><a href="#查看进程信息-ps" class="headerlink" title="查看进程信息 ps"></a>查看进程信息 <code>ps</code></h2><p>进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元，</p>
<p><code>ps</code>命令可以查看进程的详细状况，常用选项（选项可以不加<code>-</code>）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">进程</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-a</code></td>
<td style="text-align:center">显示终端上所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td style="text-align:center"><code>-u</code></td>
<td style="text-align:center">显示进程的详细状态</td>
</tr>
<tr>
<td style="text-align:center"><code>-x</code></td>
<td style="text-align:center">显示没有控制终端的进程</td>
</tr>
<tr>
<td style="text-align:center"><code>-w</code></td>
<td style="text-align:center">显示加宽，一边显示更多的信息</td>
</tr>
<tr>
<td style="text-align:center"><code>-r</code></td>
<td style="text-align:center">只显示正在运行的进程</td>
</tr>
</tbody>
</table>
</div>
<h2 id="动态显示进程-top"><a href="#动态显示进程-top" class="headerlink" title="动态显示进程 top"></a>动态显示进程 <code>top</code></h2><p><code>top</code>命令用来动态显示运行中的进程，<code>top</code>命令能够在运行后，在指定时间间隔更新显示信息，可以在使用<code>top</code>命令时加上<code>-d&lt;interval&gt;</code>来指定显示信息更新时间间隔。</p>
<p>在<code>top</code>命令执行后，可以按下按年得到对显示结果进行排序</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>M</code></td>
<td style="text-align:center">根据内存使用量来排序</td>
</tr>
<tr>
<td style="text-align:center"><code>P</code></td>
<td style="text-align:center">根据<code>CPU</code>占有率来排序</td>
</tr>
<tr>
<td style="text-align:center"><code>T</code></td>
<td style="text-align:center">根据进程运行时间的长短来排序</td>
</tr>
<tr>
<td style="text-align:center"><code>U</code></td>
<td style="text-align:center">可以根据后面输入的用户名来筛选进程</td>
</tr>
<tr>
<td style="text-align:center"><code>K</code></td>
<td style="text-align:center">可以根据后面输入的<code>PID</code>来杀死进程</td>
</tr>
</tbody>
</table>
</div>
<h2 id="结束进程-KILL"><a href="#结束进程-KILL" class="headerlink" title="结束进程 KILL"></a>结束进程 <code>KILL</code></h2><p><code>kill</code>命令指定进程号的进程，需要配合<code>ps</code>使用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">kill</span> <span class="token punctuation">[</span>-signal<span class="token punctuation">]</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。</p>
<h2 id="后台程序-amp-、jobs、fg"><a href="#后台程序-amp-、jobs、fg" class="headerlink" title="后台程序 &amp;、jobs、fg"></a>后台程序 <code>&amp;、jobs、fg</code></h2><ul>
<li>用户可以将一个前台执行的程序调入后台执行，方法为：<code>命令 &amp;</code></li>
<li>如果程序已经在执行，<code>ctrl+z</code>可以 将程序调入后台</li>
<li><code>jobs</code>查看后台运行程序</li>
<li><code>fg</code>编号（编号为通过<code>jobs</code>查看的编号），将后台运行程序调出到前台</li>
</ul>
<h2 id="关机重启-reboot、shutdown、init"><a href="#关机重启-reboot、shutdown、init" class="headerlink" title="关机重启 reboot、shutdown、init"></a>关机重启 <code>reboot、shutdown、init</code></h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>reboot</code></td>
<td style="text-align:center">重新启动操作系统</td>
</tr>
<tr>
<td style="text-align:center"><code>shutdown -r now</code></td>
<td style="text-align:center">重新启动操作系统，<code>shutdown</code>会给别的用户提示</td>
</tr>
<tr>
<td style="text-align:center"><code>shutdown -h now</code></td>
<td style="text-align:center">立刻关机，其中<code>now</code>相当于时间为0的状态</td>
</tr>
<tr>
<td style="text-align:center"><code>shutdown -h 20：25</code></td>
<td style="text-align:center">系统在今天<code>20：25</code>会关机</td>
</tr>
<tr>
<td style="text-align:center"><code>shutdown -h +10</code></td>
<td style="text-align:center">系统再过十分钟会自动关机</td>
</tr>
<tr>
<td style="text-align:center"><code>init 0</code></td>
<td style="text-align:center">关机</td>
</tr>
<tr>
<td style="text-align:center"><code>init 6</code></td>
<td style="text-align:center">重启</td>
</tr>
</tbody>
</table>
</div>
<h2 id="字符界面和图形界面切换"><a href="#字符界面和图形界面切换" class="headerlink" title="字符界面和图形界面切换"></a>字符界面和图形界面切换</h2><p>在<code>redhat</code>平台下，可通过命令进行切换</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">init <span class="token number">3</span> ： 切换到字符界面
init <span class="token number">5</span> ： 切换到图形界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通过快捷键切换（适用于大部分平台）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Ctrl+Alt+F2 切换到字符界面
Ctrl+Alt+F7 切换到图形界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="检测磁盘空间-df"><a href="#检测磁盘空间-df" class="headerlink" title="检测磁盘空间 df"></a>检测磁盘空间 <code>df</code></h2><p><code>df</code>命令用户检测文件系统的磁盘空间占用和空余情况，可以显示所有文件系统对节点和磁盘块的使用情况。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-a</code></td>
<td style="text-align:center">显示所有文件系统的磁盘使用情况</td>
</tr>
<tr>
<td style="text-align:center"><code>-m</code></td>
<td style="text-align:center">以1024字节为单位显示</td>
</tr>
<tr>
<td style="text-align:center"><code>-t &lt;fs&gt;</code></td>
<td style="text-align:center">显示各指定文件系统的磁盘空间使用情况</td>
</tr>
<tr>
<td style="text-align:center"><code>-T</code></td>
<td style="text-align:center">显示文件系统</td>
</tr>
</tbody>
</table>
</div>
<pre><code>## 格式化 `mkfs`
</code></pre><p><code>mkfs</code>命令相当于<code>DOS/WINDOWS</code>系统中的格式化命令，用户创建指定的文件系统</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkfs</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 设备文件名 <span class="token punctuation">[</span>blocks<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-V</code></td>
<td style="text-align:center">详细显示模式</td>
</tr>
<tr>
<td style="text-align:center"><code>-t &lt;.fs&gt;</code></td>
<td style="text-align:center">指定文件系统类型，默认值为<code>ext2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>-c</code></td>
<td style="text-align:center">在创建文件系统的同时，进行磁盘坏块检查</td>
</tr>
<tr>
<td style="text-align:center"><code>blocks</code></td>
<td style="text-align:center">文件系统块的大小</td>
</tr>
</tbody>
</table>
</div>
<h2 id="应用软件安装和卸载"><a href="#应用软件安装和卸载" class="headerlink" title="应用软件安装和卸载"></a>应用软件安装和卸载</h2><p>在<code>Linux</code>系统中，几乎所有的软件均通过<code>RPM</code>进行安装、卸载及关机等操作。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>软件包名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-i</code></td>
<td style="text-align:center">指定安装的软件包</td>
</tr>
<tr>
<td style="text-align:center"><code>-h</code></td>
<td style="text-align:center">使用<code>#</code>显示详细的安装过程和进度</td>
</tr>
<tr>
<td style="text-align:center"><code>-v</code></td>
<td style="text-align:center">显示安装的详细信息</td>
</tr>
<tr>
<td style="text-align:center"><code>-q</code></td>
<td style="text-align:center">查询系统是否已安装指定的软件包</td>
</tr>
<tr>
<td style="text-align:center"><code>-a</code></td>
<td style="text-align:center">查看系统以安装的所有软件包</td>
</tr>
<tr>
<td style="text-align:center"><code>-e</code></td>
<td style="text-align:center">卸载软件包</td>
</tr>
<tr>
<td style="text-align:center"><code>-nodeps</code></td>
<td style="text-align:center">配合<code>-e</code>参数使用，强制卸载不检查依赖项</td>
</tr>
<tr>
<td style="text-align:center"><code>-force</code></td>
<td style="text-align:center">强制操作，如强制安装删除等</td>
</tr>
</tbody>
</table>
</div>
<h2 id="查看或配置网卡信息-ifconfig"><a href="#查看或配置网卡信息-ifconfig" class="headerlink" title="查看或配置网卡信息 ifconfig"></a>查看或配置网卡信息 <code>ifconfig</code></h2><p>如果，我们只是敲<code>ifconfig</code>，它会显示所有网卡的信息</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">显示字段</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>eh0</code></td>
<td style="text-align:center">网络接口名称</td>
</tr>
<tr>
<td style="text-align:center"><code>Link encap</code></td>
<td style="text-align:center">链路封装协议</td>
</tr>
<tr>
<td style="text-align:center"><code>Hwaddr</code></td>
<td style="text-align:center">网络接口的<code>MAC</code>地址</td>
</tr>
<tr>
<td style="text-align:center"><code>Inet addr</code></td>
<td style="text-align:center"><code>IP</code>地址</td>
</tr>
<tr>
<td style="text-align:center"><code>Bcast</code></td>
<td style="text-align:center">广播地址</td>
</tr>
<tr>
<td style="text-align:center"><code>Mask</code></td>
<td style="text-align:center">子网掩码</td>
</tr>
<tr>
<td style="text-align:center"><code>UP</code></td>
<td style="text-align:center">网络接口状态标识，<code>UP</code>已经启用，<code>DOWN</code>已经停用</td>
</tr>
<tr>
<td style="text-align:center"><code>BROADCAST</code></td>
<td style="text-align:center">广播协议，表示网络接口是否支持广播</td>
</tr>
<tr>
<td style="text-align:center"><code>RUNNING</code></td>
<td style="text-align:center">传播协议，表示网络接口是否已经开始传输分组数据</td>
</tr>
<tr>
<td style="text-align:center"><code>MULTICAST</code></td>
<td style="text-align:center">多播协议，表示网络接口是否支持多播</td>
</tr>
<tr>
<td style="text-align:center"><code>MTU,Metric</code></td>
<td style="text-align:center"><code>MTU</code>最大传输单位，单位：字节，<code>Metric</code>度量值，用于<code>RIP</code>建立</td>
</tr>
<tr>
<td style="text-align:center"><code>RX bytes</code></td>
<td style="text-align:center">接受数据字节统计</td>
</tr>
<tr>
<td style="text-align:center"><code>TX bytes</code></td>
<td style="text-align:center">发送数据字节统计</td>
</tr>
</tbody>
</table>
</div>
<h2 id="测试远程主机连通性-ping"><a href="#测试远程主机连通性-ping" class="headerlink" title="测试远程主机连通性 ping"></a>测试远程主机连通性 <code>ping</code></h2><ul>
<li><code>ping</code>通过<code>ICMP</code>协议向远程主机发送<code>ECHO_REQUEST</code>请求，期望主机回复<code>ECHO_REPLY</code>消息</li>
<li>通过<code>ping</code>命令可以检查是否与远程主机建立了<code>TCP/IP</code>连接</li>
</ul>
<h2 id="网络路由设置-route"><a href="#网络路由设置-route" class="headerlink" title="网络路由设置 route"></a>网络路由设置 <code>route</code></h2><p><code>route</code>可以增加、修改、显示路由信息</p>
<pre class="line-numbers language-none"><code class="language-none">route [-v] [-A family] add default [gw 默认网关地址] [[dev interface]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="监控网络状态-netstat"><a href="#监控网络状态-netstat" class="headerlink" title="监控网络状态 netstat"></a>监控网络状态 <code>netstat</code></h2><p><code>netstat</code>命令监控网络状态，包括接口设置、<code>`IP</code>路由、各种网络协议的统计</p>]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux 系统管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户权限</title>
    <url>//e7492e71/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux-用户权限"><a href="#Linux-用户权限" class="headerlink" title="Linux 用户权限"></a>Linux 用户权限</h1><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="查看当前用户whoami"><a href="#查看当前用户whoami" class="headerlink" title="查看当前用户whoami"></a>查看当前用户<code>whoami</code></h3><p><code>whoami</code>该命令用户查看当前系统帐号的用户名，可通过<code>cat /etc/passwd</code>查看系统用户信息。</p>
<p>由于系统管理员通常需要使用多种身份登录系统，例如通常使用普通用户登录系统，然后再以<code>su</code>命令切换到<code>root</code>身份对传统进行管理，这时就可以使用<code>whoami</code>来查看当前用户身份。</p>
<h3 id="查看登录用户-who"><a href="#查看登录用户-who" class="headerlink" title="查看登录用户 who"></a>查看登录用户 <code>who</code></h3><p><code>who</code>命令用户查看当前所有登录系统的用户信息</p>
<p>常用选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-m</code>或<code>am I</code></td>
<td style="text-align:center">只显示运行<code>who</code>的用户名，登录终端和登录时间</td>
</tr>
<tr>
<td style="text-align:center"><code>-q</code>或<code>--count</code></td>
<td style="text-align:center">只显示用户的登录帐号和登录用户的数量</td>
</tr>
<tr>
<td style="text-align:center"><code>-u</code></td>
<td style="text-align:center">在登录时间后显示该用户最后一次操作到当前时间的时间间隔</td>
</tr>
<tr>
<td style="text-align:center"><code>-u</code>或<code>--heading</code></td>
<td style="text-align:center">显示列标题</td>
</tr>
</tbody>
</table>
</div>
<h3 id="查看登录用户-w"><a href="#查看登录用户-w" class="headerlink" title="查看登录用户 w"></a>查看登录用户 <code>w</code></h3><p><code>w</code>命令也可以查看登录当前系统的用户信息，与<code>who</code>命令相比，<code>w</code>命令的功能更强大，它不但可以显示当前有哪些用户登录到系统，还可以显示这些用户正在进行的操作，并给出更加详细和科学的统计数据。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">w <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果<code>w</code>命令携带用户名，则只显示指定用户的信息，否则显示当前所有登录用户的信息。</p>
<p>常用选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-h</code></td>
<td style="text-align:center">只显示运行<code>who</code>命令的用户名、登录终端和登录时间</td>
</tr>
<tr>
<td style="text-align:center"><code>-l</code></td>
<td style="text-align:center">显示详细信息列表，此为预设值</td>
</tr>
<tr>
<td style="text-align:center"><code>-s</code></td>
<td style="text-align:center">使用短列表，不显示用户登录时间、<code>JCPU</code>和<code>PCPU</code>时间</td>
</tr>
<tr>
<td style="text-align:center"><code>-u</code></td>
<td style="text-align:center">忽略执行程序的程序，以及程序的<code>PCPU</code>时间</td>
</tr>
</tbody>
</table>
</div>
<h3 id="推出登录账户-exit"><a href="#推出登录账户-exit" class="headerlink" title="推出登录账户 exit"></a>推出登录账户 <code>exit</code></h3><ul>
<li>如果是图形界面，推出当前终端</li>
<li>如果是使用<code>ssh</code>远程登录，推出登录帐号</li>
<li>如果是切换后的登录用户，退场则返回上一个登录帐号</li>
</ul>
<h3 id="切换用户-su"><a href="#切换用户-su" class="headerlink" title="切换用户 su"></a>切换用户 <code>su</code></h3><p>可以通过<code>su</code>命令切换用户，<code>su</code>后面可以加<code>-</code>，<code>su</code>和<code>su -</code>命令不同之处在与，<code>su -</code>切换到对应的用户会将当前的工作目录自动切换到切换后用户主目录。</p>
<h3 id="添加、删除组帐号：groupadd、groupdel"><a href="#添加、删除组帐号：groupadd、groupdel" class="headerlink" title="添加、删除组帐号：groupadd、groupdel"></a>添加、删除组帐号：<code>groupadd、groupdel</code></h3><ul>
<li><p><code>groupadd</code>新建组帐号</p>
</li>
<li><p><code>groupdel</code>删除组帐号</p>
</li>
<li><p><code>cat /etc/group</code> 查看用户组</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">创建工作组： <span class="token function">groupadd</span> 组名
删除工作组： <span class="token function">groupdel</span> 组名
注意： 需要切换到 root用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="修改组-usermod"><a href="#修改组-usermod" class="headerlink" title="修改组 usermod"></a>修改组 <code>usermod</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">usermod</span> -g 用户组 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">修改用户所在组：usermod -g 组名 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="添加用户帐号-useradd"><a href="#添加用户帐号-useradd" class="headerlink" title="添加用户帐号 useradd"></a>添加用户帐号 <code>useradd</code></h3><p>在<code>Unix/Linux</code>中添加用户帐号可以使用<code>adduser</code>或<code>useradd</code>命令，因为<code>adduser</code>命令是指向<code>useradd</code>命令的一个链接，因此，这两个命令的使用格式完全一样。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 新建用户帐号  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-d &lt;dirname&gt;</code></td>
<td style="text-align:center">指定用户登录系统时的主目录，如果不使用该参数，系统自动在<code>/home</code>目录下建立与用户名同名目录为主目录</td>
</tr>
<tr>
<td style="text-align:center"><code>-m</code></td>
<td style="text-align:center">自动建立目录</td>
</tr>
<tr>
<td style="text-align:center"><code>-g</code></td>
<td style="text-align:center">指定组名称</td>
</tr>
</tbody>
</table>
</div>
<h3 id="修改文件权限-chmod"><a href="#修改文件权限-chmod" class="headerlink" title="修改文件权限 chmod"></a>修改文件权限 <code>chmod</code></h3><p><code>chmod</code>修改文件权限有两种使用格式：字母法和数字法</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">字母法：chmod u/g/o/a +/-/<span class="token operator">=</span> rwx 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><code>u/g/o/a</code></th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>u</code></td>
<td style="text-align:center"><code>user</code>表示该文件所有者</td>
</tr>
<tr>
<td style="text-align:center"><code>g</code></td>
<td style="text-align:center"><code>group</code>表示与该文件的所有者属于同一组（<code>group</code>）者，及用户组</td>
</tr>
<tr>
<td style="text-align:center"><code>o</code></td>
<td style="text-align:center"><code>other</code>表示其他以外的人</td>
</tr>
<tr>
<td style="text-align:center"><code>a</code></td>
<td style="text-align:center"><code>all</code>表示这三者皆是</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><code>+-=</code></th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center">增加权限</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td style="text-align:center">撤销权限</td>
</tr>
<tr>
<td style="text-align:center"><code>=</code></td>
<td style="text-align:center">设定权限</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><code>rwx</code></th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>r</code></td>
<td style="text-align:center"><code>read</code>表示可读取，对于一个目录，如果没有<code>r</code>权限，那么就意味这不能通过<code>ls</code>查看这个目录的内容</td>
</tr>
<tr>
<td style="text-align:center"><code>w</code></td>
<td style="text-align:center"><code>wriet</code>表示可写入，对于一个目录，如果没有<code>w</code>权限，那么就意味着不能在目录下创建新文件</td>
</tr>
<tr>
<td style="text-align:center"><code>x</code></td>
<td style="text-align:center"><code>excute</code>表示可执行，对于一个目录，如果没有<code>x</code>权限，那么就意味着不能通过<code>cd</code>进入这个目录</td>
</tr>
</tbody>
</table>
</div>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">数字法： rwx 这些权限可以用数字代替
r: 读取权限，数字代号为 <span class="token number">4</span>
w：写入权限，数字代号为 <span class="token number">2</span>
x：执行权限，数字代号为 <span class="token number">1</span>
<span class="token function">chmod</span> <span class="token number">741</span> <span class="token function">file</span> -R （-R 代表递归给目录加上相同的权限）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者 chown"></a>修改文件所有者 <code>chown</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chown</span> 用户名 文件或目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改文件所属组-chgrp"><a href="#修改文件所属组-chgrp" class="headerlink" title="修改文件所属组 chgrp"></a>修改文件所属组 <code>chgrp</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chgrp</span> 用户组名 文件或目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>用户权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令</title>
    <url>//9da1ef6b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><p>格式：<code>命令 选项 参数</code></p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>通配符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>匹配任意多个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td><code>[]</code></td>
<td><code>[</code>和<code>]</code>将字符组扩起来，表示可以匹配字符组中任意一个，<code>-</code>用户表示字符范围</td>
</tr>
<tr>
<td><code>[abc]</code></td>
<td>匹配<code>a、b、c</code>中任意一个</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>匹配从<code>a</code>到<code>z</code>范围内任意一个字符</td>
</tr>
<tr>
<td><code>\</code></td>
<td>转义字符，将通配字符转义成普通字符</td>
</tr>
</tbody>
</table>
</div>
<h2 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">命令 --help
<span class="token function">man</span> 命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tab</code></td>
<td>智能补全，如果没有重复的选项 ，自动补全，如果有重复项，按下两个<code>tab</code>，显示列表</td>
</tr>
<tr>
<td><span class="github-emoji"><span>⬆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td>
<td>历史记录</td>
</tr>
</tbody>
</table>
</div>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开终端</td>
<td><code>ctrl+alt+t</code></td>
</tr>
<tr>
<td>在终端中锁定</td>
<td><code>ctrl+c</code></td>
</tr>
<tr>
<td>清屏</td>
<td><code>ctrl+l</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="查看文件-ls"><a href="#查看文件-ls" class="headerlink" title="查看文件 ls"></a>查看文件 <code>ls</code></h3><div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看文件</td>
<td><code>ls</code></td>
</tr>
<tr>
<td>查看隐藏文件</td>
<td><code>ls -a</code></td>
</tr>
<tr>
<td>查看文件详细信息</td>
<td><code>ls -l</code></td>
</tr>
<tr>
<td>配合<code>-l</code>以人性化方式显示文件大小</td>
<td><code>ls -lh</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&gt;</code></td>
<td>输出重定西会覆盖原来的内容</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>输出重定向则会追加到文件的尾部</td>
</tr>
</tbody>
</table>
</div>
<h3 id="man-功能键"><a href="#man-功能键" class="headerlink" title="man 功能键"></a><code>man</code> 功能键</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格</td>
<td>显示手册下一屏</td>
</tr>
<tr>
<td><code>Enter</code></td>
<td>一次滚动手册页的一行</td>
</tr>
<tr>
<td><code>b</code></td>
<td>回滚一屏</td>
</tr>
<tr>
<td><code>f</code></td>
<td>前滚一屏</td>
</tr>
<tr>
<td><code>q</code></td>
<td>推出<code>man</code>命令</td>
</tr>
<tr>
<td><code>h</code></td>
<td>列出所有功能键</td>
</tr>
<tr>
<td><code>/word</code></td>
<td>搜索<code>word</code>字符串</td>
</tr>
</tbody>
</table>
</div>
<h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录 mkdir"></a>创建目录 <code>mkdir</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> 目录名 -p 递归创建<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过<code>mkdir</code>命令可以创建一个新的目录。参数<code>-p</code>可递归创建目录。</p>
<h3 id="删除文件-rm"><a href="#删除文件-rm" class="headerlink" title="删除文件 rm"></a>删除文件 <code>rm</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rm</span> 文件
<span class="token function">rmdir</span> 删除文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>rmkdir</code> 目录名 目录一定是空的</p>
<p>可通过<code>rm</code>删除文件或目录。使用<code>rm</code>命令要小心，因为文件删除后不能回恢复。为了放置文件误删，可以在<code>rm</code>后使用<code>-i</code>参数一逐个确认要删除的文件。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-i</code></td>
<td>已进行交互方式执行</td>
</tr>
<tr>
<td><code>-f</code></td>
<td>强制删除，忽略不存在的文件，无需提示</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>递归地删除目录下的内容，删除文件夹是必需加此参数</td>
</tr>
</tbody>
</table>
</div>
<h3 id="建立链接文件-ln"><a href="#建立链接文件-ln" class="headerlink" title="建立链接文件 ln"></a>建立链接文件 <code>ln</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ln</span> 源文件 链接文件 硬链接
<span class="token function">ln</span> -s 源文件 链接文件 软链接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>软链接文件不占磁盘空间，但是删除源文件会影响软链接文件</p>
<p>硬链接文件站磁盘空间，但是删除源文件不会影响硬链接文件</p>
<p>硬链接和复制的区别，无论你修改了哪一个链接之后的文件，另一个会改变，但拷贝不会</p>
<h3 id="文本搜索-grep"><a href="#文本搜索-grep" class="headerlink" title="文本搜索 grep"></a>文本搜索 <code>grep</code></h3><pre class="line-numbers language-none"><code class="language-none">grep [-选项] ’搜索内容串‘ 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>常见选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-v</code></td>
<td>显示不包括匹配文本的所有行（相当与求反）</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>显示匹配行以及行号</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>忽略大小写</td>
</tr>
</tbody>
</table>
</div>
<p><code>grep</code>后的搜索规则也可以是正则表达式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>通配符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^a</code></td>
<td>以<code>a</code>为起始的字符搜索文件</td>
</tr>
<tr>
<td><code>a$</code></td>
<td>以<code>a</code>为结尾的字符搜索文件</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配任意一个非换行的字符</td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配任意字符（大于0的整数）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="计算文件的行数与字数-wc"><a href="#计算文件的行数与字数-wc" class="headerlink" title="计算文件的行数与字数 wc"></a>计算文件的行数与字数 <code>wc</code></h3> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wc</span> <span class="token punctuation">[</span>-选项<span class="token punctuation">]</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-l</code></td>
<td>统计行数</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>统计字数，一个字被定义为有空白、跳格或换行的字符分隔的字符串</td>
</tr>
<tr>
<td><code>-c</code></td>
<td>统计字节数</td>
</tr>
<tr>
<td><code>-m</code></td>
<td>统计字符数，这个标志不能与<code>-c</code>标识一起使用</td>
</tr>
</tbody>
</table>
</div>
<h3 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索 find"></a>文件搜索 <code>find</code></h3><p>在特定目录下搜索符合条件的文件也可以用来搜索特定用户属主的文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> 目录 参数 文件名（可以使用通配符）
-name 文件名
-size 大小
-perm 权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>常见用法：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>find ./ -name test.sh</code></td>
<td>查找当前目录下所有名为<code>test.sh</code>的文件</td>
</tr>
<tr>
<td><code>find ./ -name '*.sh'</code></td>
<td>查找当前目录下所有后缀为<code>.sh</code>的文件</td>
</tr>
<tr>
<td><code>find ./ -name "[A-Z]*"</code></td>
<td>查找当前目录下所有以大写字母开头的文件</td>
</tr>
<tr>
<td><code>find /tmp -size 2M</code></td>
<td>查找在<code>/tmp</code>目录下等于<code>2M</code>的文件</td>
</tr>
<tr>
<td><code>find /tmp -size +2M</code></td>
<td>查找在<code>/tmp</code>目录下大于<code>2M</code>的文件</td>
</tr>
<tr>
<td><code>find /tmp -size -2M</code></td>
<td>查找在<code>/tmp</code>目录下小于<code>2M</code>的文件</td>
</tr>
<tr>
<td><code>find ./ -size +4k -size -5M</code></td>
<td>查找当前目录下大于<code>4k</code>小于<code>5k</code>的文件</td>
</tr>
<tr>
<td><code>find ../ -perm 0777</code></td>
<td>查找当前目录下权限为<code>777</code>的文件或目录</td>
</tr>
</tbody>
</table>
</div>
<h3 id="拷贝-cp"><a href="#拷贝-cp" class="headerlink" title="拷贝 cp"></a>拷贝 <code>cp</code></h3><p><code>cp</code>命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于<code>DOS</code>中的<code>copy</code>命令。</p>
<p>常见选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a</code></td>
<td>该选项通常在复制目录时使用，她保留链接、文件属性，并递归的复制目录，简单而言，保持文件与原有属性。</td>
</tr>
<tr>
<td><code>-f</code></td>
<td>删除已经存在的目标文件而不提示</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>若给出的源文件是目录文件，则<code>cp</code>将递归复制该目录下的所有子目录或文件，目标文件必须为一个目录名</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>显示拷贝进度</td>
</tr>
</tbody>
</table>
</div>
<h3 id="移动-mv"><a href="#移动-mv" class="headerlink" title="移动 mv"></a>移动 <code>mv</code></h3><p>用户可以使用<code>mv</code>命令来移动文件或目录，也可以给文件或目录重命名。</p>
<p>常用选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-f</code></td>
<td>禁止交互式操作，如有覆盖也不会给出提示</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>确认交互方式操作，如果<code>mv</code>操作将导致对已存在目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>显示移动进度</td>
</tr>
</tbody>
</table>
</div>
<h3 id="获取文件类型-file"><a href="#获取文件类型-file" class="headerlink" title="获取文件类型 file"></a>获取文件类型 <code>file</code></h3><p><code>linux</code>系统文件类型不是根据文件扩展名分类的，通过<code>file</code>命令可以确认文件具体类型。</p>
<h3 id="归档管理-tar"><a href="#归档管理-tar" class="headerlink" title="归档管理 tar"></a>归档管理 <code>tar</code></h3><p>计算机的数据经常需要备份，<code>tar</code>是<code>Unix/Linux</code>中最常用的备份工具，此命令可以把一系列文件归档到一个大文件中，也可以把档案文件解开以恢复数据。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 打包文件名 文件
归档： <span class="token function">tar</span> -cvf 归档文件名.tar 文件1 文件2 目录1 目录2
解归档：tar -xvf 归档文件名.tar 路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>tar</code>命令很特殊，其参数前面可以使用<code>-</code>，也可以不使用</p>
<h3 id="文件压缩解压"><a href="#文件压缩解压" class="headerlink" title="文件压缩解压"></a>文件压缩解压</h3><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a><code>gzip</code></h4><ul>
<li><code>tar</code>与<code>gzip</code>命令结合使用实现文件打包、压缩。</li>
<li><code>tar</code>只负责打包文件，但不压缩，用<code>gzip</code>压缩<code>tar</code>打包后的文件，其扩展名一般用<code>xxxx.tar.gz</code></li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">gzip</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 被压缩文件
压缩： <span class="token function">gzip</span> 归档文件名.tar 生成一个文件 归档文件名.tar.gz 文件大小小于归档文件大小<span class="token punctuation">[</span>归档文件名.tar<span class="token punctuation">]</span> 不存在了
解压缩： <span class="token function">gzip</span> -d 归档文件名.tar.gz 生成一个文件 归档文件名.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">一步归档压缩：
tar -czvf 文件名.tar.gz 文件1 文件2 目录1 目录2
一步解归档压缩：
tar -xzvf 文件名.tar.gz -C 路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>常用选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-d</code></td>
<td>解压</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>压缩所有子目录</td>
</tr>
</tbody>
</table>
</div>
<h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a><code>bzip2</code></h4><pre class="line-numbers language-none"><code class="language-none">一步归档压缩：
tar -cjvf 文件名.tar.bz2 文件1 文件2 目录1 目录2
一步解归档压缩：
tar -xjvf 文件名.tar.bz2 -C 路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip,unzip"></a><code>zip,unzip</code></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">一步归档压缩：
<span class="token function">zip</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> 目标文件（没有扩展名） 源文件
<span class="token function">zip</span> 文件名 文件1 文件2 目录1 目录2 生成一个文件为： 文件.zip
一步解归档压缩：
<span class="token function">unzip</span> -d 解压后目录文件 压缩文件
<span class="token function">unzip</span> 文件名.zip -C 路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看命令位置-which"><a href="#查看命令位置-which" class="headerlink" title="查看命令位置 which"></a>查看命令位置 <code>which</code></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">which</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>一个命令的输出可以通过管道作为另一个命令的输入。</p>]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 目录和文件</title>
    <url>//920965dc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux-目录与文件"><a href="#Linux-目录与文件" class="headerlink" title="Linux 目录与文件"></a>Linux 目录与文件</h1><h2 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h2><p>[绝对路径]文件位置： </p>
<pre class="line-numbers language-none"><code class="language-none">windows: 盘符:\文件夹\文件
linux: /home/文件夹/0612/day01/a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>[相对路径]当前目录所在位置0612 ./day01/a </p>
<pre class="line-numbers language-none"><code class="language-none">.代表当前目录
.. 上一级文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="目录创建规则"><a href="#目录创建规则" class="headerlink" title="目录创建规则"></a>目录创建规则</h3><ul>
<li>长度不超过256</li>
<li>不能包含特殊字符</li>
<li>见名知意</li>
</ul>
<h2 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h2><ul>
<li><code>/</code>: 根目录，一般根目录下只存放目录，在<code>linux</code>下有且只有一个根目录。</li>
<li><code>/bin,/usr/bin</code>: 可执行二进制文件的目录，如常用的命令<code>ls、tar、mv、cat</code>等。</li>
<li><code>/boot</code>: 放置<code>linux</code>系统启动是用到的一些文件，如Linux的内核文件 <code>/boot/vmlinuz</code>，系统引导管理器:<code>/boot/grub</code>。</li>
<li><code>/dev</code>: 放置<code>linux</code>系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 <code>mount /dev/chrom/mnt</code>。</li>
<li><code>/etc</code>:系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有<code>/etc/inittab、/etc/fstab、/etc/init.d/、/etc/X11、/etc/sysconfig、/etc/xinetd.d</code>。</li>
<li><code>/home</code>:系统默认的用户家目录，新增用户帐号时，用户的家目录都存放在此目录，<code>~</code>表示当前用户的家目录，<code>~edu</code>表示用户<code>edu</code>的家目录。</li>
<li><code>/lib、/usr/lib、/usr/local/lib</code>:系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</li>
<li><code>/lost+fount</code>:系统异常产生错误时，会将一些遗失的片段放置与此目录下。</li>
<li><code>/mnt、/media</code>:光盘默认挂载点，通常光盘挂载与<code>/mnt/chrom</code>下，也不一定，可以选择任意位置挂载。</li>
<li><code>/opt</code>:给主机额外安装软件所摆放的目录。</li>
<li><code>/proc</code>:此目录的数据都在内存中，如系统核心、外部设备、网络状态，由于数据都存放在内存中，所以不占用磁盘空间，比较重要的目录有<code>/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*</code>等。</li>
<li><code>/root</code>:系统管理员<code>root</code>的家目录。</li>
<li><code>/sbin、/usr/bin、/usr/local/sbin</code>:放置系统管理员使用的可执行命令，如<code>fdisk、shutdown、mount</code>等，与<code>/bin</code>不同的是，这几个目录是给系统管理员<code>root</code>使用的命令，一般用户只能查看而不能设置和使用。</li>
<li><code>/tmp</code>: 一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要的数据不可放置在此目录下。</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>计算机中一切皆文件</p>
<pre class="line-numbers language-none"><code class="language-none">在windows中区分文件通过扩展名区分文件，在linux中通过颜色区分也可以通过命令区分 file 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><ul>
<li>普通文件</li>
<li>目录文件</li>
<li><p>设备文件</p>
<ul>
<li>字符设备文件</li>
<li>块设备文件</li>
</ul>
</li>
<li><p>管道文件</p>
</li>
<li><p>链接文件</p>
</li>
</ul>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>读[r]， 写[w]，执行[x]</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">d</th>
<th style="text-align:center">rwx</th>
<th style="text-align:center">rwx</th>
<th style="text-align:center">rwx</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">目录</td>
<td style="text-align:center">文件所属用户</td>
<td style="text-align:center">文件所属组</td>
<td style="text-align:center">其他用户</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux目录文件</tag>
      </tags>
  </entry>
  <entry>
    <title>vultr+cloudflare</title>
    <url>//4e01c297/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="申请免费域名-cloudflare-托管域名："><a href="#申请免费域名-cloudflare-托管域名：" class="headerlink" title="申请免费域名+ cloudflare 托管域名："></a>申请免费域名+ <code>cloudflare</code> 托管域名：</h2><p><a href="https://iyideng.me/welfare/freenom-free-domain-register.html">申请免费域名+域名托管</a></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>freenom</code> 申请到的域名设置<code>DNS</code>只需要设置<code>cloudflare</code>的解析得到的<code>dns</code>，不需要设置<code>80.80.80.80</code></p>
<p><code>cloudflare</code> 解析时使用的<code>ip</code>是<code>VPS</code>服务器的<code>ip</code></p>
<h2 id="VPS-搭建服务器"><a href="#VPS-搭建服务器" class="headerlink" title="VPS 搭建服务器"></a><code>VPS</code> 搭建服务器</h2><h3 id="搭建-Trojan-服务器"><a href="#搭建-Trojan-服务器" class="headerlink" title="搭建 Trojan 服务器"></a>搭建 <code>Trojan</code> 服务器</h3><p><a href="https://iyideng.me/black-technology/cgfw/trojan-server-building-and-using-tutorial.html">搭建Trojan服务器</a></p>
<p><code>centos8</code>以上的不需要升级内核，内核升级可能造成服务器无法启动，</p>
<h3 id="搭建-Vless服务器（推荐）"><a href="#搭建-Vless服务器（推荐）" class="headerlink" title="搭建 Vless服务器（推荐）"></a>搭建 <code>Vless</code>服务器（推荐）</h3><p><a href="[Vless+ws+tls梯子搭建一键脚本教程 | 酉荻的博客 (luyiminggonnabeok.cn">搭建 <code>Vless</code>服务器</a>](<a href="http://luyiminggonnabeok.cn/2020/10/13/Vless-ws-tls一键脚本教程/">http://luyiminggonnabeok.cn/2020/10/13/Vless-ws-tls一键脚本教程/</a>))</p>
<h3 id="BBR加速"><a href="#BBR加速" class="headerlink" title="BBR加速"></a><code>BBR</code>加速</h3><p><a href="https://www.haah.net/archives/4551.html"><code>bbr</code>加速</a></p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>飞机</tag>
      </tags>
  </entry>
  <entry>
    <title>Django与mysql相连</title>
    <url>//3a7fd0d4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Django与mysql相连"><a href="#Django与mysql相连" class="headerlink" title="Django与mysql相连"></a>Django与mysql相连</h2><h3 id="Django链接数据库"><a href="#Django链接数据库" class="headerlink" title="Django链接数据库"></a>Django链接数据库</h3><p>在项目根setting.py中更改默认配置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">DATABASES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'default'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">'ENGINE'</span><span class="token operator">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>
        <span class="token string">'NAME'</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
        <span class="token string">'USER'</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
        <span class="token string">'PASSWORD'</span><span class="token operator">:</span> <span class="token string">'****'</span><span class="token punctuation">,</span>
        <span class="token string">'HOST'</span><span class="token operator">:</span> <span class="token string">'****'</span><span class="token punctuation">,</span>
        <span class="token string">'PORT'</span><span class="token operator">:</span> <span class="token string">'3306'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ENGINE</code> 用于特定的数据库引擎的配置，一般选项如下</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>sqlite3
django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>postgresql
django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>mysql
django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>NAME</code>:要连接的数据库名称的配置<br><code>USER</code>:配置连接数据库的用户账号<br><code>PASSWORD</code>:配置连接数据库的登录密码<br><code>HOST</code>:配置数据库所在的主机IP地址<br> <code>PORT</code>:配置连接数据库的端口号<br><code>CHARSET</code>:配置连接数据库交互数据编码格式</p>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p><code>Django</code>项目中定义模型数据，其实就是定义class类型，通过类型创建的对象来封装管理数据，一定要在这里明确关联和对应关系</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">程序</th>
<th style="text-align:center">数据库</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>class</code>类型</td>
<td style="text-align:center"><code>table</code> 表格</td>
</tr>
<tr>
<td style="text-align:center"><code>attr</code>属性</td>
<td style="text-align:center"><code>field</code>字段</td>
</tr>
<tr>
<td style="text-align:center"><code>object</code>对象</td>
<td style="text-align:center"><code>record</code>记录</td>
</tr>
</tbody>
</table>
</div>
<p>模型中的属性与数据库中的字段对应</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">对象中的属性类型定义</th>
<th style="text-align:center">表中的字段类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>AutoField()</code></td>
<td style="text-align:center"><code>auto_increment</code> 自动增长</td>
</tr>
<tr>
<td style="text-align:center"><code>BOoleanField()</code></td>
<td style="text-align:center"><code>bool</code> 布尔类型</td>
</tr>
<tr>
<td style="text-align:center"><code>NullNooleanField()</code></td>
<td style="text-align:center"><code>bool or null</code> 扩展布尔类型</td>
</tr>
<tr>
<td style="text-align:center"><code>CharField()</code></td>
<td style="text-align:center"><code>varchar</code> 字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>TextField()</code></td>
<td style="text-align:center"><code>text</code> 长文本</td>
</tr>
<tr>
<td style="text-align:center"><code>IntegerField()</code></td>
<td style="text-align:center"><code>int</code> 整数</td>
</tr>
<tr>
<td style="text-align:center"><code>DecimalField()</code></td>
<td style="text-align:center"><code>double</code> 双精度</td>
</tr>
<tr>
<td style="text-align:center"><code>FloatField()</code></td>
<td style="text-align:center"><code>float</code>  单精度</td>
</tr>
<tr>
<td style="text-align:center"><code>DateField()</code></td>
<td style="text-align:center"><code>date</code> 日期</td>
</tr>
<tr>
<td style="text-align:center"><code>TimeField()</code></td>
<td style="text-align:center"><code>time</code> 时间</td>
</tr>
<tr>
<td style="text-align:center"><code>DateTimeField()</code></td>
<td style="text-align:center"><code>datetime</code> 日期时间</td>
</tr>
<tr>
<td style="text-align:center"><code>FileField()</code></td>
<td style="text-align:center"><code>blob</code> 二进制</td>
</tr>
<tr>
<td style="text-align:center"><code>ImageField()</code></td>
<td style="text-align:center"><code>bolb</code>二进制</td>
</tr>
</tbody>
</table>
</div>
<p>每个字段定义时，都有自己的一些特殊选项指定</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>null</code></td>
<td style="text-align:center">如果为<code>True</code>，将NULL空值存储到数据库中，默认<code>False</code></td>
</tr>
<tr>
<td style="text-align:center"><code>blank</code></td>
<td style="text-align:center">如果为<code>True</code>，表示该字段允许存储空值，默认<code>False</code></td>
</tr>
<tr>
<td style="text-align:center"><code>db_column</code></td>
<td style="text-align:center">字段名称，如果不指定，直接使用类型属性的名称作为字段名称</td>
</tr>
<tr>
<td style="text-align:center"><code>db_index</code></td>
<td style="text-align:center">如果设置为<code>True</code>，表示个当前字段添加索引支持</td>
</tr>
<tr>
<td style="text-align:center"><code>default</code></td>
<td style="text-align:center">给字段默认值</td>
</tr>
<tr>
<td style="text-align:center"><code>primary_key</code></td>
<td style="text-align:center">是否设置当前字段为主键</td>
</tr>
<tr>
<td style="text-align:center"><code>unique</code></td>
<td style="text-align:center">如果为<code>True</code>，该字段储存的值必须时唯一的</td>
</tr>
</tbody>
</table>
</div>
<p>在大部分项目汇总，还会涉及到多表关联</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ForeignKey</td>
<td style="text-align:center">一对一关联，该字段定义在多个一方</td>
</tr>
<tr>
<td style="text-align:center">ManToManyField</td>
<td style="text-align:center">多对多关联关系，该字段两方都需要定义</td>
</tr>
<tr>
<td style="text-align:center">OneToOneField</td>
<td style="text-align:center">一对一关联，该字段可以定义在任意一方</td>
</tr>
</tbody>
</table>
</div>
<p>项目结构</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">├── backend
│   ├── __init__<span class="token punctuation">.</span>py
│   ├── admin<span class="token punctuation">.</span>py
│   ├── migrations
│   │   └── __init__<span class="token punctuation">.</span>py
│   ├── models<span class="token punctuation">.</span>py
│   ├── tests<span class="token punctuation">.</span>py
│   └── views<span class="token punctuation">.</span>py
├── manage<span class="token punctuation">.</span>py
└── ulb_manager
    ├── __init__<span class="token punctuation">.</span>py
    ├── settings<span class="token punctuation">.</span>py
    ├── urls<span class="token punctuation">.</span>py
    └── wsgi<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在根目录的<code>setting.py</code>中添加</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">INSTALLED_APPS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">///...</span>
    <span class="token string">'backend'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>backend/models.py</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models


# Create your models here<span class="token punctuation">.</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
    id <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">AutoField</span><span class="token punctuation">(</span>primary_key <span class="token operator">=</span> True<span class="token punctuation">)</span>
    account <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">CharField</span><span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">CharField</span><span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>

    def <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span> # 表中每条数据显示账号
        <span class="token keyword">return</span> u<span class="token string">'account: %s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>account


<span class="token keyword">class</span> <span class="token class-name">Class</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
    id <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">AutoField</span><span class="token punctuation">(</span>primary_key <span class="token operator">=</span> True<span class="token punctuation">)</span>
    name <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">CharField</span><span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>model</code>中定义两个类，代表两个表<code>User，Class</code>，</p>
<p>创建两个表</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py makemigrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同步到<code>mysql</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这时在<code>mysql</code>中可以看到新增加的表</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mysql<span class="token operator">&gt;</span> show tables<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token operator">|</span> Tables_in_test             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
<span class="token operator">|</span> auth_group                 <span class="token operator">|</span>
<span class="token operator">|</span> auth_group_permissions     <span class="token operator">|</span>
<span class="token operator">|</span> auth_permission            <span class="token operator">|</span>
<span class="token operator">|</span> auth_user                  <span class="token operator">|</span>
<span class="token operator">|</span> auth_user_groups           <span class="token operator">|</span>
<span class="token operator">|</span> auth_user_user_permissions <span class="token operator">|</span>
<span class="token operator">|</span> backend_class              <span class="token operator">|</span>
<span class="token operator">|</span> backend_user               <span class="token operator">|</span>
<span class="token operator">|</span> django_admin_log           <span class="token operator">|</span>
<span class="token operator">|</span> django_content_type        <span class="token operator">|</span>
<span class="token operator">|</span> django_migrations          <span class="token operator">|</span>
<span class="token operator">|</span> django_session             <span class="token operator">|</span>
<span class="token operator">|</span> user                       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="后台显示数据库"><a href="#后台显示数据库" class="headerlink" title="后台显示数据库"></a>后台显示数据库</h3><p>在<code>backend/admin.py</code>中注册模型</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># Register your models here.</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>User<span class="token punctuation">)</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行<code>django</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py runserver <span class="token number">8888</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>http://127.0.0.1:8888/admin/</code>中可以看到后台登录界面</p>
<h4 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>账号和密码都是<code>admin</code>，其他可以随便填</p>
<p>这时可以通过后台登录界面进入后台看到数据库数据</p>
<h3 id="修改-语言和时区"><a href="#修改-语言和时区" class="headerlink" title="修改 语言和时区"></a>修改 语言和时区</h3><p>在<code>根目录/setting.py</code>中修改 语言和时区</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">LANGUAGE_CODE</span> <span class="token operator">=</span> <span class="token string">'zh-Hans'</span>

<span class="token constant">TIME_ZONE</span> <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>后台界面可以显示中文，通过增加可以添加数据</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>连接MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>axios与django通信</title>
    <url>//5218864/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="axios实例"><a href="#axios实例" class="headerlink" title="axios实例"></a>axios实例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>
<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//实例，配置一些基础信息</span>
    baseURL<span class="token operator">:</span> <span class="token string">'http://192.168.0.100:8888/api/'</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>
    withCredentials<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//请求拦截器</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// post的数据要经过处理</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//接收拦截器</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="具体get与post"><a href="#具体get与post" class="headerlink" title="具体get与post"></a>具体get与post</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./request'</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getBooks</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">'books'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">postLogin</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token string">'books'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> config<span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span> <span class="token comment">// 发送数据的类型</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;form&gt;
      &lt;input type="text" placeholder="login" v-model="name" /&gt;
      &lt;input type="text" placeholder="pwd" v-model="pwd" /&gt;
      &lt;input type="submit" value="登录" @click="submitForm" /&gt;
    &lt;/form&gt;
    &lt;!-- &lt;button @click="submitForm"&gt;submit&lt;/button&gt; --&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { getBooks } from 'network/home'
import { postLogin } from 'network/home'

export default {
  el: '#app',
  data () {
    return {
      name: "1234",
      pwd: '1234',
    }
  },
  created () {
    getBooks().then(res =&gt; {
      console.log(res)
      this.content = res.data
    })
  },
  methods: {
    submitForm (event) {
      console.log(this.name)
      let formData = new FormData()
      formData.append('name', this.name)
      formData.append('pwd', this.pwd)
      postLogin(formData).then(res =&gt; {
        console.log(res)
      })
    }
  }
}
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="django配置"><a href="#django配置" class="headerlink" title="django配置"></a>django配置</h3><pre class="line-numbers language-none"><code class="language-none">MIDDLEWARE = [
     'django.middleware.csrf.CsrfViewMiddleware', # 注释掉csrf
]
APPEND_SLASH=False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Axios通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Django + Vue 快速构建项目</title>
    <url>//b2788495/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用Vue-Django搭建项目"><a href="#使用Vue-Django搭建项目" class="headerlink" title="使用Vue+Django搭建项目"></a>使用<code>Vue+Django</code>搭建项目</h2><p><a href="https://zhuanlan.zhihu.com/p/25080236">参考</a></p>
<h3 id="构建Django项目"><a href="#构建Django项目" class="headerlink" title="构建Django项目"></a>构建<code>Django</code>项目</h3><p><em>命令：</em></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">django-admin startproject ulb_manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>结构：</em></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">.
├── manage.py
└── ulb_manager
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="进入项目根目录，创建一个-app-作为项目后端"><a href="#进入项目根目录，创建一个-app-作为项目后端" class="headerlink" title="进入项目根目录，创建一个 app 作为项目后端"></a>进入项目根目录，创建一个 <code>app</code> 作为项目后端</h2><p><em>命令：</em></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">cd ulb_manager
python manage.py startapp backend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>即：<code>app</code> 名叫做 <code>backend</code></p>
<p><em>结构：</em></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">.
├── backend
│   ├── __init__.py
│   ├── admin.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
└── ulb_manager
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="将Vue打包的dist文件放入url-manager"><a href="#将Vue打包的dist文件放入url-manager" class="headerlink" title="将Vue打包的dist文件放入url_manager"></a>将<code>Vue</code>打包的<code>dist</code>文件放入<code>url_manager</code></h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">.
├─backend
│  ├─migrations
│  └─__pycache__
├─vue-fonter
│  └─dist
│      └─static
│          ├─css
│          ├─fonts
│          ├─img
│          └─js
└─ulb_manager
    └─__pycache__
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Vue-CLI3.x</code>在打包时不会生成<code>static</code>文件</p>
<p>使用<code>vue ui</code>，导入<code>Vue</code>项目，在配置/基础配置/ 修改资源目录 为<code>static</code></p>
<p>这样在进行打包就会生成<code>static</code>文件</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1glz7x4dxvmj31bz0ovn01.jpg" alt=""></p>
<h3 id="使用Django的通用视图-TemplateView"><a href="#使用Django的通用视图-TemplateView" class="headerlink" title="使用Django的通用视图 TemplateView"></a>使用<code>Django</code>的通用视图 <code>TemplateView</code></h3><p>找到项目根<code>urls.py(ulb_manager/urls.py)</code>，使用通用视图创建最简单的模板控制器，访问 <code>『/』</code>时直接返回<code>index.html</code></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">urlpatterns = [
    path('admin/', admin.site.urls),
    path('', TemplateView.as_view(template_name="index.html")),
    path('api/', include('backend.urls'))
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置Django项目的模板搜索路径"><a href="#配置Django项目的模板搜索路径" class="headerlink" title="配置Django项目的模板搜索路径"></a>配置<code>Django</code>项目的模板搜索路径</h3><p>上一步使用了<code>Django</code>的模板系统，所以需要配置一下模板使<code>Django</code>知道从哪里找到<code>index.html</code></p>
<p>打开 <code>settings.py (ulb_manager/settings.py)</code>，找到<code>TEMPLATES</code>配置项，修改如下:</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        **'DIRS': ['vue-fonter/dist']**,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意这里的<code>vue-fonter</code>是<code>VueJS</code>项目目录，<code>dist</code>则是运行 <code>npm run build</code>构建出的<code>index.html</code>与静态文件夹<code>static</code> 的父级目录</p>
<p>这时启动<code>Django</code>项目，访问<code>/</code>则可以访问<code>index.html</code>，但是还有问题，静态文件都是404错误，下一步我们解决这个问题</p>
<h3 id="配置静态文件搜索路径"><a href="#配置静态文件搜索路径" class="headerlink" title="配置静态文件搜索路径"></a>配置静态文件搜索路径</h3><p>打开 <code>settings.py (ulb_manager/settings.py</code>)，找到<code>STATICFILES_DIRS</code> 配置项，配置如下:</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text"># Add for vuejs
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "vue-fonter/dist/static"),
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样<code>Django</code>不仅可以将<code>/</code> 映射到<code>index.html</code>，而且还可以顺利找到静态文件</p>
<h3 id="backend-配置"><a href="#backend-配置" class="headerlink" title="backend 配置"></a><code>backend</code> 配置</h3><p>在<code>backend</code>中创建<code>urls</code></p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">'books/'</span><span class="token punctuation">,</span> view <span class="token operator">=</span> views<span class="token punctuation">.</span>books<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"books"</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>backend/views.py</code>中</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render
<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span>  JsonResponse

<span class="token comment"># Create your views here.</span>

<span class="token keyword">def</span> <span class="token function">books</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    books <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">89</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>books<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时访问<code>/</code>我们可以看到使用<code>Django</code>作为后端的<code>VueJS</code>前端,访问<code>/api/books</code>我们可以看到<code>json</code>数据</p>
<h3 id="解决开发时的跨域问题"><a href="#解决开发时的跨域问题" class="headerlink" title="解决开发时的跨域问题"></a>解决开发时的跨域问题</h3><p>使用<code>corsheaders</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">pip install corsheaders<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>setting.py</code>中加入</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">INSTALLED_APPS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">//...</span>
    <span class="token string">'corsheaders'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token constant">MIDDLEWARE</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">//......</span>
    <span class="token string">'corsheaders.middleware.CorsMiddleware'</span><span class="token punctuation">,</span>  # 添加cors，在第三行，位置不能改
    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token constant">CORS_ORIGIN_ALLOW_ALL</span> <span class="token operator">=</span> True
# 允许请求携带cookies
<span class="token constant">CORS_ALLOW_CREDENTIALS</span><span class="token operator">=</span> True <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是从网上找的解决方法，但是并没有解决问题，</p>
<p>先看一下同源的定义</p>
<pre class="line-numbers language-none"><code class="language-none">同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>vue</code>启动<code>server</code>是的<code>ip</code>是<code>192.168.0.100:8080</code>，<code>django</code>启动服务时的<code>ip</code>是<code>127.0.0.1:8000</code>，</p>
<p>试着修改了一下<code>django</code>的启动<code>ip</code></p>
<p>在<code>setting.py</code>中加入</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">ALLOWED_HOSTS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'192.168.0.100'</span><span class="token punctuation">,</span>
    <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>
    <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>
    <span class="token string">'localhost'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后启动</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">django <span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py runserver <span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.100</span><span class="token operator">:</span><span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后启动<code>vue</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这时不在出现跨域问题 </p>
<p>成功！</p>
<h4 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h4><p>利用<code>vscode</code> 写前端<code>vue</code>，<code>pycharm</code>写<code>django</code>后端 ，调试时<code>pycharm</code>打开<code>django</code>服务，<code>vscode</code> 打开<code>vue</code>，</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django+Vue+Nginx+uWSGI部署</title>
    <url>//1ae14b31/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Django-Vue-Nginx-uWSGI部署"><a href="#Django-Vue-Nginx-uWSGI部署" class="headerlink" title="Django+Vue+Nginx+uWSGI部署"></a><code>Django+Vue+Nginx+uWSGI</code>部署</h2><p><a href="https://blog.csdn.net/qq_41785581/article/details/102598073">参考</a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">ip<span class="token operator">:</span><span class="token number">123.56</span><span class="token number">.252</span><span class="token number">.111</span>
vue<span class="token operator">:</span> dist
django<span class="token operator">:</span> django_server

├── backend
│   ├── admin<span class="token punctuation">.</span>py
│   ├── apps<span class="token punctuation">.</span>py
│   ├── __init__<span class="token punctuation">.</span>py
│   ├── migrations
│   │   └── __init__<span class="token punctuation">.</span>py
│   ├── models<span class="token punctuation">.</span>py
│   ├── __pycache__
│   │   ├── __init__<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   │   ├── urls<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   │   └── views<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   ├── tests<span class="token punctuation">.</span>py
│   ├── urls<span class="token punctuation">.</span>py
│   └── views<span class="token punctuation">.</span>py
├── db<span class="token punctuation">.</span>sqlite3
├── element<span class="token operator">-</span>test
│   └── dist
│       ├── header<span class="token punctuation">.</span>ico
│       ├── index<span class="token punctuation">.</span>html
│       └── <span class="token keyword">static</span>
│           ├── css
│           ├── fonts
│           ├── img
│           └── js
├── manage<span class="token punctuation">.</span>py
├── media
├── mysite
│   ├── asgi<span class="token punctuation">.</span>py
│   ├── __init__<span class="token punctuation">.</span>py
│   ├── __pycache__
│   │   ├── __init__<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   │   ├── settings<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   │   ├── urls<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   │   └── wsgi<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">39.</span>pyc
│   ├── settings<span class="token punctuation">.</span>py
│   ├── urls<span class="token punctuation">.</span>py
│   └── wsgi<span class="token punctuation">.</span>py
├── <span class="token keyword">static</span>
│   ├── admin
│   ├── css
│   ├── fonts
│   ├── img
│   └── js
├── test<span class="token punctuation">.</span>py
├── uwsgi<span class="token punctuation">.</span>ini
├── uwsgi<span class="token punctuation">.</span>log
├── uwsgi_nginx<span class="token punctuation">.</span>sock
└── uwsgi<span class="token punctuation">.</span>pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>在<a href="http://www.orzff.cn/7dfc688d/">服务器配置</a>有详细介绍</p>
<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a><code>Django</code></h3><p>在<a href="http://www.orzff.cn/7dfc688d/">服务器配置</a>有详细介绍</p>
<h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a><code>uWSGI</code></h3><h4 id="安装uWSGI"><a href="#安装uWSGI" class="headerlink" title="安装uWSGI"></a>安装<code>uWSGI</code></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">pip install uwsgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="简单测试一下"><a href="#简单测试一下" class="headerlink" title="简单测试一下"></a>简单测试一下</h4><p>创建<code>test.py</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"># test<span class="token punctuation">.</span>py
def <span class="token function">application</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">start_response</span><span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>b<span class="token string">"Hello World"</span><span class="token punctuation">]</span> # python3
    #<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"Hello World"</span><span class="token punctuation">]</span> # python2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行 <code>uWSGI</code>:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">uwsgi <span class="token operator">--</span>http <span class="token operator">:</span><span class="token number">8000</span> <span class="token operator">--</span>wsgi<span class="token operator">-</span>file test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>选项的含义：</p>
<ul>
<li><code>http :8000</code> 使用<code>http</code> 协议，8000端口。</li>
<li><code>wsgi-file test.py</code> 使用<code>test.py</code> 作为与 <code>uWSGI</code>交互的文件。</li>
</ul>
<p>访问 <code>123.56.252.111:8000</code>，输出“Hello World”，说明该程序是这么工作的：</p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;
客户端 --http:8000--&gt; uWSGI
uWSGI --&gt; Python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="测试Django"><a href="#测试Django" class="headerlink" title="测试Django"></a>测试<code>Django</code></h3><h4 id="测试django"><a href="#测试django" class="headerlink" title="测试django"></a>测试<code>django</code></h4><p>在创建的<code>django</code>目录，执行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py runserver <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>先将<code>IP</code>设置下<code>ALLOWHOSTS</code>中</p>
<p>在<a href="http://www.orzff.cn/7dfc688d/">服务器配置</a>有详细介绍</p>
<p>在浏览器输入<code>123.56.255.111:8000</code>即出现<code>django</code>欢迎界面</p>
<h4 id="测试uWSGI"><a href="#测试uWSGI" class="headerlink" title="测试uWSGI"></a>测试<code>uWSGI</code></h4><pre class="line-numbers language-none"><code class="language-none">uwsgi --http :8000 --module mysite.wsgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在浏览器输入<code>123.56.255.111:8000</code>出现<code>Internal Server Error</code>属于正常现象，因为没有资源</p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;
客户端 --http:8000--&gt; uWSGI
uWSGI --&gt; Djano<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><code>Nginx</code></h3><p>安装<code>nginx</code>在<a href="http://www.orzff.cn/7dfc688d/">服务器配置</a>有详细介绍</p>
<h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动<code>nginx</code></h4><pre class="line-numbers language-none"><code class="language-none">#centos 7
systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在浏览器输入<code>123.56.255.111:80</code>出现<code>CenOS</code>或<code>Nginx</code>的欢迎界面</p>
<h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置<code>nginx</code></h4><p>开启这三个端口：</p>
<ul>
<li><code>80端口</code> 显示<code>Nginx</code>欢迎界面，测试<code>Nginx</code>是否能正常运行</li>
<li><code>8000端口</code> <code>Nginx</code>接收请求的端口，自行处理静态请求，动态请求则转发给<code>uWSGI</code>的8001端口处理</li>
<li><code>8001端口</code> <code>uWSGI</code>接收动态请求的端口，处理完毕后将处理结果发给<code>Nginx</code>的8000端口</li>
</ul>
<p>检查一下是否有<code>uwsgi_params</code>文件（后面的配置文件需要用到），它应该在<code>nginx</code>的目录里（<code>/etc/nginx/</code>），如果没有，可以<a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params">点击这里</a>下载。</p>
<p>创建<code>/etc/nginx/sites-available</code>的目录，在目录里创建<code>support_center_nginx.conf</code>配置文件进行配置：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"># support_center_nginx<span class="token punctuation">.</span>conf
# the upstream component nginx needs to connect to
upstream django <span class="token punctuation">{</span>
  server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8001</span><span class="token punctuation">;</span> # <span class="token keyword">for</span> a web port <span class="token function">socket</span> <span class="token punctuation">(</span>we'll use <span class="token keyword">this</span> first<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

# configuration <span class="token keyword">of</span> the server
server <span class="token punctuation">{</span>
      # the port your site will be served on
      listen      <span class="token number">8000</span><span class="token punctuation">;</span>
      # the domain name it will serve <span class="token keyword">for</span>
      server_name <span class="token number">123.56</span><span class="token number">.252</span><span class="token number">.111</span><span class="token punctuation">;</span> # substitute your machine's <span class="token constant">IP</span> address or <span class="token constant">FQDN</span>
      charset     utf<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>

      # max upload size
      client_max_body_size <span class="token number">75</span>M<span class="token punctuation">;</span>   # adjust to taste


     # Django media
      location <span class="token operator">/</span>media  <span class="token punctuation">{</span>
        alias <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span>media<span class="token punctuation">;</span> # your Django project's media files <span class="token operator">-</span> amend <span class="token keyword">as</span> required
      <span class="token punctuation">}</span>

      location <span class="token operator">/</span><span class="token keyword">static</span> <span class="token punctuation">{</span>
       alias <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span><span class="token keyword">static</span><span class="token punctuation">;</span> # your Django project's <span class="token keyword">static</span> files <span class="token operator">-</span> amend <span class="token keyword">as</span> required
      <span class="token punctuation">}</span>

       # Finally<span class="token punctuation">,</span> send all non<span class="token operator">-</span>media requests to the Django server<span class="token punctuation">.</span>
      location <span class="token operator">/</span> <span class="token punctuation">{</span>
       uwsgi_pass  django<span class="token punctuation">;</span>
       include     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>uwsgi_params<span class="token punctuation">;</span> # the uwsgi_params file you installed   
     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建一个软链接(<code>/etc/nginx/sites-enabled</code>)指向它：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">ln <span class="token operator">-</span>s <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>available <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>enabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>/etc/nginx/nginx.conf</code>中将该文件夹包含进去，使得<code>Nginx</code>启动时，能够将文件夹中配置的项目运行起来：<br><code>include /etc/nginx/sites-enabled/*.conf</code></p>
<p>注意，这个语句添加在<code>http</code>中，<code>server</code>外</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"> http <span class="token punctuation">{</span>
	server <span class="token punctuation">{</span>
         listen    <span class="token number">8888</span><span class="token punctuation">;</span>
        # listen       <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span> default_server<span class="token punctuation">;</span>
         server_name  _<span class="token punctuation">;</span>
        # root         <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>

         # Load configuration files <span class="token keyword">for</span> the <span class="token keyword">default</span> server block<span class="token punctuation">.</span>
         include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>d<span class="token comment">/*.conf;

         location / {
           root /root/mysite/element-test/dist;
           try_files $uri $uri/ @router;
           index index.html index.htm;
         }

         location @router{
           rewrite ^.*$ /index.html last;
         }

         error_page 404 /404.html;
         location = /404.html {
         }

         error_page 500 502 503 504 /50x.html;
         location = /50x.html {
         }
     }
     include /etc/nginx/sites-enabled/*.conf;
}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="处理静态文件"><a href="#处理静态文件" class="headerlink" title="处理静态文件"></a>处理静态文件</h4><p>运行<code>Nginx</code>之前，得先把<code>Django</code>的静态文件集中到一个文件夹中（该文件夹就是<code>STATIC_ROOT</code>的值）：<br>先向<code>settings.py</code>中添加：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">STATIC_ROOT <span class="token operator">=</span> <span class="token string">'/root/mysite/static'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，将静态资源集中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py collectstatic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="nginx测试"><a href="#nginx测试" class="headerlink" title="nginx测试"></a><code>nginx</code>测试</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>向<code>media</code>文件夹中放一张图<code>media.jpg</code>用于测试，</p>
<p><code>media</code>的位置在上面<code>support_center_nginx.conf</code>中的<code>location /media</code>的指定位置</p>
<p>在浏览器输入<code>123.56.255.111:8000/media/picture.png</code>出现一张图片</p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;
客户端 --http--&gt; Nginx
Nginx --uwsgi--&gt; uWSGI
uWSGI --&gt; Python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用-ini对uWSGI进行设置"><a href="#使用-ini对uWSGI进行设置" class="headerlink" title="使用.ini对uWSGI进行设置"></a>使用<code>.ini</code>对<code>uWSGI</code>进行设置</h4><p>创建<code>uwsgi.ini</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>uwsgi<span class="token punctuation">]</span>
#  项目路径 
chdir <span class="token operator">=</span> <span class="token operator">/</span>root<span class="token operator">/</span>mysite

#django的wsgi文件路径
wsgi<span class="token operator">-</span>file <span class="token operator">=</span> <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span>wsgi<span class="token punctuation">.</span>py

# 使用mmcsite<span class="token punctuation">.</span>wsgi模块
module <span class="token operator">=</span> mysite<span class="token punctuation">.</span>wsgi

# 虚拟环境的路径
home <span class="token operator">=</span> <span class="token operator">/</span>root<span class="token operator">/</span>Envs<span class="token operator">/</span>Django

# 启用master
master <span class="token operator">=</span> <span class="token boolean">true</span>

# 启动五个进程
processes <span class="token operator">=</span> <span class="token number">10</span>

# 每个进程启动<span class="token number">30</span>个线程
threads <span class="token operator">=</span> <span class="token number">30</span>

# 指定socket监听的地址和端口
socket <span class="token operator">=</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">8001</span>

# socket权限
chmod<span class="token operator">-</span>socket <span class="token operator">=</span> <span class="token number">666</span>

# 结束后清理环境
vacuum <span class="token operator">=</span> <span class="token boolean">true</span>

# 日志文件
daemonize <span class="token operator">=</span> <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span>uwsgi<span class="token punctuation">.</span>log

# pid文件
pidfile <span class="token operator">=</span> <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span>uwsgi<span class="token punctuation">.</span>pid

# 允许用内嵌的语言启动线程，这将允许你在app程序中产生一个子线程
enable<span class="token operator">-</span>threads <span class="token operator">=</span> <span class="token boolean">true</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后，启动 <code>uWSGI</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uwsgi --ini uwsgi.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="转发80端口"><a href="#转发80端口" class="headerlink" title="转发80端口"></a>转发80端口</h3><p>将<code>/etc/nginx/sites-available/support_center_nginx.conf</code>重命名<code>/etc/nginx/sites-available/nginx_backend.conf</code></p>
<pre class="line-numbers language-ls" data-language="ls"><code class="language-ls">cd /etc/nginx/sites-available/
mv support_center_nginx.conf nginx_backend.conf`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>新建一个文件<code>/etc/nginx/sites-available/nginx_fonter.conf</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">vim nginx_fonter<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在文件中加入</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">server <span class="token punctuation">{</span>
    # 监听端口
   listen <span class="token number">8888</span><span class="token punctuation">;</span>

    #ip
   server_name <span class="token number">123.56</span><span class="token number">.252</span><span class="token number">.111</span><span class="token punctuation">;</span>

    # 编码规则
   charset utf<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>

   client_max_body_size <span class="token number">75</span>M<span class="token punctuation">;</span>
    
# 主页面内容，
# root：指向vue的dist文件
# try_files：使用vue内部的路由转发
# index：
   location <span class="token operator">/</span> <span class="token punctuation">{</span>
     root <span class="token operator">/</span>root<span class="token operator">/</span>mysite<span class="token operator">/</span>element<span class="token operator">-</span>test<span class="token operator">/</span>dist<span class="token punctuation">;</span>
     try_files $uri $uri<span class="token operator">/</span> @router<span class="token punctuation">;</span>   
     index index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   location @router <span class="token punctuation">{</span>
     rewrite <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">*</span>$ <span class="token operator">/</span>index<span class="token punctuation">.</span>html last<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   error_page <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">;</span>
   location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">{</span>
   <span class="token punctuation">}</span>

   error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
   location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">{</span>
   <span class="token punctuation">}</span>

 <span class="token punctuation">}</span>
          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>/etc/nginx/nginx.conf</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"> http <span class="token punctuation">{</span>
	server <span class="token punctuation">{</span>
         listen    <span class="token number">8888</span><span class="token punctuation">;</span>
        # listen       <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span> default_server<span class="token punctuation">;</span>
         server_name  _<span class="token punctuation">;</span>
        # root         <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>

         # Load configuration files <span class="token keyword">for</span> the <span class="token keyword">default</span> server block<span class="token punctuation">.</span>
         include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>d<span class="token comment">/*.conf;

         location / {
           proxy_set_header Host $host:$server_port;
           proxy_set_header Host $http_host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header REMOTE-HOST $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header Connection "";
           proxy_set_header X-Nginx-Proxy true;
           proxy_pass http://123.56.252.111:8888/;
         }

         location @router{
           rewrite ^.*$ /index.html last;
         }

         error_page 404 /404.html;
         location = /404.html {
         }

         error_page 500 502 503 504 /50x.html;
         location = /50x.html {
         }
     }
     include /etc/nginx/sites-enabled/*.conf;
}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单说下这样做的目的：</p>
<p>客户的所有请求都是通<code>80</code>端口，与默认端口通信是不需要加<code>:80</code>的，<code>nginx</code>从<code>80</code>端口接收到浏览器的请求，转发到<code>8888</code>端口，<code>8888</code>接收到在<code>/etc/nginx/sites-available/fonter.conf</code>文件处理</p>
<p>后端界面客户不会主动访问所以不用转发来隐藏端口，</p>
<p><code>/etc/nginx/sites-available/fonter.conf</code> 和 <code>/etc/nginx/sites-available/nginx_backend.conf</code>，都在 <code>/etc/nginx/sites-available</code>中，通过软连接<code>/etc/nginx/sites-enabled</code>在<code>/etc/nginx/nginx.conf</code>中的<code>include /etc/nginx/sites-enabled/*.conf;</code>导入<code>nginx.conf</code>文件,与主配置文件分离</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器配置</title>
    <url>//7dfc688d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="centos安装python3"><a href="#centos安装python3" class="headerlink" title="centos安装python3"></a><code>centos</code>安装<code>python3</code></h2><h2 id="参考-centos下安装python3详细教程"><a href="#参考-centos下安装python3详细教程" class="headerlink" title="参考 centos下安装python3详细教程"></a>参考 <a href="https://blog.csdn.net/t8116189520/article/details/81976755">centos下安装python3详细教程</a></h2><h3 id="1-python位置"><a href="#1-python位置" class="headerlink" title="1.python位置"></a>1.python位置</h3><p>使用<code>whereis python</code>得到<code>python</code>位置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>root@iz2ze3g6pyat2fqpma7zdvz django_test<span class="token punctuation">]</span># whereis python
python<span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python<span class="token punctuation">.</span>config <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python<span class="token punctuation">.</span>bak <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">-</span>config <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span> <span class="token operator">/</span>etc<span class="token operator">/</span>python <span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>man<span class="token operator">/</span>man1<span class="token operator">/</span>python<span class="token punctuation">.</span><span class="token number">1.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>得到<code>python</code>的位置在 <code>/usr/bin</code>目录</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>root@iz2ze3g6pyat2fqpma7zdvz <span class="token operator">~</span><span class="token punctuation">]</span># cd <span class="token operator">/</span>usr<span class="token operator">/</span>bin
<span class="token punctuation">[</span>root@iz2ze3g6pyat2fqpma7zdvz bin<span class="token punctuation">]</span># ll python<span class="token operator">*</span>
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">32</span> Dec <span class="token number">22</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">40</span> python <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">9</span>
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">9</span> Dec <span class="token number">22</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">30</span> python2 <span class="token operator">-</span><span class="token operator">&gt;</span> python2<span class="token punctuation">.</span><span class="token number">7</span>
<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> root root <span class="token number">7144</span> Nov <span class="token number">17</span> <span class="token number">06</span><span class="token operator">:</span><span class="token number">23</span> python2<span class="token punctuation">.</span><span class="token number">7</span>
<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> root root <span class="token number">1835</span> Nov <span class="token number">17</span> <span class="token number">06</span><span class="token operator">:</span><span class="token number">23</span> python2<span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">-</span>config
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">16</span> Dec <span class="token number">22</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">30</span> python2<span class="token operator">-</span>config <span class="token operator">-</span><span class="token operator">&gt;</span> python2<span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">-</span>config
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">32</span> Dec <span class="token number">23</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">43</span> python3 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">9</span>
lrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">7</span> Dec <span class="token number">22</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">30</span> python<span class="token punctuation">.</span>bak <span class="token operator">-</span><span class="token operator">&gt;</span> python2
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">39</span> Dec <span class="token number">22</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">36</span> python<span class="token punctuation">.</span>config <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">-</span>config
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">14</span> Dec <span class="token number">22</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">30</span> python<span class="token operator">-</span>config<span class="token punctuation">.</span>bak <span class="token operator">-</span><span class="token operator">&gt;</span> python2<span class="token operator">-</span>config

python_django<span class="token operator">:</span>
total <span class="token number">20</span>
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">2</span> root root <span class="token number">4096</span> Dec <span class="token number">23</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">33</span> bin
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">2</span> root root <span class="token number">4096</span> Dec <span class="token number">23</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">33</span> include
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root <span class="token number">4096</span> Dec <span class="token number">23</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">33</span> lib
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root <span class="token number">4096</span> Dec <span class="token number">23</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">33</span> lib64
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> root root  <span class="token number">201</span> Dec <span class="token number">23</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">33</span> pyvenv<span class="token punctuation">.</span>cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入<code>/usr/bin</code>目录使用<code>ll python*</code>我们可以得到<code>python</code>的各种版本</p>
<p><code>-&gt;</code>是软连接，意味这个文件是后面文件的软链接，这个<code>python</code>也可以看成命令</p>
<h3 id="2-python3的依赖"><a href="#2-python3的依赖" class="headerlink" title="2 python3的依赖"></a>2 <code>python3</code>的依赖</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">yum install zlib<span class="token operator">-</span>devel bzip2<span class="token operator">-</span>devel openssl<span class="token operator">-</span>devel ncurses<span class="token operator">-</span>devel sqlite<span class="token operator">-</span>devel readline<span class="token operator">-</span>devel tk<span class="token operator">-</span>devel gcc make <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-安装pip"><a href="#3-安装pip" class="headerlink" title="3 安装pip"></a>3 安装<code>pip</code></h3><p>centos7没有安装pip</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">#运行这个命令添加epel扩展源
yum <span class="token operator">-</span>y install epel<span class="token operator">-</span>release
 
#安装pip
yum install python<span class="token operator">-</span>pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-用pip安装wget"><a href="#4-用pip安装wget" class="headerlink" title="4 用pip安装wget"></a>4 用<code>pip</code>安装<code>wget</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">pip install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="5-用wget下载python3"><a href="#5-用wget下载python3" class="headerlink" title="5 用wget下载python3"></a>5 用<code>wget</code>下载<code>python3</code></h3><p>在<a href="https://www.python.org/downloads/source/">官网</a>找到想要的版本链接</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span>ftp<span class="token operator">/</span>python<span class="token operator">/</span><span class="token number">3.6</span><span class="token number">.4</span><span class="token operator">/</span>Python<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.4</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="6-编译python3源码包"><a href="#6-编译python3源码包" class="headerlink" title="6 编译python3源码包"></a>6 编译<code>python3</code>源码包</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">#解压
xz <span class="token operator">-</span>d Python<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.4</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>xz
tar <span class="token operator">-</span>xf Python<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.4</span><span class="token punctuation">.</span>tar
#进入解压后的目录，依次执行下面命令进行手动编译
cd Python<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.4</span>
<span class="token punctuation">.</span><span class="token operator">/</span>configure prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3
make <span class="token operator">&amp;&amp;</span> make install
# 如果出现can't decompress data<span class="token punctuation">;</span> zlib not available这个错误，则需要安装相关库
#安装依赖zlib、zlib<span class="token operator">-</span>devel
yum install zlib zlib
yum install zlib zlib<span class="token operator">-</span>devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-添加软连接"><a href="#7-添加软连接" class="headerlink" title="7 添加软连接"></a>7 添加软连接</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">#将原来的链接备份
mv <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python<span class="token punctuation">.</span>bak
 
#添加python3的软链接
ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python
 
#测试是否安装成功了
python <span class="token operator">-</span><span class="token constant">V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果本身没有python3的软链接，可以再</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>python3<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="8-更改yum配置"><a href="#8-更改yum配置" class="headerlink" title="8 更改yum配置"></a>8 更改<code>yum</code>配置</h3><p>因为<code>yum</code>使用<code>python2</code>，所以需要更改一个<code>yum</code>的配置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">vi <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>yum
把#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python修改为#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python2
 
vi <span class="token operator">/</span>usr<span class="token operator">/</span>libexec<span class="token operator">/</span>urlgrabber<span class="token operator">-</span>ext<span class="token operator">-</span>down
把#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python 修改为#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="virtualenv和virtualenvwrapper"><a href="#virtualenv和virtualenvwrapper" class="headerlink" title="virtualenv和virtualenvwrapper"></a><code>virtualenv</code>和<code>virtualenvwrapper</code></h2><p><code>python</code>虚拟环境</p>
<p>简单点说<code>python</code>的虚拟环境就是给每个项目一个独立的<code>python</code>配置，各个项目之间的配置不影响，</p>
<h3 id="1-下载virtualenv"><a href="#1-下载virtualenv" class="headerlink" title="1 下载virtualenv"></a>1 下载<code>virtualenv</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">pip install virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2-创建新项目"><a href="#2-创建新项目" class="headerlink" title="2 创建新项目"></a>2 创建新项目</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">virtualenv env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-使用虚拟环境"><a href="#3-使用虚拟环境" class="headerlink" title="3 使用虚拟环境"></a>3 使用虚拟环境</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">source env<span class="token operator">/</span>bin<span class="token operator">/</span>activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-退出虚拟环境"><a href="#4-退出虚拟环境" class="headerlink" title="4 退出虚拟环境"></a>4 退出虚拟环境</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="5-virtualenvwrapper安装"><a href="#5-virtualenvwrapper安装" class="headerlink" title="5 virtualenvwrapper安装"></a>5 <code>virtualenvwrapper</code>安装</h3><p><code>virtualenvwrapper</code> 可以对虚拟环境进行集中管理</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">pip install virtualenvwrapper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="6-添加-bashrc"><a href="#6-添加-bashrc" class="headerlink" title="6 添加~/.bashrc"></a>6 添加<code>~/.bashrc</code></h3><p>在<code>~/.bashrc</code>添加</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token constant">WORKON_HOME</span><span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>Envs
source <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>virtualenvwrapper<span class="token punctuation">.</span>sh　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>读入配置文件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc　　　　#读入配置文件，立即生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="7-virtualenvwrapper基本使用"><a href="#7-virtualenvwrapper基本使用" class="headerlink" title="7 virtualenvwrapper基本使用"></a>7 <code>virtualenvwrapper</code>基本使用</h3><ul>
<li>创建虚拟环境 <code>mkvirtualenv</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mkvirtualenv venv　　<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>　这样会在<code>WORKON_HOME</code>变量指定的目录下新建名为<code>venv</code>的虚拟环境。</p>
<ul>
<li><p>指定python版本</p>
<p><code>--python</code>指定<code>python</code>解释器</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mkvirtualenv --python=/usr/local/python3.5.3/bin/python venv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看当前虚拟环境目录</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">workon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>切换到虚拟环境</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">workon xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>退出虚拟环境</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除虚拟环境</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">rmvirtualenv xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="8-出错处理"><a href="#8-出错处理" class="headerlink" title="8 出错处理"></a>8 出错处理</h3><p>出现 <code>ModuleNotFoundError: No module named '_ctypes'</code></p>
<ul>
<li>安装<code>libffi-devel</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">yum install libffi<span class="token operator">-</span>devel <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>重装<code>python</code></li>
<li>使用<code>make &amp;&amp; make install</code></li>
</ul>
<h2 id="django"><a href="#django" class="headerlink" title="django"></a><code>django</code></h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>使用<code>pip install django</code></p>
<h3 id="2-创建django项目"><a href="#2-创建django项目" class="headerlink" title="2 创建django项目"></a>2 创建django项目</h3><p><code>django-admin startproject xxx</code></p>
<h3 id="3-启动django"><a href="#3-启动django" class="headerlink" title="3 启动django"></a>3 启动django</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">python manage<span class="token punctuation">.</span>py runserver <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4 配置文件"></a>4 配置文件</h3><p>进入setting.py文件</p>
<p>在allowHost中添加自己的ip</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">ALLOWED_HOSTS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token string">'123.56.252.111'</span><span class="token punctuation">,</span>
   <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  <span class="token string">'0.0.0.0:8000'</span><span class="token punctuation">,</span>                                                                   		<span class="token string">'127.0.0.1'</span>
     <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样在运行后就可以用<code>http://123.56.252.111:8000/</code>来访问</p>
<h3 id="5-报错处理"><a href="#5-报错处理" class="headerlink" title="5 报错处理"></a>5 报错处理</h3><p><a href="https://blog.csdn.net/weixin_44110998/article/details/103499213">参考</a></p>
<p>出现</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ImproperlyConfigured<span class="token operator">:</span> SQLite <span class="token number">3.8</span><span class="token number">.3</span> or later is <span class="token function">required</span> <span class="token punctuation">(</span>found <span class="token number">3.7</span><span class="token number">.17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>在<a href="https://www.sqlite.org/download.html">官网</a>找到想要版本的链接</p>
</li>
<li><p>使用<code>wget</code>下载</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">#链接最好重新获取，否则可能不是最新版本
wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token number">2019</span><span class="token operator">/</span>sqlite<span class="token operator">-</span>autoconf<span class="token operator">-</span><span class="token number">3300100.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>解压安装</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># tar zxvf sqlite<span class="token operator">-</span>autoconf<span class="token operator">-</span><span class="token number">3300100.</span>tar<span class="token punctuation">.</span>gz
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># cd sqlite<span class="token operator">-</span>autoconf<span class="token operator">-</span><span class="token number">3300100</span><span class="token operator">/</span>
<span class="token punctuation">[</span>root@localhost sqlite<span class="token operator">-</span>autoconf<span class="token operator">-</span><span class="token number">3300100</span><span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>configure
<span class="token punctuation">[</span>root@localhost sqlite<span class="token operator">-</span>autoconf<span class="token operator">-</span><span class="token number">3300100</span><span class="token punctuation">]</span># make <span class="token operator">&amp;</span> make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>查看版本</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">#检查新安装的sqlite3版本
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3 <span class="token operator">--</span>version
<span class="token number">3.30</span><span class="token number">.1</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">45</span> <span class="token number">18</span>db032d058f1436ce3dea84081f4ee5a0f2259ad97301d43c426bc7f3df1b0b

#检查旧的sqlite3版本
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3 <span class="token operator">--</span>version
<span class="token number">3.7</span><span class="token number">.17</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">22</span> <span class="token number">118</span>a3b35693b134d56ebd780123b7fd6f1497668

# 把旧的sqlite3改个名字
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># mv <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3  <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3_old

# 设置软链接
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3 <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sqlite3

#查看sqlite3版本
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># sqlite3 <span class="token operator">--</span>version
<span class="token number">3.30</span><span class="token number">.1</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">45</span> <span class="token number">18</span>db032d058f1436ce3dea84081f4ee5a0f2259ad97301d43c426bc7f3df1b0b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>添加到<code>bashrc</code>文件</li>
</ul>
<p>在<code>~/.bashrc</code>中添加</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token constant">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"/usr/local/lib"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>检查<code>sqlite3</code>版本</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># python3
Python <span class="token number">3.6</span><span class="token number">.5</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> Jul  <span class="token number">9</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">)</span> 
<span class="token punctuation">[</span><span class="token constant">GCC</span> <span class="token number">4.8</span><span class="token number">.5</span> <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span><span class="token number">.5</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on linux
Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;&gt;</span> <span class="token keyword">import</span> sqlite3
<span class="token operator">&gt;&gt;&gt;</span> sqlite3<span class="token punctuation">.</span>sqlite_version
<span class="token string">'3.30.1'</span>
<span class="token operator">&gt;&gt;&gt;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span># <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a><code>nginx</code></h2><p><a href="https://www.cnblogs.com/huiyi0521/p/10253341.html">参考</a></p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><p>添加Nginx 存储库</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo yum <span class="token operator">-</span>y install epel<span class="token operator">-</span>release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装<code>nginx</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo yum <span class="token operator">-</span>y install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2 启动"></a>2 启动</h3><p>启动nginx</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-防火墙"><a href="#3-防火墙" class="headerlink" title="3 防火墙"></a>3 防火墙</h3><p>允许http通信</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>permanent <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>service<span class="token operator">=</span>http<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>允许https通信</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>permanent <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>service<span class="token operator">=</span>https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启防火墙 </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h3><p>在浏览器输入地址</p>
<h3 id="5-卸载"><a href="#5-卸载" class="headerlink" title="5 卸载"></a>5 卸载</h3><p>停止nginx</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">service nginx stop
<span class="token comment">// centos 7</span>
sysyemcyl stop nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>删除自启动</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">chkconfig nginx off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从源头删除nginx</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">rm <span class="token operator">-</span>rf <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx
rm <span class="token operator">-</span>rf <span class="token operator">/</span>etc<span class="token operator">/</span>nginx
rm <span class="token operator">-</span>rf <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用yum清理</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">yum remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改root-后面的名字"><a href="#修改root-后面的名字" class="headerlink" title="修改root@后面的名字"></a>修改<code>root@</code>后面的名字</h2><p><code>centos7</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">hostnamectl set<span class="token operator">-</span>hostname dhl #
hostname #查看
vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts # 编辑hosts文件，给<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>添加hostname

<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>   localhost localhost<span class="token punctuation">.</span>localdomain localhost4 localhost4<span class="token punctuation">.</span>localdomain4 dhl  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启shell生效</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器与本地传输文件</title>
    <url>//7ff886e9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a><code>SCP</code></h2><p>首先确保服务器与本地通过<code>ssh</code>能进行链接，确保有<code>scp</code></p>
<h2 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h2><ul>
<li>远程拷贝文件<ul>
<li><code>scp</code> 本地文件 远程服务器用户名@远程服务器ip地址：指定拷贝到远程服务器路径</li>
<li><code>scp</code> 远程服务器用户名@远程服务器ip地址：远程服务器文件 指定拷贝到本地电脑的路径</li>
</ul>
</li>
<li>远程拷贝目录<ul>
<li><code>scp</code> <code>-r</code>本地文件 远程服务器用户名<code>@</code>远程服务器<code>ip</code>地址：指定拷贝到远程服务器路径</li>
<li><code>scp</code> <code>-r</code> 远程服务器用户名<code>@</code>远程服务器<code>ip</code>地址：远程服务器文件 指定拷贝到本地电脑的路径</li>
<li><code>-r</code> 表示递归拷贝整个目录</li>
</ul>
</li>
</ul>
<h3 id="传输文件至服务器"><a href="#传输文件至服务器" class="headerlink" title="传输文件至服务器"></a>传输文件至服务器</h3><p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gluhz0agd7j315x08oatm.jpg" alt=""></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">scp <span class="token number">1.</span>txt root@<span class="token number">123.56</span><span class="token number">.252</span><span class="token number">.111</span><span class="token operator">:</span><span class="token operator">/</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="从服务器拷贝目录"><a href="#从服务器拷贝目录" class="headerlink" title="从服务器拷贝目录"></a>从服务器拷贝目录</h3><p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gluhyy1bkbj31690a7qqm.jpg" alt=""></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">scp <span class="token operator">-</span>r root@<span class="token number">123.56</span><span class="token number">.252</span><span class="token number">.111</span><span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>select_test <span class="token constant">C</span><span class="token operator">:</span><span class="token operator">/</span>Users<span class="token operator">/</span><span class="token number">64371</span><span class="token operator">/</span>Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取wallpaper图片</title>
    <url>//2514ad2c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-user-agent-list"><a href="#1-user-agent-list" class="headerlink" title="1. user_agent_list"></a>1. user_agent_list</h2><p>这里是从网上获得的user_agent列表， 稍加修改就可以了</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> random


<span class="token comment"># 返回一个随机的请求头 headers</span>
<span class="token keyword">def</span> <span class="token function">getheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 各种PC端</span>
    user_agent_list_2 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token comment"># Opera</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60"</span><span class="token punctuation">,</span>
        <span class="token string">"Opera/8.0 (Windows NT 5.1; U; en)"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50"</span><span class="token punctuation">,</span>
        <span class="token comment"># Firefox</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span><span class="token punctuation">,</span>
        <span class="token comment"># Safari</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2"</span><span class="token punctuation">,</span>
        <span class="token comment"># chrome</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16"</span><span class="token punctuation">,</span>
        <span class="token comment"># 360</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko"</span><span class="token punctuation">,</span>
        <span class="token comment"># 淘宝浏览器</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span><span class="token punctuation">,</span>
        <span class="token comment"># 猎豹浏览器</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span><span class="token punctuation">,</span>
        <span class="token comment"># QQ浏览器</span>
        <span class="token string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span><span class="token punctuation">,</span>
        <span class="token comment"># sogou浏览器</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)"</span><span class="token punctuation">,</span>
        <span class="token comment"># maxthon浏览器</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36"</span><span class="token punctuation">,</span>
        <span class="token comment"># UC浏览器</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36"</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    <span class="token comment"># 各种移动端</span>
    user_agent_list_3 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token comment"># IPhone</span>
        <span class="token string">"Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span><span class="token punctuation">,</span>
        <span class="token comment"># IPod</span>
        <span class="token string">"Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span><span class="token punctuation">,</span>
        <span class="token comment"># IPAD</span>
        <span class="token string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span><span class="token punctuation">,</span>
        <span class="token comment"># Android</span>
        <span class="token string">"Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span><span class="token punctuation">,</span>
        <span class="token comment"># QQ浏览器 Android版本</span>
        <span class="token string">"MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span><span class="token punctuation">,</span>
        <span class="token comment"># Android Opera Mobile</span>
        <span class="token string">"Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10"</span><span class="token punctuation">,</span>
        <span class="token comment"># Android Pad Moto Xoom</span>
        <span class="token string">"Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13"</span><span class="token punctuation">,</span>
        <span class="token comment"># BlackBerry</span>
        <span class="token string">"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+"</span><span class="token punctuation">,</span>
        <span class="token comment"># WebOS HP Touchpad</span>
        <span class="token string">"Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0"</span><span class="token punctuation">,</span>
        <span class="token comment"># Nokia N97</span>
        <span class="token string">"Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124"</span><span class="token punctuation">,</span>
        <span class="token comment"># Windows Phone Mango</span>
        <span class="token string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)"</span><span class="token punctuation">,</span>
        <span class="token comment"># UC浏览器</span>
        <span class="token string">"UCWEB7.0.2.37/28/999"</span><span class="token punctuation">,</span>
        <span class="token string">"NOKIA5700/ UCWEB7.0.2.37/28/999"</span><span class="token punctuation">,</span>
        <span class="token comment"># UCOpenwave</span>
        <span class="token string">"Openwave/ UCWEB7.0.2.37/28/999"</span><span class="token punctuation">,</span>
        <span class="token comment"># UC Opera</span>
        <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999"</span>
    <span class="token punctuation">]</span>
    <span class="token comment"># 一部分 PC端的</span>
    user_agent_list_1 <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span><span class="token punctuation">,</span>
        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>
    <span class="token punctuation">]</span>
    user_agent_list <span class="token operator">=</span> user_agent_list_1 <span class="token operator">+</span> user_agent_list_2 <span class="token operator">+</span> user_agent_list_3<span class="token punctuation">;</span>
    UserAgent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent_list<span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> UserAgent<span class="token punctuation">}</span>
    <span class="token keyword">return</span> header<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-免费代理"><a href="#2-免费代理" class="headerlink" title="2.免费代理"></a>2.免费代理</h2><p>这里只是列举了几个免费代理的网站，从上面爬取ip:port 和类型组装成字典输出即可</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> user_agent_list
<span class="token keyword">import</span> re
<span class="token keyword">import</span> random


<span class="token keyword">class</span> <span class="token class-name">SpiderProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://www.kuaidaili.com/free/inha/1/"</span><span class="token punctuation">,</span> <span class="token string">"https://www.7yip.cn/free/?action=china&amp;page=2"</span><span class="token punctuation">,</span>
                    <span class="token string">"https://www.7yip.cn/free/?action=china&amp;page=3"</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>header <span class="token operator">=</span> user_agent_list<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>proxies_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_proxies_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>header<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
            response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

            ip_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="IP"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            port_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="PORT"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            type_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="类型"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>

            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ip_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>proxies_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"{\'%s\':\'%s:%s\'}"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>type_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> ip_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> port_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

        <span class="token comment"># for tmp_proxy in tmp_list:</span>
        <span class="token comment">#     proxy = eval(tmp_proxy)</span>
        <span class="token comment">#     response = requests.get("www.baidu.com", headers=self.header, proxies=proxy)</span>
        <span class="token comment">#     if response.status_code == 200:</span>
        <span class="token comment">#         self.proxies_list.append(tmp_proxy)</span>

    <span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxies_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>self<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getProxy ------&gt; ERROR"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>url<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_proxies_list<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-loopRequests"><a href="#3-loopRequests" class="headerlink" title="3. loopRequests"></a>3. loopRequests</h2><p>自己封装的循环访问的方法，可以解决部分网络延迟问题</p>
<p>在使用代理方面，每50次访问就更换代理，避免被封IP</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> spider_proxy
<span class="token keyword">import</span> time


<span class="token keyword">class</span> <span class="token class-name">LoopRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>proxies <span class="token operator">=</span> spider_proxy<span class="token punctuation">.</span>SpiderProxy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">50</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">50</span>
        self<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>

        args<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header
        args<span class="token punctuation">[</span><span class="token string">'proxies'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>proxy
        args<span class="token punctuation">[</span><span class="token string">'timeout'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>
        args<span class="token punctuation">[</span><span class="token string">'verify'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        loop <span class="token operator">=</span> <span class="token number">50</span>
        <span class="token keyword">while</span> loop<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loopRequest: %s 第 %s 次尝试"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">51</span><span class="token operator">-</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span>
                requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>
                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>args<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loopRequest: %s 链接成功"</span> <span class="token operator">%</span> url<span class="token punctuation">)</span>
                <span class="token keyword">return</span> response
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loopRequest: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> loop <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token string">"get error"</span>
            loop <span class="token operator">-=</span> <span class="token number">1</span>


request <span class="token operator">=</span> LoopRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.  cookie"></a>4.  cookie</h2><p>由于<code>wallpaper</code>登录以后可以看到更多图片，所以这里要模仿登录来拿到<code>cookie</code></p>
<p><code>session</code>在这里并不能起到很好的效果，所以直接使用<code>cookie</code>来模拟登录</p>
<p>详细信息挫这里: <a href="http://www.orzff.cn/72810b67/">wallpaper 模拟登录 | Mug-9’s blog (orzff.cn)</a></p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re
<span class="token keyword">import</span> loopRequest


<span class="token keyword">class</span> <span class="token class-name">SpiderCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>get_url <span class="token operator">=</span> <span class="token string">"https://wallhaven.cc/login"</span>
        self<span class="token punctuation">.</span>post_url <span class="token operator">=</span> <span class="token string">"https://wallhaven.cc/auth/login"</span>
        self<span class="token punctuation">.</span>request <span class="token operator">=</span> loopRequest<span class="token punctuation">.</span>request
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>_token <span class="token operator">=</span> <span class="token string">""</span>
        self<span class="token punctuation">.</span>cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>Is <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 1. 请求页面获得_token 和 cookie</span>
    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_url<span class="token punctuation">)</span>
        response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>_token <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;meta name="csrf-token" content="(.*?)"&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>

        cookies <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token keyword">for</span> cookie <span class="token keyword">in</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">:</span>
            cookies <span class="token operator">+=</span> cookie<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">";"</span>

        <span class="token comment"># 用header来携带cookie</span>
        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookies

    <span class="token comment"># 2.装填data</span>
    <span class="token keyword">def</span> <span class="token function">combined_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">'_token'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>_token<span class="token punctuation">,</span>
            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'643719884@qq.com'</span><span class="token punctuation">,</span>
            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'dhl643719884'</span>
        <span class="token punctuation">}</span>

    <span class="token comment"># 3. 组装cookie</span>
    <span class="token keyword">def</span> <span class="token function">combined_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

        <span class="token comment"># 这里拿到的cookie是相对比较齐全的cookie，主要用这个cookie来组装</span>
        post_cookies <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span>
        post_cookies_list <span class="token operator">=</span> post_cookies<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span>

        <span class="token comment"># 这里cookie只要__cfduid</span>
        temp_cookie <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span>
        temp_cookie_list <span class="token operator">=</span> temp_cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>

        <span class="token comment"># 组装</span>
        self<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>update<span class="token punctuation">(</span>__cfduid <span class="token operator">=</span> temp_cookie_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> cookie <span class="token keyword">in</span> post_cookies_list<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span>cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token comment"># header pop掉Cookie</span>
        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Cookie'</span><span class="token punctuation">)</span>

    <span class="token comment"># 4.登录</span>
    <span class="token keyword">def</span> <span class="token function">post_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>post_url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>
        response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"WallPaper: Cookies获取成功"</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>Is <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"WallPaper: Cookies获取失败"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>combined_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>combined_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>post_html<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-spider-图片"><a href="#5-spider-图片" class="headerlink" title="5. spider 图片"></a>5. spider 图片</h2><h3 id="5-1-先获取页面上所有图片二级页面的url"><a href="#5-1-先获取页面上所有图片二级页面的url" class="headerlink" title="5.1 先获取页面上所有图片二级页面的url"></a>5.1 先获取页面上所有图片二级页面的url</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 1. 获取页面信息,获取每张战片所在页面的url</span>
    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>
        response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
        href_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;a class="preview" href="(.*?)"  target="_blank"  &gt;&lt;/a&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
        <span class="token keyword">return</span> href_list
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-2-对于每张图片页面，获取每张图片的页面"><a href="#5-2-对于每张图片页面，获取每张图片的页面" class="headerlink" title="5.2 对于每张图片页面，获取每张图片的页面"></a>5.2 对于每张图片页面，获取每张图片的页面</h3><p>使用<code>etree+xpath</code>即可拿到每张图片的url</p>
<p>为防止网络问题，这里进行了5次重复</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 2. 进入页面 获取图片的url</span>
    <span class="token keyword">def</span> <span class="token function">get_img_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        loop <span class="token operator">=</span> <span class="token number">5</span>
        img_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> loop<span class="token punctuation">:</span>
            response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
            response_html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response_data<span class="token punctuation">)</span>
            img_url <span class="token operator">=</span> response_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="wallpaper"]/@src'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> img_url
            loop <span class="token operator">-=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>error_log<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> img_url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-3-下载"><a href="#5-3-下载" class="headerlink" title="5.3  下载"></a>5.3  下载</h3><p>下载到本地<code>E:\picture\当天日期</code></p>
<p>检查本地log看是否已存在相同图片</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 3. 下载</span>
    <span class="token keyword">def</span> <span class="token function">img_download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> self<span class="token punctuation">.</span>sem<span class="token punctuation">:</span>
            img_name <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>file_check<span class="token punctuation">(</span>img_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---%s 已存在"</span> <span class="token operator">%</span> img_name<span class="token punctuation">)</span>
                <span class="token keyword">return</span>

            picture_mkdir <span class="token operator">=</span> <span class="token string">"E:\\picture"</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>picture_mkdir<span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>picture_mkdir<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>picture_mkdir<span class="token punctuation">)</span>
            data_mkdir <span class="token operator">=</span> <span class="token string">"%s\\%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>picture_mkdir<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>data_mkdir<span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>data_mkdir<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>data_mkdir<span class="token punctuation">)</span>

            response <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---%s 开始写入"</span> <span class="token operator">%</span> img_name<span class="token punctuation">)</span>
            threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> img_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response_data<span class="token punctuation">)</span>
            threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---%s 写入完毕 -- count: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>

            threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>download_log<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_name<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span>
            threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-4-检查本地log"><a href="#5-4-检查本地log" class="headerlink" title="5.4 检查本地log"></a>5.4 检查本地log</h3><p>检查看是否已存在图片</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 4. 本地log</span>
   <span class="token keyword">def</span> <span class="token function">file_check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
       threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
       self<span class="token punctuation">.</span>download_log<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
       file_content <span class="token operator">=</span> self<span class="token punctuation">.</span>download_log<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
       threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> img_name <span class="token keyword">in</span> file_content<span class="token punctuation">:</span>
           <span class="token keyword">return</span> <span class="token boolean">True</span>
       <span class="token keyword">else</span><span class="token punctuation">:</span>
           <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-5-run"><a href="#5-5-run" class="headerlink" title="5.5 run"></a>5.5 run</h3><p>计划每次下载100张图片，网页页数从2-100</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 6.run</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        loop <span class="token operator">=</span> <span class="token number">50</span>
        <span class="token keyword">while</span> loop<span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>Is<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            loop <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> loop <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>error_log<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Cookies 获得失败"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            href_list <span class="token operator">=</span> self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token keyword">for</span> html_url <span class="token keyword">in</span> href_list<span class="token punctuation">:</span>
                img_url <span class="token operator">=</span> self<span class="token punctuation">.</span>get_img_url<span class="token punctuation">(</span>html_url<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>img_download<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>img_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-github地址"><a href="#6-github地址" class="headerlink" title="6. github地址"></a>6. github地址</h2><p><a href="https://github.com/Mug-9/Python-Spider/tree/master/爬取WallHaven 图片">Mug-9/Python-Spider: Spider (github.com)</a></p>]]></content>
      <categories>
        <category>Spider</category>
        <category>小项目</category>
      </categories>
      <tags>
        <tag>爬图片</tag>
      </tags>
  </entry>
  <entry>
    <title>python 生成requirements.txt</title>
    <url>//3d982a67/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="生成requirements"><a href="#生成requirements" class="headerlink" title="生成requirements"></a>生成requirements</h2><p>在要生成requirements的目录的控制台输入</p>
<p><code>pip freeze &gt; requirements.txt</code></p>
<h2 id="安装requirement"><a href="#安装requirement" class="headerlink" title="安装requirement"></a>安装requirement</h2><p>要根据<code>requirements</code>安装时，在控制台输入</p>
<p><code>pip install -r requirements.txt</code></p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>requirements</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee和github同步更新</title>
    <url>//2d45259f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h2><p>由于众所周知的原因，在github上clone很慢，所以采用码云来加速clone</p>
<h3 id="1-在码云上导入github项目"><a href="#1-在码云上导入github项目" class="headerlink" title="1 在码云上导入github项目"></a>1 在码云上导入github项目</h3><p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gldgqbjrwgj30bx08xwen.jpg" alt="img1"></p>
<h3 id="2-修改config"><a href="#2-修改config" class="headerlink" title="2 修改config"></a>2 修改<code>config</code></h3><p><code>git clone</code>到本地，在视图中显示隐藏项目，进入<code>.git</code>找到<code>config</code></p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gldgqf0oisj307k083weg.jpg" alt="img2"></p>
<h3 id="3-加上github的链接"><a href="#3-加上github的链接" class="headerlink" title="3 加上github的链接"></a>3 加上github的链接</h3><p>由于是在gitee上clone的项目，所以在config中只有gitee的链接，在github链接下面加上gitee的链接</p>
<p>注意： 一定是github下面加gitee的链接</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gldgqh0or2j30f8010mx1.jpg" alt="img3"></p>
<h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p>这样就可以在<code>push</code>的时候同时更新了</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 terminal 配置</title>
    <url>//e96d644/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// This file was initially generated by Windows Terminal 1.4.3243.0</span>
<span class="token comment">// It should still be usable in newer versions, but newer versions might have additional</span>
<span class="token comment">// settings, help text, or changes that you will not see unless you clear this file</span>
<span class="token comment">// and let us generate a new one for you.</span>

<span class="token comment">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span>
<span class="token comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span>
<span class="token punctuation">{</span>
    <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://aka.ms/terminal-profiles-schema"</span><span class="token punctuation">,</span>

    <span class="token property">"defaultProfile"</span><span class="token operator">:</span> <span class="token string">"{574e775e-4f2a-5b96-ac1e-a2962a402336}"</span><span class="token punctuation">,</span>

    <span class="token comment">// You can add more global application settings here.</span>
    <span class="token comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span>

    <span class="token comment">// If enabled, selections are automatically copied to your clipboard.</span>
    <span class="token property">"copyOnSelect"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token comment">// If enabled, formatted data is also copied to your clipboard</span>
    <span class="token property">"copyFormatting"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    
    <span class="token property">"tabWidthMode"</span><span class="token operator">:</span> <span class="token string">"equal"</span><span class="token punctuation">,</span>
    
    <span class="token property">"theme"</span><span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">,</span>

    <span class="token comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span>
    <span class="token comment">// Each one of them will appear in the 'New Tab' dropdown,</span>
    <span class="token comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span>
    <span class="token comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span>
    <span class="token property">"profiles"</span><span class="token operator">:</span>
    <span class="token punctuation">{</span>
        <span class="token property">"defaults"</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Put settings here that you want to apply to all profiles.</span>
            <span class="token property">"fontFace"</span><span class="token operator">:</span> <span class="token string">"CaskaydiaCove NF"</span><span class="token punctuation">,</span>
            <span class="token property">"fontSize"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
            <span class="token property">"cursorShape"</span><span class="token operator">:</span> <span class="token string">"filledBox"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">"list"</span><span class="token operator">:</span>
        <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{574e775e-4f2a-5b96-ac1e-a2962a402336}"</span><span class="token punctuation">,</span>
                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"PowerShell 7"</span><span class="token punctuation">,</span>
                <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"Windows.Terminal.PowershellCore"</span><span class="token punctuation">,</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"PowerShell 7"</span><span class="token punctuation">,</span>
                
                <span class="token comment">// morec</span>
                <span class="token comment">// 背景图片</span>
                <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> 
                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/2020-12-18/wallhaven-o3d3w7.jpg"</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                
                <span class="token property">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
                <span class="token comment">// 键入时窗口滚动到输入行</span>
                <span class="token property">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
                <span class="token comment">// 打开时的目录</span>
                <span class="token property">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> 
                <span class="token comment">// tab标题</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"powershell"</span><span class="token punctuation">,</span> 
                <span class="token comment">// 使用acrylic</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
                
                <span class="token comment">//主题</span>
           	 	<span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Solarized Dark Higher Contrast"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="token punctuation">,</span>
                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"PowerShell"</span><span class="token punctuation">,</span>
                <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"powershell.exe"</span><span class="token punctuation">,</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"PowerShell"</span><span class="token punctuation">,</span>
                
                <span class="token comment">// morec</span>
                <span class="token comment">// 背景图片</span>
                <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span> 
                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/2020-12-07/wallhaven-y87dxx.jpg"</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
              
                <span class="token property">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
                <span class="token comment">// 键入时窗口滚动到输入行</span>
                <span class="token property">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
                <span class="token comment">// 打开时的目录</span>
                <span class="token property">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> 
                <span class="token comment">// tab标题</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"powershell"</span><span class="token punctuation">,</span> 
                <span class="token comment">// 使用acrylic</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
                
                <span class="token comment">//主题</span>
           	 	<span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Cobalt Neon"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// Make changes here to the cmd.exe profile.</span>
                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"</span><span class="token punctuation">,</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Command Prompt"</span><span class="token punctuation">,</span>
                <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">,</span>
                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token comment">// more </span>
                <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/wallhaven-1kjqdw.jpg"</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
                <span class="token property">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
                <span class="token property">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"%USERPROFILE%"</span><span class="token punctuation">,</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"cmd"</span><span class="token punctuation">,</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                
                <span class="token comment">//主题</span>
           	 	<span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Thanatos Dark"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 通过terminal连接服务器</span>
            	<span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{B5F0BC97-C32E-67A0-97E1-6112A50DF336}"</span><span class="token punctuation">,</span>
            	<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"aliyun"</span><span class="token punctuation">,</span>
            	<span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"ssh root@123.56.252.111"</span><span class="token punctuation">,</span>
               <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>
               <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/2020-12-18/wallhaven-6oq5lq.jpg"</span><span class="token punctuation">,</span>
               <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>
               <span class="token property">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
               <span class="token property">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
               <span class="token property">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
               <span class="token property">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"%USERPROFILE%"</span><span class="token punctuation">,</span>
               <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"aliyun"</span><span class="token punctuation">,</span>
               <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
               <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"ms-appx:///ProfileIcons/{9acb9455-ca41-5af7-950f-6bca1bc9722f}.png"</span><span class="token punctuation">,</span> <span class="token comment">// 图标</span>
                <span class="token comment">//主题</span>
           	 	<span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Thanatos Dark"</span><span class="token punctuation">,</span>
            		
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{db1d57fc-a9c1-4051-9677-f0232f905f60}"</span><span class="token punctuation">,</span>
                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Tencent Server"</span><span class="token punctuation">,</span>
            	 <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"ssh root@81.71.14.51"</span><span class="token punctuation">,</span>
                <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/TencentServer.png"</span><span class="token punctuation">,</span>
                
                <span class="token comment">// morec</span>
                <span class="token comment">// 背景图片</span>
                <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> 
                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/2020-12-23/wallhaven-o3dvv9.jpg"</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token property">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                
                <span class="token property">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
                <span class="token comment">// 键入时窗口滚动到输入行</span>
                <span class="token property">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
                <span class="token comment">// 打开时的目录</span>
                <span class="token property">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> 
                <span class="token comment">// tab标题</span>
                <span class="token property">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"powershell"</span><span class="token punctuation">,</span> 
                <span class="token comment">// 使用acrylic</span>
                <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
                
                <span class="token comment">//主题</span>
           	 	<span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Thanatos Dark"</span><span class="token punctuation">,</span>
           	 	<span class="token property">"cursorColor"</span> <span class="token operator">:</span> <span class="token string">"#FFFFFF"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{b453ae62-4e3d-5e58-b989-0a998ec441b8}"</span><span class="token punctuation">,</span>
                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Azure Cloud Shell"</span><span class="token punctuation">,</span>
                <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"Windows.Terminal.Azure"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// Add custom color schemes to this array.</span>
    <span class="token comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span>
    <span class="token property">"schemes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Thanatos Dark"</span><span class="token punctuation">,</span>
            <span class="token property">"background"</span> <span class="token operator">:</span> <span class="token string">"#1a2b3c"</span><span class="token punctuation">,</span>
            <span class="token property">"foreground"</span> <span class="token operator">:</span> <span class="token string">"#e09887"</span><span class="token punctuation">,</span>
            <span class="token property">"selectionBackground"</span><span class="token operator">:</span> <span class="token string">"#fef8ec"</span><span class="token punctuation">,</span>
            <span class="token property">"black"</span><span class="token operator">:</span> <span class="token string">"#65737e"</span><span class="token punctuation">,</span>
            <span class="token property">"blue"</span><span class="token operator">:</span> <span class="token string">"#0e9bd1"</span><span class="token punctuation">,</span>
            <span class="token property">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#acacac"</span><span class="token punctuation">,</span>
            <span class="token property">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#7899ba"</span><span class="token punctuation">,</span>
            <span class="token property">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#0099ad"</span><span class="token punctuation">,</span>
            <span class="token property">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#0de1b1"</span><span class="token punctuation">,</span>
            <span class="token property">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#d47186"</span><span class="token punctuation">,</span>
            <span class="token property">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#fef8ec"</span><span class="token punctuation">,</span>
            <span class="token property">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#d8cb32"</span><span class="token punctuation">,</span>
            <span class="token property">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#ab43aa"</span><span class="token punctuation">,</span>
            <span class="token property">"purple"</span><span class="token operator">:</span> <span class="token string">"#928ba6"</span><span class="token punctuation">,</span>
            <span class="token property">"cyan"</span><span class="token operator">:</span> <span class="token string">"#008486"</span><span class="token punctuation">,</span>
            <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"#0099ad"</span><span class="token punctuation">,</span>
            <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"#ce4559"</span><span class="token punctuation">,</span>
            <span class="token property">"white"</span><span class="token operator">:</span> <span class="token string">"#fef8ec"</span><span class="token punctuation">,</span>
            <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"#d8cb32"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
			  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cobalt Neon"</span><span class="token punctuation">,</span>
			  <span class="token property">"black"</span><span class="token operator">:</span> <span class="token string">"#142631"</span><span class="token punctuation">,</span>
			  <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"#ff2320"</span><span class="token punctuation">,</span>
			  <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"#3ba5ff"</span><span class="token punctuation">,</span>
			  <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"#e9e75c"</span><span class="token punctuation">,</span>
			  <span class="token property">"blue"</span><span class="token operator">:</span> <span class="token string">"#8ff586"</span><span class="token punctuation">,</span>
			  <span class="token property">"purple"</span><span class="token operator">:</span> <span class="token string">"#781aa0"</span><span class="token punctuation">,</span>
			  <span class="token property">"cyan"</span><span class="token operator">:</span> <span class="token string">"#8ff586"</span><span class="token punctuation">,</span>
			  <span class="token property">"white"</span><span class="token operator">:</span> <span class="token string">"#ba46b2"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#fff688"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#d4312e"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#8ff586"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#e9f06d"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#3c7dd2"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#8230a7"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#6cbc67"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#8ff586"</span><span class="token punctuation">,</span>
			  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#142838"</span><span class="token punctuation">,</span>
			  <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#8ff586"</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
			  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Aurora"</span><span class="token punctuation">,</span>
			  <span class="token property">"black"</span><span class="token operator">:</span> <span class="token string">"#23262e"</span><span class="token punctuation">,</span>
			  <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"#f0266f"</span><span class="token punctuation">,</span>
			  <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"#8fd46d"</span><span class="token punctuation">,</span>
			  <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"#ffe66d"</span><span class="token punctuation">,</span>
			  <span class="token property">"blue"</span><span class="token operator">:</span> <span class="token string">"#0321d7"</span><span class="token punctuation">,</span>
			  <span class="token property">"purple"</span><span class="token operator">:</span> <span class="token string">"#ee5d43"</span><span class="token punctuation">,</span>
			  <span class="token property">"cyan"</span><span class="token operator">:</span> <span class="token string">"#03d6b8"</span><span class="token punctuation">,</span>
			  <span class="token property">"white"</span><span class="token operator">:</span> <span class="token string">"#c74ded"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#292e38"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#f92672"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#8fd46d"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#ffe66d"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#03d6b8"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#ee5d43"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#03d6b8"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#c74ded"</span><span class="token punctuation">,</span>
			  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#23262e"</span><span class="token punctuation">,</span>
			  <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#ffca28"</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
			  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"FunForrest"</span><span class="token punctuation">,</span>
			  <span class="token property">"black"</span><span class="token operator">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>
			  <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"#d6262b"</span><span class="token punctuation">,</span>
			  <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"#919c00"</span><span class="token punctuation">,</span>
			  <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"#be8a13"</span><span class="token punctuation">,</span>
			  <span class="token property">"blue"</span><span class="token operator">:</span> <span class="token string">"#4699a3"</span><span class="token punctuation">,</span>
			  <span class="token property">"purple"</span><span class="token operator">:</span> <span class="token string">"#8d4331"</span><span class="token punctuation">,</span>
			  <span class="token property">"cyan"</span><span class="token operator">:</span> <span class="token string">"#da8213"</span><span class="token punctuation">,</span>
			  <span class="token property">"white"</span><span class="token operator">:</span> <span class="token string">"#ddc265"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#7f6a55"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#e55a1c"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#bfc65a"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#ffcb1b"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#7cc9cf"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#d26349"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#e6a96b"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#ffeaa3"</span><span class="token punctuation">,</span>
			  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#251200"</span><span class="token punctuation">,</span>
			  <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#dec165"</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>
			  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Solarized Dark Higher Contrast"</span><span class="token punctuation">,</span>
			  <span class="token property">"black"</span><span class="token operator">:</span> <span class="token string">"#002831"</span><span class="token punctuation">,</span>
			  <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"#d11c24"</span><span class="token punctuation">,</span>
			  <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"#6cbe6c"</span><span class="token punctuation">,</span>
			  <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"#a57706"</span><span class="token punctuation">,</span>
			  <span class="token property">"blue"</span><span class="token operator">:</span> <span class="token string">"#2176c7"</span><span class="token punctuation">,</span>
			  <span class="token property">"purple"</span><span class="token operator">:</span> <span class="token string">"#c61c6f"</span><span class="token punctuation">,</span>
			  <span class="token property">"cyan"</span><span class="token operator">:</span> <span class="token string">"#259286"</span><span class="token punctuation">,</span>
			  <span class="token property">"white"</span><span class="token operator">:</span> <span class="token string">"#eae3cb"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#006488"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#f5163b"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#51ef84"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#b27e28"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#178ec8"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#e24d8e"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#00b39e"</span><span class="token punctuation">,</span>
			  <span class="token property">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#fcf4dc"</span><span class="token punctuation">,</span>
			  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#142838"</span><span class="token punctuation">,</span>
			  <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#9cc2c3"</span>
			<span class="token punctuation">}</span>


    
    <span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">// Add custom actions and keybindings to this array.</span>
    <span class="token comment">// To unbind a key combination from your defaults.json, set the command to "unbound".</span>
    <span class="token comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span>
    <span class="token property">"actions"</span><span class="token operator">:</span>
    <span class="token punctuation">[</span>
        <span class="token comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span>
        <span class="token comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span>
        <span class="token comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span>
        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"copy"</span><span class="token punctuation">,</span> <span class="token property">"singleLine"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token string">"ctrl+c"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"paste"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token string">"ctrl+v"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment">// Press Ctrl+Shift+F to open the search box</span>
        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token string">"ctrl+shift+f"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment">// Press Alt+Shift+D to open a new pane.</span>
        <span class="token comment">// - "split": "auto" makes this pane open in the direction that provides the most surface area.</span>
        <span class="token comment">// - "splitMode": "duplicate" makes the new pane use the focused pane's profile.</span>
        <span class="token comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span>
        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"splitPane"</span><span class="token punctuation">,</span> <span class="token property">"split"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token property">"splitMode"</span><span class="token operator">:</span> <span class="token string">"duplicate"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token string">"alt+shift+d"</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>cmd</code></p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1glyrcq4prlj31hk0t41kx.jpg" alt="cmd"></p>
<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><h3 id="客户端生成ssh公私钥"><a href="#客户端生成ssh公私钥" class="headerlink" title="客户端生成ssh公私钥"></a>客户端生成ssh公私钥</h3><p><code>ssh-keygen</code></p>
<h3 id="本地ssh公钥追加到服务器"><a href="#本地ssh公钥追加到服务器" class="headerlink" title="本地ssh公钥追加到服务器"></a>本地ssh公钥追加到服务器</h3><p>将<code>id_rsa.pub</code>的内容复制到<code>tmp.pub</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">cd <span class="token operator">~</span>
vi tmp<span class="token punctuation">.</span>pub
mkdir <span class="token punctuation">.</span>ssh <span class="token operator">&amp;&amp;</span> chmod <span class="token number">700</span> <span class="token punctuation">.</span>ssh
touch <span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys <span class="token operator">&amp;&amp;</span> chmod <span class="token number">600</span> <span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys
cat tmp<span class="token punctuation">.</span>pub <span class="token operator">&gt;&gt;</span> <span class="token punctuation">.</span>ssh<span class="token operator">/</span>authorized_keys
rm tmp<span class="token punctuation">.</span>pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="重启terminal"><a href="#重启terminal" class="headerlink" title="重启terminal"></a>重启terminal</h3><p>成功！</p>
<h3 id="解决终端链接服务器长时间不操作卡死"><a href="#解决终端链接服务器长时间不操作卡死" class="headerlink" title="解决终端链接服务器长时间不操作卡死"></a>解决终端链接服务器长时间不操作卡死</h3><p>在服务器中执行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">vim <span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>sshd_config
 
ClientAliveInterval  <span class="token number">60</span>      <span class="token comment">// 每隔60S向客户端发送请求消息，并等待客户端响应</span>
ClientAliveCountMax  <span class="token number">10</span>   <span class="token comment">// 客户端超过十次没响应，自动断开（即10分钟）</span>

<span class="token comment">//重启sshd服务</span>
<span class="token comment">//centos6</span>
service ssh restart
<span class="token comment">//centos7</span>
systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入所在用户的<code>.ssh</code>目录,</p>
<p>root用户的目录在：<code>/root/.ssh/</code><br>创建<code>config</code>文件<br><code>vim /root/.ssh/config</code><br>在文件中添加：<br><code>ServerAliveINterval 60</code>(没写错，就是<code>INterval</code>，我也不知道为什么，)<br>保存退出，重新从终端通过<code>ssh</code>进入服务器后不会因为长时间操作断开。</p>
<p>加入这句之后，<code>ssh</code>客户端会每隔一段时间自动与<code>ssh</code>服务器通信一次，所以长时间操作不会断开。</p>
<h2 id="terminal-添加右键"><a href="#terminal-添加右键" class="headerlink" title="terminal 添加右键"></a><code>terminal</code> 添加右键</h2><h3 id="检查常量"><a href="#检查常量" class="headerlink" title="检查常量"></a>检查常量</h3><pre class="line-numbers language-none"><code class="language-none">echo %USERPROFILE%

echo %LOCALAPPDATA%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="获取图标"><a href="#获取图标" class="headerlink" title="获取图标"></a>获取图标</h3><p>创建<code>Terminal</code>文件夹</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir "%USERPROFILE%\AppData\Local\Terminal"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>保存这个 <a href="https://gitee.com/Jioho/img/raw/master/wsl/terminal.ico">图标</a></p>
<p><img src="https://gitee.com/Jioho/img/raw/master/wsl/terminal.ico" alt=""></p>
<h3 id="添加注册表文件"><a href="#添加注册表文件" class="headerlink" title="添加注册表文件"></a>添加注册表文件</h3><p>新建一个文件 <code>new.reg</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Windows Registry Editor Version <span class="token number">5.00</span>

<span class="token punctuation">[</span><span class="token constant">HKEY_CLASSES_ROOT</span>\Directory\Background\shell\wt<span class="token punctuation">]</span>
@<span class="token operator">=</span><span class="token string">"Windows Terminal here"</span>
<span class="token string">"Icon"</span><span class="token operator">=</span><span class="token string">"%USERPROFILE%\\AppData\\Local\\Terminal\\terminal.ico"</span>

<span class="token punctuation">[</span><span class="token constant">HKEY_CLASSES_ROOT</span>\Directory\Background\shell\wt\command<span class="token punctuation">]</span>
@<span class="token operator">=</span><span class="token string">"C:\\Users\\[你的电脑用户名！你的电脑用名！]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>@</code>后面的[]改成电脑的用户名</li>
<li>如果第一步<code>USERPROFILE</code>没有东西打印出来，那么这里的<code>USERPROFILE</code>也改成<code>C:\Users\你的用户名</code></li>
<li>第5行时图标保存的地址</li>
</ul>
<p>执行<code>reg</code>文件，可以发现右键多了一个<code>windows termianl here</code></p>
<h3 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a>当前目录</h3><p>在配置文件中添加或修改</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 打开时的目录</span>
<span class="token string">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样也有一个缺点，直接打开<code>termianl</code>时目录为<code>C:\Windows\System32</code>目前没有解决方法</p>
<h2 id="PowerShell主题"><a href="#PowerShell主题" class="headerlink" title="PowerShell主题"></a><code>PowerShell</code>主题</h2><p><a href="https://www.misiyu.cn/article/134.html">参考</a></p>
<h3 id="安装oh-my-posh主题"><a href="#安装oh-my-posh主题" class="headerlink" title="安装oh-my-posh主题"></a>安装<code>oh-my-posh</code>主题</h3><p>在terminal输入</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Install<span class="token operator">-</span>Module posh<span class="token operator">-</span>git <span class="token operator">-</span>Scope CurrentUser
Install<span class="token operator">-</span>Module oh<span class="token operator">-</span>my<span class="token operator">-</span>posh <span class="token operator">-</span>Scope CurrentUser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输入<code>Y</code>同意安装</p>
<h3 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h3><p>在<code>terminal</code>输入<code>$PROFILE</code></p>
<p>得到当前电脑的<code>powershell_profile</code>文件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">PS</span> <span class="token constant">C</span><span class="token operator">:</span>\Windows\System32<span class="token operator">&gt;</span> $<span class="token constant">PROFILE</span>
<span class="token constant">C</span><span class="token operator">:</span>\Users\<span class="token number">64371</span>\Documents\WindowsPowerShell\Microsoft<span class="token punctuation">.</span>PowerShell_profile<span class="token punctuation">.</span>ps1
<span class="token constant">PS</span> <span class="token constant">C</span><span class="token operator">:</span>\Windows\System32<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>继续输入</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>Test<span class="token operator">-</span>Path <span class="token operator">-</span>Path $<span class="token constant">PROFILE</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> New<span class="token operator">-</span>Item <span class="token operator">-</span>Type File <span class="token operator">-</span>Path $<span class="token constant">PROFILE</span> <span class="token operator">-</span>Force <span class="token punctuation">}</span>
notepad $<span class="token constant">PROFILE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在打开的文件夹中添加</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Import<span class="token operator">-</span>Module posh<span class="token operator">-</span>git
Import<span class="token operator">-</span>Module oh<span class="token operator">-</span>my<span class="token operator">-</span>posh
Set<span class="token operator">-</span>Theme Honukai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>Set-Theme Honukai</code>是主题设置，其他可选主题</p>
<pre class="line-numbers language-none"><code class="language-none">Agnoster、Avit、Darkblood、Fish、Honukai、Paradox、Sorin、tehrob<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更新配置</p>
<p>输入你用<code>$PROFILE</code>得到的路径</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">C</span><span class="token operator">:</span>\Users\<span class="token number">64371</span>\Documents\WindowsPowerShell\Microsoft<span class="token punctuation">.</span>PowerShell_profile<span class="token punctuation">.</span>ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有些主题的样式可能会有些小空格，这时因为字体不支持<code>poweline</code>,推荐选择<code>Hack NF</code>字体，支持编程连字和<code>poweline</code>字形</p>
<p><a href="https://www.nerdfonts.com/font-downloads">下载链接</a></p>
<p>我的样式</p>
<p><code>powershell 5</code></p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1glyrcnto2jj31hk0t4hdu.jpg" alt="poweshell5"></p>
<p><code>power shell 7</code></p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1glyrcgjag7j31hk0t4qv5.jpg" alt="powershell7"></p>
<h2 id="Centos-terminal-主题"><a href="#Centos-terminal-主题" class="headerlink" title="Centos-terminal 主题"></a><code>Centos-terminal</code> 主题</h2><p><a href="https://www.jianshu.com/p/fa82d932888b">参考</a></p>
<h3 id="查看系统当前shell"><a href="#查看系统当前shell" class="headerlink" title="查看系统当前shell"></a>查看系统当前shell</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">echo $<span class="token constant">SHELL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看<code>/bin</code>下是否有<code>zsh</code>包</p>
<pre class="line-numbers language-ks" data-language="ks"><code class="language-ks">cat /etc/shells
**********************************************
返回的结果是:
/bin/sh
/bin/bash
/sbin/nologin
/usr/bin/sh
/usr/bin/bash
/usr/sbin/nologin
PS.默认没有安装zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装<code>zsh</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo yum install <span class="token operator">-</span>y zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在/bin下查看</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin
<span class="token operator">/</span>bin<span class="token operator">/</span>zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="将zsh设置成默认shell"><a href="#将zsh设置成默认shell" class="headerlink" title="将zsh设置成默认shell"></a>将<code>zsh</code>设置成默认<code>shell</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">chsh <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>zsh</code>为默认shell需要将以前在<code>~/.bashrc</code>中的设置，复制到<code>~/.zshrc</code>中</p>
<h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装<code>oh-my-zsh</code></h3><p>需要先装<code>git</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo yum install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>host</code></p>
<pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">vim /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">199.232</span><span class="token number">.28</span><span class="token number">.133</span> raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下载</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">sudo wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>robbyrussell<span class="token operator">/</span>oh<span class="token operator">-</span>my<span class="token operator">-</span>zsh<span class="token operator">/</span>raw<span class="token operator">/</span>master<span class="token operator">/</span>tools<span class="token operator">/</span>install<span class="token punctuation">.</span>sh <span class="token operator">-</span><span class="token constant">O</span> <span class="token operator">-</span> <span class="token operator">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题</a></p>
<p>选择一款主题，修改<code>~/.zshrc</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将<code>ZSH_THEME</code>更改为选择的主题 <code>jonathan</code></p>
<p>更新配置</p>
<p><code>source ~/.zshrc</code></p>
<p>重启</p>
<p><code>reboot</code></p>
<p>我的样式</p>
<p><code>aliyun Centos7</code></p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1glyrclljeyj31hk0t4u0x.jpg" alt="阿里云"></p>
<p><code>tencent Centos7</code></p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1glyrcizjn6j31hk0t44qq.jpg" alt="腾讯云"></p>
<h2 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h2><p>在<code>powershell</code>中执行</p>
<pre class="line-numbers language-none"><code class="language-none">PowerShell -Command "Set-ExecutionPolicy RemoteSigned -scope Process; iwr -useb https://raw.githubusercontent.com/gerardog/gsudo/master/installgsudo.ps1 | iex"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装过程会询问你是否打算使用<code>sudo</code>作为<code>gsudo</code>的别名，这里可以根据个人需要进行选择。<br>运行结尾显示<code>Done</code>即表明安装完成</p>
<p>安装完成后，在<code>setting.json</code>中添加<code>list</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>
                <span class="token string">"guid"</span><span class="token operator">:</span> <span class="token string">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="token punctuation">,</span>
                <span class="token string">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"PowerShell Administra"</span><span class="token punctuation">,</span>
                <span class="token string">"commandline"</span><span class="token operator">:</span> <span class="token string">"sudo.exe powershell.exe"</span><span class="token punctuation">,</span>
                <span class="token string">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"PowerShell Administra"</span><span class="token punctuation">,</span>
                
                <span class="token comment">// morec</span>
                <span class="token comment">// 背景图片</span>
                <span class="token string">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span> 
                <span class="token string">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:/picture/2020-12-07/wallhaven-y87dxx.jpg"</span><span class="token punctuation">,</span>
                <span class="token string">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span>
                <span class="token string">"backgroundImagerStretchMode"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
              
                <span class="token string">"padding"</span><span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>
                <span class="token comment">// 键入时窗口滚动到输入行</span>
                <span class="token string">"snapOnInput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
                <span class="token comment">// 打开时的目录</span>
                <span class="token string">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> 
                <span class="token comment">// tab标题</span>
                <span class="token string">"tabTitle"</span><span class="token operator">:</span> <span class="token string">"powershell"</span><span class="token punctuation">,</span> 
                <span class="token comment">// 使用acrylic</span>
                <span class="token string">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
                
                <span class="token comment">//主题</span>
           	 	<span class="token string">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"Cobalt Neon"</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在普通的<code>powershell</code>中执行<code>sudo</code>，也可以升级成管理员</p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>win Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>利用hexo多个设备更新博客</title>
    <url>//1351aa80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="多台电脑控制一个hexo博客"><a href="#多台电脑控制一个hexo博客" class="headerlink" title="多台电脑控制一个hexo博客"></a>多台电脑控制一个hexo博客</h2><h2 id="1-下载Git"><a href="#1-下载Git" class="headerlink" title="1.下载Git"></a>1.下载Git</h2><h2 id="2-下载Node-js"><a href="#2-下载Node-js" class="headerlink" title="2.下载Node.js"></a>2.下载Node.js</h2><p><a href="https://nodejs.org/en/">Node.js</a></p>
<p>版本不要太高</p>
<h2 id="3-新电脑创建新的ssh密钥"><a href="#3-新电脑创建新的ssh密钥" class="headerlink" title="3.新电脑创建新的ssh密钥"></a>3.新电脑创建新的ssh密钥</h2><p>在Git-bash中</p>
<p><code>ssh-keygen -t rsa -C 'your_email@example.com'</code></p>
<p>在github-&gt;<code>setting</code>-&gt;<code>SSH &amp;&amp; GPG keys</code>-&gt;<code>new ssh key</code></p>
<p>测试是否成功</p>
<p><code>ssh -T git@github.com</code></p>
<p>如果出现</p>
<pre class="line-numbers language-none"><code class="language-none">Hi username! You've successfully authenticated, but GitHub does not 
provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="3-1-设置用户信息"><a href="#3-1-设置用户信息" class="headerlink" title="3.1 设置用户信息"></a>3.1 设置用户信息</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"用户名"</span>
$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email  <span class="token string">"你希望的邮箱名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="4-资源配置依赖"><a href="#4-资源配置依赖" class="headerlink" title="4. 资源配置依赖"></a>4. 资源配置依赖</h2><h3 id="4-1-更换淘宝镜像"><a href="#4-1-更换淘宝镜像" class="headerlink" title="4.1 更换淘宝镜像"></a>4.1 更换淘宝镜像</h3><pre class="line-numbers language-none"><code class="language-none">npm config set registry https://registry.npm.taobao.org
npm i -g express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="4-2-安装hexo"><a href="#4-2-安装hexo" class="headerlink" title="4.2 安装hexo"></a>4.2 安装hexo</h3><p><code>npm install -g hexo-cli</code></p>
<h3 id="4-3-利用package-json部署资源"><a href="#4-3-利用package-json部署资源" class="headerlink" title="4.3 利用package.json部署资源"></a>4.3 利用<code>package.json</code>部署资源</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hexo-site"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"3.9.0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"acorn"</span><span class="token operator">:</span> <span class="token string">"^7.1.1"</span><span class="token punctuation">,</span>
    <span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^6.6.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^3.9.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-abbrlink"</span><span class="token operator">:</span> <span class="token string">"^2.0.5"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-asset-image"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-deployer-git"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-archive"</span><span class="token operator">:</span> <span class="token string">"^0.1.5"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-category"</span><span class="token operator">:</span> <span class="token string">"^0.1.3"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-feed"</span><span class="token operator">:</span> <span class="token string">"^1.2.2"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-index"</span><span class="token operator">:</span> <span class="token string">"^0.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-json-content"</span><span class="token operator">:</span> <span class="token string">"^4.1.6"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-searchdb"</span><span class="token operator">:</span> <span class="token string">"^1.0.8"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-generator-tag"</span><span class="token operator">:</span> <span class="token string">"^0.2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-less"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-renderer-ejs"</span><span class="token operator">:</span> <span class="token string">"^0.3.1"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-renderer-kramed"</span><span class="token operator">:</span> <span class="token string">"^0.1.4"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-renderer-less"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-renderer-mathjax"</span><span class="token operator">:</span> <span class="token string">"^0.6.0"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-renderer-stylus"</span><span class="token operator">:</span> <span class="token string">"^0.3.3"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-server"</span><span class="token operator">:</span> <span class="token string">"^0.3.3"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-symbols-count-time"</span><span class="token operator">:</span> <span class="token string">"^0.6.3"</span><span class="token punctuation">,</span>
    <span class="token property">"hexo-wordcount"</span><span class="token operator">:</span> <span class="token string">"^6.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"peer"</span><span class="token operator">:</span> <span class="token string">"^0.2.10"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="5-hexo提交"><a href="#5-hexo提交" class="headerlink" title="5.hexo提交"></a>5.hexo提交</h2><pre class="line-numbers language-none"><code class="language-none">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 配置Vue</title>
    <url>//9c6f56ad/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h3><p>自动关闭标签</p>
<h3 id="background-cover"><a href="#background-cover" class="headerlink" title="background-cover"></a>background-cover</h3><p>可以设置壁纸</p>
<h3 id="BetterComments"><a href="#BetterComments" class="headerlink" title="BetterComments"></a>BetterComments</h3><p>注释可以变颜色，便于区分</p>
<p>默认五种颜色</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gl5vwju72tj304r03xmxg.jpg" alt="img1"></p>
<h3 id="Bracket-Pair-Colorizer-2"><a href="#Bracket-Pair-Colorizer-2" class="headerlink" title="Bracket Pair Colorizer 2"></a>Bracket Pair Colorizer 2</h3><p>括号匹配并能标颜色</p>
<h3 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a>Code Spell Checker</h3><p>检查错误单词，并给出相近单词</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gl5w081g3lj307b08u3zu.jpg" alt="img2"></p>
<h3 id="EditorConfig-fot-VS-Code"><a href="#EditorConfig-fot-VS-Code" class="headerlink" title="EditorConfig fot VS Code"></a>EditorConfig fot VS Code</h3><p>让vscode支持.editorconfig文件</p>
<p>.editorconfig文件可以规范编码风格和设置</p>
<h4 id="在项目根目录建立-editorconfig文件"><a href="#在项目根目录建立-editorconfig文件" class="headerlink" title="在项目根目录建立.editorconfig文件"></a>在项目根目录建立<code>.editorconfig</code>文件</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">{</span>js<span class="token punctuation">,</span>jsx<span class="token punctuation">,</span>ts<span class="token punctuation">,</span>tsx<span class="token punctuation">,</span>vue<span class="token punctuation">}</span><span class="token punctuation">]</span>
indent_style <span class="token operator">=</span> space
indent_size <span class="token operator">=</span> <span class="token number">2</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>对文件进行校验，并可在保存时自动修复错误</p>
<h4 id="在vscode配置文件中"><a href="#在vscode配置文件中" class="headerlink" title="在vscode配置文件中"></a>在vscode配置文件中</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token comment">// eslint配置项，保存时自动修复错误</span>
  <span class="token string">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">"source.fixAll"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="在项目根目录建立-eslintrc-js文件"><a href="#在项目根目录建立-eslintrc-js文件" class="headerlink" title="在项目根目录建立.eslintrc.js文件"></a>在项目根目录建立<code>.eslintrc.js</code>文件</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  env<span class="token operator">:</span> <span class="token punctuation">{</span>
    node<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/essential'</span><span class="token punctuation">,</span> <span class="token string">'@vue/standard'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    parser<span class="token operator">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  rules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">'no-console'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h3><p>本地预览界面，右键html文件选择<code>Open with Live Seriver</code></p>
<h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>对<code>js html</code>文件格式化</p>
<h4 id="在项目根目录建立-prettierrc文件"><a href="#在项目根目录建立-prettierrc文件" class="headerlink" title="在项目根目录建立.prettierrc文件"></a>在项目根目录建立<code>.prettierrc</code>文件</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token string">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="在VScode-配置文件中加入"><a href="#在VScode-配置文件中加入" class="headerlink" title="在VScode 配置文件中加入"></a>在VScode 配置文件中加入</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 保存时自动格式化代码</span>
  <span class="token string">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 默认使用prettier格式化支持的文件</span>
  <span class="token string">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定 *.vue 文件的格式化工具为vetur，防止和prettier冲突</span>
  <span class="token string">"[vue]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"octref.vetur"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定 *.js 文件的格式化工具为vscode自带，以符合ESLint规范</span>
  <span class="token string">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"vscode.typescript-language-features"</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><p>代码高亮，代码片段，Emmet语法支持，语法错误校验检查，格式化代码，代码提醒，对第三方UI框架支持</p>
<h4 id="在vscode配置文件中-1"><a href="#在vscode配置文件中-1" class="headerlink" title="在vscode配置文件中"></a>在vscode配置文件中</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 将vetur的js格式化工具指定为vscode自带的</span>
<span class="token string">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>
<span class="token comment">// 移除js语句的分号</span>
<span class="token string">"javascript.format.semicolons"</span><span class="token operator">:</span> <span class="token string">"remove"</span><span class="token punctuation">,</span>
<span class="token comment">// 在函数名后面加上括号，类似这种形式 foo () {}</span>
<span class="token string">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Eva-Theme"><a href="#Eva-Theme" class="headerlink" title="Eva Theme"></a>Eva Theme</h3><p>Eva 主题</p>
<h2 id="我的配置文件"><a href="#我的配置文件" class="headerlink" title="我的配置文件"></a>我的配置文件</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Cascadia Code"</span><span class="token punctuation">,</span>
  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"300"</span><span class="token punctuation">,</span>
  <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token property">"terminal.integrated.fontWeight"</span><span class="token operator">:</span> <span class="token string">"300"</span><span class="token punctuation">,</span>
  <span class="token property">"terminal.integrated.cursorStyle"</span><span class="token operator">:</span> <span class="token string">"underline"</span><span class="token punctuation">,</span>
  <span class="token property">"debug.console.fontSize"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token property">"workbench.iconTheme"</span><span class="token operator">:</span> <span class="token string">"material-icon-theme"</span><span class="token punctuation">,</span>
  <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span>

  <span class="token comment">// 保存时自动格式化代码</span>
  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// eslint配置项，保存时自动修复错误</span>
  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"source.fixAll"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 让vetur使用vs自带的js格式化工具，以便在函数前面加个空格</span>
  <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>
  <span class="token property">"javascript.format.semicolons"</span><span class="token operator">:</span> <span class="token string">"remove"</span><span class="token punctuation">,</span>
  <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">// 指定 *.vue 文件的格式化工具为vetur</span>
  <span class="token property">"[vue]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"octref.vetur"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 指定 *.js 文件的格式化工具为vscode自带</span>
  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"vscode.typescript-language-features"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 默认使用prettier格式化支持的文件</span>
  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>

  <span class="token property">"better-comments.multilineComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"better-comments.highlightPlainText"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"cSpell.enableFiletypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token string">"vue-html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Eva Dark Italic"</span><span class="token punctuation">,</span>
  <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"backgroundCover.imagePath"</span><span class="token operator">:</span> <span class="token string">"e:\\picture\\2020-12-11\\wallhaven-e7ozz8.png"</span><span class="token punctuation">,</span>
  <span class="token property">"git.confirmSync"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"git.autofetch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"backgroundCover.randomImageFolder"</span><span class="token operator">:</span> <span class="token string">"e:\\picture\\2020-12-07"</span><span class="token punctuation">,</span>
  <span class="token property">"backgroundCover.autoStatus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"backgroundCover.opacity"</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token property">"javascript.updateImportsOnFileMove.enabled"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>
  <span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一下利用tcp使得服务器与android客户端相连</title>
    <url>//b4b2d023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h1><p>租一个简单的服务器，</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gjxbgzkd7zj30k004baa5.jpg" alt="服务器"></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>首先将我们需要的端口打开</p>
<pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone=public --add-port=6666/tcp --permanent   # 开放6666端口
firewall-cmd --reload   # 配置立即生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>用<code>firewall-cmd --zone=public --list-ports</code> 查看一下是否开启</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gjxbmaskt3j30u00vdk4g.jpg" alt=""></p>
<p>有时阿里云服务器的端口也得打开，这个自行百度即可。</p>
<h2 id="seriver-c"><a href="#seriver-c" class="headerlink" title="seriver.c"></a>seriver.c</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERV_PORT</span> <span class="token expression"><span class="token number">6666</span></span></span>

<span class="token keyword">char</span> rbuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span>clientfd<span class="token punctuation">,</span> size<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> saddr<span class="token punctuation">,</span> raddr<span class="token punctuation">;</span>

<span class="token comment">//      设置地址信息，ip信息</span>
        size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
        saddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建UDP套接字</span>
        sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Socket failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment">//设置端口复用</span>
        <span class="token function">setsockopt</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>on<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 绑定地址信息，IP信息</span>
        ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"sbind failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">socklen_t</span> val <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"waiting connect..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clientfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>raddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"get!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 循环接受客户端发来的信息</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"waiting data...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">read</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端传来数据: %s\n"</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strncpy</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">,</span> <span class="token string">"hello world too.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"hello world too.\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">write</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"发送给客户端数据: %s"</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">bzero</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Android-客户端"><a href="#Android-客户端" class="headerlink" title="Android 客户端"></a>Android 客户端</h1><h2 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h2><p>应为tcp的服务端是用c语言写的，所以为了android能够连接，我使用了ndk，ndk具体的配置可以自行百度。</p>
<h2 id="网络权限"><a href="#网络权限" class="headerlink" title="网络权限"></a>网络权限</h2><p>因为要进行网络连接，所以我们必须在mainfests文件中申请网络权限。如果没有权限创建socket会直接失败。</p>
<p>在application上面加上一句即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">uses</span><span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="layout文件"><a href="#layout文件" class="headerlink" title="layout文件"></a>layout文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/send_link<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送连接<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintHorizontal_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.498<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.374<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TextView<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/send_link<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/send_link<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>69dp<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/textView<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MissingConstraints<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="MainActivity文件"><a href="#MainActivity文件" class="headerlink" title="MainActivity文件"></a>MainActivity文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SuppressLint</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Toast</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>

    <span class="token comment">// Used to load the 'native-lib' library on application startup.</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"native-lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">EditText</span> editText<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">linkTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Example of a call to a native method</span>
        <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>send_link<span class="token punctuation">)</span><span class="token punctuation">;</span>
        editText <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"WrongConstant"</span><span class="token punctuation">)</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//网络连接必须在子线程中</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> ret <span class="token operator">=</span> <span class="token function">linkTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//Toast.makeText(getApplicationContext(), linkTest(), 1).show();</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="cpp文件"><a href="#cpp文件" class="headerlink" title="cpp文件"></a>cpp文件</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;android/log.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">LOG_TAG</span>    <span class="token string">"mysocket"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">LOGI</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token function">__android_log_print</span><span class="token punctuation">(</span>ANDROID_LOG_INFO<span class="token punctuation">,</span>LOG_TAG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERV_IP</span> <span class="token string">"123.56.252.111"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERV_PORT</span> <span class="token expression"><span class="token number">6666</span></span></span>

<span class="token keyword">extern</span> <span class="token string">"C"</span>
JNIEXPORT jstring JNICALL
<span class="token function">Java_com_example_test2_MainActivity_linkTest</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cfd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>
    <span class="token class-name">socklen_t</span> serv_addr_len<span class="token punctuation">;</span>

    cfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span><span class="token string">"socket failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"socket successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>SERV_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERV_IP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"connecting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"connect failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"connect successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world\n"</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>我们点击模拟器中的连接按钮，可以在android日志中发现连接成功，并成功相互发送数据</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gjxcbubznej31yd07qq6a.jpg" alt=""></p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>连接服务器</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下远程服务器mysql连接</title>
    <url>//c700630f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>因为项目需要一个数据库，所以就在阿里云哪里用云翼计划买了一个小型服务器，虽然小但是也够用</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gf4t674wa9j30fv059dfs.jpg" alt="img1"></p>
<h2 id="centos-安装mysql"><a href="#centos-安装mysql" class="headerlink" title="centos 安装mysql"></a><code>centos</code> 安装<code>mysql</code></h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">wget <span class="token operator">-</span>i <span class="token operator">-</span>c http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>dev<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>com<span class="token operator">/</span>get<span class="token operator">/</span>mysql57<span class="token operator">-</span>community<span class="token operator">-</span>release<span class="token operator">-</span>el7<span class="token operator">-</span><span class="token number">10.</span>noarch<span class="token punctuation">.</span>rpm
yum <span class="token operator">-</span>y install mysql57<span class="token operator">-</span>community<span class="token operator">-</span>release<span class="token operator">-</span>el7<span class="token operator">-</span><span class="token number">10.</span>noarch<span class="token punctuation">.</span>rpm
yum <span class="token operator">-</span>y install mysql<span class="token operator">-</span>community<span class="token operator">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="设置数据库"><a href="#设置数据库" class="headerlink" title="设置数据库"></a>设置数据库</h3><h4 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动<code>mysql</code></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">systemctl start  mysqld<span class="token punctuation">.</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">systemctl status mysqld<span class="token punctuation">.</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>先查看原始密码</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">grep <span class="token string">"password"</span> <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>利用原始密码进入数据库</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改密码规则</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> global validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> global validate_password_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改密码</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">ALTER</span> <span class="token constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">BY</span> <span class="token string">'new password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="windows-mysql安装"><a href="#windows-mysql安装" class="headerlink" title="windows mysql安装"></a><code>windows mysql</code>安装</h2><h3 id="下载-amp-解压"><a href="#下载-amp-解压" class="headerlink" title="下载 &amp; 解压"></a>下载 &amp; 解压</h3><p><a href="https://dev.mysql.com/downloads/mysql/">链接</a></p>
<h3 id="配置系统变量"><a href="#配置系统变量" class="headerlink" title="配置系统变量"></a>配置系统变量</h3><p>找到<code>bin</code>目录的位置：<code>E:\Config\mysql\mysql-5.7.32-winx64\bin</code></p>
<p>在环境变量的<code>path</code>中加入路径</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="生成data文件"><a href="#生成data文件" class="headerlink" title="生成data文件"></a>生成<code>data</code>文件</h4><p>以管理员身份运行<code>cmd</code></p>
<p>进入<code>E:\Config\mysql\mysql-5.7.32-winx64\bin</code>中</p>
<p>执行命令：<code>mysqld --initialize-insecure --user=mysql</code> 在<code>E:\Config\mysql\mysql-5.7.32-winx64\</code>下和<code>bin</code>同级目录生成<code>data</code>目录</p>
<h4 id="安装mysql-1"><a href="#安装mysql-1" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h4><p>继续执行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mysqld <span class="token operator">-</span>install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">net start MySQL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录<code>mysql</code></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>初始数据库没密码，直接回车</p>
<h4 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h4><p>执行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">ALTER</span> <span class="token constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">BY</span> <span class="token string">'new password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>使用<code>ubuntu</code>下的命令就可以自动安装<code>mysql</code>数据库</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">sudo apt-get install mysql-server
apt-get isntall mysql-client
sudo apt-get install libmysqlclient-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装成功后输入下面指令</p>
<p><strong><code>sudo netstat -tap | grep mysq</code></strong></p>
<p>如果是下图这样</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gf4tfwa2pcj30nf014dfp.jpg" alt="img2"></p>
<p>那么就成功安装了，下面就是通过<strong><code>mysql -u root -p</code></strong>就可以登录<code>mysql</code>数据库</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gf4tk9c4g8j30ji074aaa.jpg" alt="img3"></p>
<p><strong>注意，在第一次登录<code>mysql</code>时输入的密码即为你的初始密码，不输就是空</strong></p>
<h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>在<code>ubuntu</code>下，修改<strong><code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></strong>文件，将</p>
<p><strong><code>bind-address = 127.9.0.1</code></strong>语句注释掉或者改成<strong><code>bind-address=0.0.0.0</code></strong></p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gf4tqpv8czj30gv09rweo.jpg" alt="img4"></p>
<p><strong><code>bind-address = 127.9.0.1</code></strong> 意味着只允许本地登录，而把他改成<strong><code>0.0.0.0</code></strong>就代表允许所有的<code>ip</code>登录</p>
<p>但是这还不够，当我们连接远程数据库时，会新建一个<code>root</code> 用户，但是这个<code>root</code>只允许本地登录，不允许远程登陆，我们可以通过</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql
<span class="token keyword">select</span> host<span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>来验证发现这个<strong><code>root</code></strong>的 <strong><code>host</code></strong>只有一个<strong><code>localhost</code></strong></p>
<p>这是我们要通过设置来使他允许远程用户登录</p>
<p>在<code>mysql</code> 中输入</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 允许所有root用户登录</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'root用户密码'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment"># 允许指定ip的root用户登录</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> root<span class="token variable">@'指定的IP地址'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'root用户密码'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后重载授权表</p>
<p><code>FLUSH PRIVILEGES;</code></p>
<p>这时我们再来验证一下root的权限</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gf4wgkwzwaj309n05vdfr.jpg" alt="img5"></p>
<p>这时就应该可以连接上了</p>
<p><strong>但是</strong> ,如果这时还是连接不上，就可能是防火墙的问题，输入<code>ufw disable</code>把防火墙关闭</p>
<p><strong>如果</strong>还不行的话，就有可能是阿里云的问题了，因为我用的是一个轻量级的服务器，所以在防火墙中把端口3306打开即可</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gf4wnimwtxj30l206paa5.jpg" alt="img6"></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>经过以上步骤<code>mysql</code>的远程连接基本上就可以搞定了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">mysql <span class="token operator">-</span>h <span class="token constant">IP</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gf4wpo7tfgj30in07d74g.jpg" alt="img7"></p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>连接MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取88ys视频exe版</title>
    <url>//581490d4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="爬取88ys视频"><a href="#爬取88ys视频" class="headerlink" title="爬取88ys视频"></a>爬取88ys视频</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>点击dist中的<code>main.exe</code> 找到想下载的视频主页面</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gcefjor7i5j31e50hdtg1.jpg" alt=""></p>
<p>粘贴到url文本框</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gcefk892quj30g40apdgo.jpg" alt=""></p>]]></content>
      <categories>
        <category>Spider</category>
        <category>小项目</category>
      </categories>
      <tags>
        <tag>爬视频</tag>
      </tags>
  </entry>
  <entry>
    <title>wallpaper 模拟登录</title>
    <url>//72810b67/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在模拟登录wallhaven是，发现了一些问题，用request.session登录并保存cookie并不奏效</p>
<p>所以决定自己手动保存cookie</p>
<h3 id="先是登录"><a href="#先是登录" class="headerlink" title="先是登录"></a>先是登录</h3><p>因为登录信息中有<code>_token</code>，所以要先get一下获取网页的<code>_token</code> ，并且用get到的cookie来请求登录</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>get_url <span class="token operator">=</span> <span class="token string">"https://wallhaven.cc/login"</span>
    self<span class="token punctuation">.</span>post_url <span class="token operator">=</span> <span class="token string">"https://wallhaven.cc/auth/login"</span>
    self<span class="token punctuation">.</span>proxies <span class="token operator">=</span> spider_proxy<span class="token punctuation">.</span>SpiderProxy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    self<span class="token punctuation">.</span>_token <span class="token operator">=</span> <span class="token string">""</span>
    self<span class="token punctuation">.</span>cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    self<span class="token punctuation">.</span>Is <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token comment"># 1. 请求页面获得_token 和 cookie</span>
<span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span>
    response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>_token <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;meta name="csrf-token" content="(.*?)"&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>

    cookies <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> cookie <span class="token keyword">in</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">:</span>
        cookies <span class="token operator">+=</span> cookie<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">";"</span>

    <span class="token comment"># 用header来携带cookie</span>
    self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookies

<span class="token comment"># 2.装填data</span>
<span class="token keyword">def</span> <span class="token function">combined_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'_token'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>_token<span class="token punctuation">,</span>
        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'643719884@qq.com'</span><span class="token punctuation">,</span>
        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'dhl643719884'</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样可以登录，但是在用这个user-agent去请求数据是，不是登录后的状态，</p>
<p>抓包后发线登录以后的cookie和未登录的cookie只有remeber_web的差别</p>
<p>而remeber_web在请求登录的post的返回值里，那么</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># login以后的cookie请求</span>
__cfduid<span class="token operator">=</span>d7e60a37935c5d9c6f53f05ab1064e1681580787848<span class="token punctuation">;</span> 
remember_web_59ba36addc2b2f9401580f014c7f58ea4e30989d<span class="token operator">=</span>eyJpdiI6ImROQ29VNGRicnZsOW0wQW5BTzZVa1E9PSIsInZhbHVlIjoiTmNQT0h2TE03YW5yaUdhbWZDZnlQYlZzanN3UTV4aUdiMHh1bUl5cjVJMXdQbzIxYnF6bElYcFpmMERPY0ZcL3FnZ21xcU5WdXlvMlBBK21CeEs2K2FWV1pUK05sTmdDdFlHSWl4TlBwUHpuaEprV1dXYmZRbkZzWU1STjV6S3JONWsxNjBsekttbXFqd1BQTzhENlcwNzF0dVRvUit6eURxdHhrN1pZblo4U3lUMys2ekNLdTlXTllBXC82dkI3VUEiLCJtYWMiOiJkYmNiOTZiNDU3M2NjY2M3OGJjZWM4ZTBjZmJlZmIwMTBhMTM5MTcwMTA3ZDc1NjliNDM0ZmM1OWFkY2VhN2YwIn0<span class="token operator">%</span><span class="token number">3D</span>
_pk_ref<span class="token punctuation">.</span><span class="token number">1.</span><span class="token number">01b8</span><span class="token operator">=</span><span class="token operator">%</span><span class="token number">5B</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">2C</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">2C1581400207</span><span class="token operator">%</span><span class="token number">2C</span><span class="token operator">%</span>22http<span class="token operator">%</span><span class="token number">3A</span><span class="token operator">%</span><span class="token number">2F</span><span class="token operator">%</span>2Flocalhost<span class="token operator">%</span><span class="token number">3A63342</span><span class="token operator">%</span>2FPyCharnPython<span class="token operator">%</span>2Fday04<span class="token operator">%</span>2Fawewall<span class="token punctuation">.</span>html<span class="token operator">%</span>3F_ijt<span class="token operator">%</span>3Dog5l1ar0obspirlv150bfq3d1o<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">5D</span>
_pk_id<span class="token punctuation">.</span><span class="token number">1.</span><span class="token number">01b8</span><span class="token operator">=</span>e6d2c9622d153c11<span class="token punctuation">.</span><span class="token number">1580787918.21</span><span class="token number">.1581400207</span><span class="token number">.1581400207</span><span class="token punctuation">.</span>
XSRF<span class="token operator">-</span>TOKEN<span class="token operator">=</span>eyJpdiI6IjE4NzVZTlQrXC9pWFBmVlFsMUFvVFpBPT0iLCJ2YWx1ZSI6Im91OUROUEFZVHlsNWJ5bjdLa2pyQkV5R0RYZmNMNVN1TkJ5bERSTmFWaGFGRjUyaDI0K09aYzVVTUhZYzhnM0oiLCJtYWMiOiI0MTgzZmMyYzg0YmYyYmE2ZjgxNTEzMDBjYjI1NjFhOGYyMDZhNmJlZjkyYzBlMzhhYTNmNzA0MjBlZDQ3MDZhIn0<span class="token operator">%</span><span class="token number">3D</span>
wallhaven_session<span class="token operator">=</span>eyJpdiI6IjZQNVJcL3F0bXJhNndKUkc3QUVCTTZ3PT0iLCJ2YWx1ZSI6IjVSNHlRRjl0cU1sNEFMUGdCUkpFU0lOWXpZUjAzc1d4cHo1NnpLYlk2SU9kXC9zMldpekJKQ1NSMTI2aHIrWDJGIiwibWFjIjoiOWI3YjRlZGU0YTZiZWNkYjZmMWI4MGVlOGFhOThmNzdhOGUwZWQ2ODAxZjFjMGU4MzA1NDJiYjMwZDE3YzQ1OSJ9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 没有login的cookie请求</span>
__cfduid<span class="token operator">=</span>d7e60a37935c5d9c6f53f05ab1064e1681580787848
_pk_ref<span class="token punctuation">.</span><span class="token number">1.</span><span class="token number">01b8</span><span class="token operator">=</span><span class="token operator">%</span><span class="token number">5B</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">2C</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">2C1581402095</span><span class="token operator">%</span><span class="token number">2C</span><span class="token operator">%</span>22http<span class="token operator">%</span><span class="token number">3A</span><span class="token operator">%</span><span class="token number">2F</span><span class="token operator">%</span>2Flocalhost<span class="token operator">%</span><span class="token number">3A63342</span><span class="token operator">%</span>2FPyCharnPython<span class="token operator">%</span>2Fday04<span class="token operator">%</span>2Fawewall<span class="token punctuation">.</span>html<span class="token operator">%</span>3F_ijt<span class="token operator">%</span>3Dog5l1ar0obspirlv150bfq3d1o<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">5D</span>
_pk_ses<span class="token punctuation">.</span><span class="token number">1.</span><span class="token number">01b8</span><span class="token operator">=</span><span class="token number">1</span>
_pk_id<span class="token punctuation">.</span><span class="token number">1.</span><span class="token number">01b8</span><span class="token operator">=</span>e6d2c9622d153c11<span class="token punctuation">.</span><span class="token number">1580787918.22</span><span class="token number">.1581402949</span><span class="token number">.1581402095</span><span class="token punctuation">.</span>
XSRF<span class="token operator">-</span>TOKEN<span class="token operator">=</span>eyJpdiI6InRCSDFCT2dvZTZDeXVjR0w0NzZRNGc9PSIsInZhbHVlIjoiY1dzU1J4cHdENzN4eGVuU0I0NmxcL3NCblgyOWdVWEs2dTZ6QTNadHA4OHhISnZHWTFFamNIZGpibmZJQTRPcWUiLCJtYWMiOiJiNmMwMjhmMGYzYmY0MGViMWU2M2VhNTNjMTI1YTY0NThiYjU0MWFiYjYxMzRmODRkMGE5OWE5NmFlNTVkNTBjIn0<span class="token operator">%</span><span class="token number">3D</span>
wallhaven_session<span class="token operator">=</span>eyJpdiI6IkJoY1dITVJtQWJ4bzRqamJOVkxKeFE9PSIsInZhbHVlIjoiZjBXZUI3azVRWFAwY2tZeDlHakc1Nm5sSTZFUWVLT2FsT2JFVm5VUXQ0YmszYzVwMk9HcXlaV2R5YXpheG5lMCIsIm1hYyI6IjRjNzk1M2Q4NmE1ZDI4MjAwZDY2NDczNmRlZDVjYmVlN2Y2ZDA0NjYxOTI5NTZkYWM5OWY5MTY5MDQ2YTg4NWUifQ<span class="token operator">%</span><span class="token number">3D</span><span class="token operator">%</span><span class="token number">3D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们就直接组装一个cookie</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 3. 组装cookie</span>
    <span class="token keyword">def</span> <span class="token function">combined_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>post_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> data<span class="token operator">=</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

        <span class="token comment"># 这里拿到的cookie是相对比较齐全的cookie，主要用这个cookie来组装</span>
        post_cookies <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span>
        post_cookies_list <span class="token operator">=</span> post_cookies<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span>

        <span class="token comment"># 这里cookie只要__cfduid</span>
        temp_cookie <span class="token operator">=</span> self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Cookie'</span><span class="token punctuation">]</span>
        temp_cookie_list <span class="token operator">=</span> temp_cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>

        <span class="token comment"># 组装</span>
        self<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>update<span class="token punctuation">(</span>__cfduid <span class="token operator">=</span> temp_cookie_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> cookie <span class="token keyword">in</span> post_cookies_list<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span>cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token comment"># header pop掉Cookie</span>
        self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Cookie'</span><span class="token punctuation">)</span>

    <span class="token comment"># 4.登录</span>
    <span class="token keyword">def</span> <span class="token function">post_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>post_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>self<span class="token punctuation">.</span>proxies<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cookies获取成功"</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>Is <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cookies获取失败"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>combined_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>combined_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>post_html<span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样我们就得到了登陆后访问toplist的页面</p>
<p>完整项目地址: <a href="https://github.com/Mug-9/Python-Spider">Mug-9/Python-Spider: Spider (github.com)</a></p>
<h3 id="session-登录"><a href="#session-登录" class="headerlink" title="session 登录"></a>session 登录</h3><p>这里不可行,其他地方可行</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

<span class="token comment">#登录时需要POST的数据</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
	data
	<span class="token punctuation">}</span>

<span class="token comment">#设置请求头</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span><span class="token punctuation">}</span>

<span class="token comment">#登录时表单提交到的地址（用开发者工具可以看到）</span>
login_url <span class="token operator">=</span> <span class="token string">'login_url'</span>

<span class="token comment">#构造Session</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#在session中发送登录请求，此后这个session里就存储了cookie</span>
<span class="token comment">#可以用print(session.cookies.get_dict())查看</span>
resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>

<span class="token comment">#登录后才能访问的网页</span>
url <span class="token operator">=</span> <span class="token string">'url'</span>

<span class="token comment">#发送访问请求</span>
resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>模拟登录</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫爬取压缩过的数据</title>
    <url>//757817fb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在爬取bilibili的历史记录是，发现出现了<em>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0x8b in position 1: invalid start byte</em> 错误，后来发现是因为<code>data = response.read().decode("utf-8")</code>这一句的data是压缩后的数据，无法正常解析后来对<code>data</code>进行解码就可以了</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">import</span> gzip
<span class="token keyword">import</span> user_agent_list

url <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/account/history'</span>

random_user_agent <span class="token operator">=</span> user_agent_list<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
request<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> random_user_agent<span class="token punctuation">)</span>
response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
buf <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token builtin">zip</span> <span class="token operator">=</span> gzip<span class="token punctuation">.</span>GzipFile<span class="token punctuation">(</span>fileobj<span class="token operator">=</span>buf<span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"cookies.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>爬虫报错处理</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫爬取免费代理</title>
    <url>//28d5d8e8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用python爬取网站，可以用handler来隐藏user-agent，和使用高匿的代理ip，下面就是用不同的user-agent来爬取免费代理</p>
<p>首先要有一个user-agent的列表，我把它放在同一目录下然后import导入</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> user_agent_list
<span class="token keyword">import</span> re
<span class="token keyword">import</span> random


<span class="token keyword">class</span> <span class="token class-name">SpiderProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://www.kuaidaili.com/free/inha/1/"</span><span class="token punctuation">,</span> <span class="token string">"https://www.7yip.cn/free/?action=china&amp;page=2"</span><span class="token punctuation">,</span>
                    <span class="token string">"https://www.7yip.cn/free/?action=china&amp;page=3"</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>header <span class="token operator">=</span> user_agent_list<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>proxies_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_proxies_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>header<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
            response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

            ip_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="IP"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            port_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="PORT"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            type_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;td data-title="类型"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">,</span> response_data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>

            self<span class="token punctuation">.</span>proxies_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ip_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>proxies_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"{\'%s\':\'%s:%s\'}"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>type_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> ip_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> port_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

        <span class="token comment"># for tmp_proxy in tmp_list:</span>
        <span class="token comment">#     proxy = eval(tmp_proxy)</span>
        <span class="token comment">#     response = requests.get("www.baidu.com", headers=self.header, proxies=proxy)</span>
        <span class="token comment">#     if response.status_code == 200:</span>
        <span class="token comment">#         self.proxies_list.append(tmp_proxy)</span>

    <span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxies_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>self<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getProxy ------&gt; ERROR"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>url<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_proxies_list<span class="token punctuation">(</span>url<span class="token punctuation">)</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>项目地址：<a href="https://github.com/Mug-9/Python-Spider/tree/master/爬取代理">Python-Spider/爬取代理 at master · Mug-9/Python-Spider (github.com)</a></p>]]></content>
      <categories>
        <category>Python</category>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>爬代理</tag>
      </tags>
  </entry>
  <entry>
    <title>杭电多校第七场</title>
    <url>//8f3d60e0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="J-Just-Repeat"><a href="#J-Just-Repeat" class="headerlink" title="J: Just Repeat"></a>J: Just Repeat</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>小C和小Q打牌，两个人轮流出牌，小C先出，小C手中有n张牌，小Q有m张牌，两个人知道对方手中有什么牌，如果对手已经出过了某个数字的牌，那么自己就不能再出这种数字的牌，而对方可以一直出，问最后谁先不能出牌。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先对于双方都有的牌，我们肯定是要封对面尽量多的牌同时自己能出的牌也尽量多，我们我们就把这两个条件加一起把牌排一个序贪心拿即可，</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> mod<span class="token punctuation">;</span>
unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span>
<span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> last<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">||</span> ch<span class="token operator">&gt;</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last<span class="token operator">=</span>ch<span class="token punctuation">;</span>
        ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&gt;=</span><span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans<span class="token operator">=</span>ans<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span> 
        ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token operator">-</span>ans<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> k1<span class="token punctuation">,</span> k2<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> k3 <span class="token operator">=</span> k1<span class="token punctuation">,</span> k4 <span class="token operator">=</span> k2<span class="token punctuation">;</span>
    k1 <span class="token operator">=</span> k4<span class="token punctuation">;</span>
    k3 <span class="token operator">^=</span> k3 <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span>
    k2 <span class="token operator">=</span> k3 <span class="token operator">^</span> k4 <span class="token operator">^</span> <span class="token punctuation">(</span>k3 <span class="token operator">&gt;&gt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>k4 <span class="token operator">&gt;&gt;</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> k2 <span class="token operator">+</span> k4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>   
    <span class="token keyword">return</span> mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sumn <span class="token operator">=</span> n<span class="token punctuation">,</span> summ <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">gai</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">gai</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sumn <span class="token operator">-=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                summ <span class="token operator">-=</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> sumc <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
                vec<span class="token punctuation">[</span>sumc<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> sumc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Max<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> sumn <span class="token operator">+=</span> v<span class="token punctuation">;</span>
                <span class="token keyword">else</span> summ <span class="token operator">+=</span> i <span class="token operator">-</span> v<span class="token punctuation">;</span>
                cur <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sumn <span class="token operator">&gt;</span> summ<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Cuber QQ\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Quber CC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces EduRound 74</title>
    <url>//b223976b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="E-Keyboard-Purchase"><a href="#E-Keyboard-Purchase" class="headerlink" title="E: Keyboard Purchase"></a>E: Keyboard Purchase</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个有小写字母组成的字符串，让你给每个字母编号，使得$\sum\limits_{i=1}^{n}|S_i-S_{i-1}|$的值最小</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>  因为字母种类很小，所以我们可以用类似状压来记录中间值，具体的是$dp[(1&lt;&lt;m)]$来记录当前状态出现的字母种类与还未出现的字母种类的距离。</p>
<p>我们现在先想象一个键盘，$dp[i]$的二进制表示就是键盘前几个的键，那么$dp[i]$的转移就是由$dp[i^(1&lt;&lt;j)]$新加了一位j转移得来：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到的就是当前状态下的最小花费，</p>
<p>那么这样的话，原来的$dp[i^(1&lt;&lt;j)]$的状态不确定的这一位已经确定，那么其他还尚未却动的键与当前已经确定的键之间的距离要$+1$，</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> adj<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    string st<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> st<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        adj<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第十场</title>
    <url>//b961061/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一个随机排列的数列，问前缀和大于$a$的时候小于$b$的概率</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblwgobtobj30x10iqwjr.jpg" alt="img1"></p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gblwgqivrcj30wt0icq7t.jpg" alt="img2"></p>
<p>大意就是枚举最后一次抽的牌的点数，找在剩下的$n-1$个牌中，前$i$个牌的前缀和范围在$[a-x,min(a,b-x)]$的概率</p>
<p>概率是$\frac{i!(n-i-1)!}{n!}$，这个概率可以预处理出来。</p>
<p>然后就是用可逆背包和滚动数组来求dp</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">double</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> x<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                dp<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-=</span> dp<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> k <span class="token operator">+</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> 
                ans <span class="token operator">+=</span> dp<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">--</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> b<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">--</span><span class="token punctuation">)</span> 
                dp<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.15f\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="H-Wood-Processing"><a href="#H-Wood-Processing" class="headerlink" title="H: Wood Processing"></a>H: Wood Processing</h2><p><a href="http://www.orzff.cn/f1b7e3b7/">http://www.orzff.cn/f1b7e3b7/</a></p>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2019ACM-ICPC南昌网络赛</title>
    <url>//4e0518cb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="H-The-Nth-Item"><a href="#H-The-Nth-Item" class="headerlink" title="H: The Nth Item"></a>H: The Nth Item</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$F(0)=0,F(1)=1$</p>
<p>$F(n)= 3\times F(n-1)+2\times F(n-2)(n\ge 2)$</p>
<p>求第n项，n个询问，强制在线</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好像直接1e6进制矩阵快速幂就可以直接过，预先打个1e6的表，但这个好像是卡过，多交几次就会T掉</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> ll mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">Matrix</span><span class="token punctuation">{</span>
    ll mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
        mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
Matrix operator <span class="token operator">*</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">,</span> Matrix y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix t<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
                t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Matrix pre<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix t<span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span> cnt<span class="token punctuation">;</span>
        ll pt <span class="token operator">=</span> b <span class="token operator">%</span> maxn<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> pt <span class="token operator">=</span> b<span class="token punctuation">;</span>
        t <span class="token operator">=</span> t <span class="token operator">*</span> pre<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>pt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        b <span class="token operator">/=</span> maxn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Matrix ans<span class="token punctuation">;</span> 
    ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> ans <span class="token operator">*</span> t<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix t<span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll a <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        q <span class="token operator">=</span> q <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">^=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblvbmhd8ij30h0010mwz.jpg" alt=""></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>还有一种解法，通过打表得知询问$q$是由循环节的，最后在进行大约$1e6$次后，会有一个长度为$2$的循环节，我们就直接暴力找循环节，时间上好像比上面快一点</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">Matrix</span><span class="token punctuation">{</span>
    ll mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
        mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
Matrix operator <span class="token operator">*</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">,</span> Matrix y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix t<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
                t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix x<span class="token punctuation">;</span> x<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Matrix t<span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> t <span class="token operator">=</span> t <span class="token operator">*</span> x<span class="token punctuation">;</span>
        x <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Matrix ans<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> ans <span class="token operator">*</span> t<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> loop<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            loop <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            l <span class="token operator">=</span> q<span class="token punctuation">;</span>
            ll a <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            r <span class="token operator">=</span> q <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mp<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ll a<span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        q <span class="token operator">=</span> q <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> ans <span class="token operator">^</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>loop<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll dis <span class="token operator">=</span> n <span class="token operator">-</span> loop<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">^</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">^</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">^</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblvbjcjr2j30gt01aweb.jpg" alt="loop"></p>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>南昌</tag>
        <tag>题解</tag>
        <tag>网络赛</tag>
      </tags>
  </entry>
  <entry>
    <title>特征方程</title>
    <url>//ea13e7c5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>求二阶常系数线性齐次递推数列$f_n=a\times f_{n-1} + b \times f_{n-2}$的通项公式</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>先解出特征方程$x^2-a\times x - b = 0$，两根分别是$x_1,x_2$</p>
<p>如果$x_1 != x_2$ 则$f_n=A\times x_1^n+B\times x_2^n$</p>
<p>如果$x_1=x_2$ 则$f_n=(A+B\times n)\times x_1^n$</p>
<p>（$A,B$可以通过$f_0,f_1$求出）</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>斐波那契数列$f_n=f_{n-1}+f_{n-2}$</p>
<p>求解$x^2-x-1=0$</p>
<p>$x_1=\frac{1+\sqrt{5}}{2},x_2=\frac{1-\sqrt{5}}{2}$</p>
<p>$f_0=A\times x_1^0+B\times x_2^0=0$   </p>
<p>$f_1=A\times x_1^1+B\times x_2^1=1$</p>
<p>$A=\frac{\sqrt{5}}{5}, B=\frac{-\sqrt{5}}{5}$</p>
<p>所以$f_n=\frac{\sqrt{5}}{5} \times (\frac{1+\sqrt{5}}{2})^n+\frac{-\sqrt{5}}{5}\times (\frac{1+\sqrt{5}}{2})^n$</p>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>特征方程</tag>
      </tags>
  </entry>
  <entry>
    <title>Min_25筛</title>
    <url>//ecec6bcc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>在$O(\frac{n^{\frac{3}{4}}}{\log n})$时间复杂度内，来求一类完全积性函数的前缀和 $\sum\limits_{i=1}^{n}f(i)$</p>
<p>要求是$f(p)[p\in prime]$是一个关于p的简单多项式并且$f(p^e)$可以快速算出</p>
<h2 id="如何求"><a href="#如何求" class="headerlink" title="如何求"></a>如何求</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>我们可以先对$i$按照质数非质数分类</p>
<p>$\sum\limits_{i=1}^{n}f(i)=\sum\limits_{1\le p\le n} f(p) + \sum\limits_{i=1 ||i \notin prime}^nf(i)$</p>
<p>因为$f(i)$是完全积性函数，所以我们进一步把后面拆分，枚举每一个合数的最小质因子和最小质因子的次幂</p>
<p>$\sum\limits_{i=1}^{n}f(i)=\sum\limits_{1\le p\le n}f(p)+\sum\limits_{1\le p^e\le n \&amp; 1\le p \le \sqrt n}f(p^e)(\sum\limits_{1\le i \le \lfloor\frac{n}{p^e}\rfloor \&amp; min(i)&gt; p} f(i))$      $min(i)$代表$i$的最小质因子,</p>
<p>上式代表我们把合数的最小质因子以及次幂数提出来,计算那些最小质因子大于$p$的合数的值</p>
<h3 id="G-函数"><a href="#G-函数" class="headerlink" title="$G$函数"></a>$G$函数</h3><p>上式中我们要枚举$[1,n]$的每一个质数，但是n的范围可以很大， 这样就没法用线性筛筛出所有质数</p>
<p>但是我们可以考虑一个$DP$，我们令$g(n,j) = \sum\limits_{i=1}^{n}h(i)[i\in prime || min(i)&gt;p_j]$</p>
<p>其中$h(i)$是一个在质数处于$f(i)$取值相同的一个完全积性函数</p>
<p>也可以理解成原$f(i)$的所以值都参照$[i\in prime]$时的取值，把所有自然数都当成质数</p>
<p>$g(n,j)$代表$i$为质数或者$min(i)&gt;p_j$时的$h(i)$的前缀和</p>
<p>然后我们来考虑转移，怎么由$g(n,j-1)$转移到$g(n,j)$ ，因为$j$的增大，那么可满足条件的$h(i)$数量减小，</p>
<p>所以我们通过减掉一些不满足条件的$h(i)$来转移，通过观察可以发现，那些不满足条件的恰好就是最小质因子为</p>
<p>$p_j$的合数,也就是减掉$g(\frac{n}{p_j},j-1)-g(p_j-1,p_j)$，后面是减掉质数的部分，因为减掉的都是小于$p_j$的质数，这些质数已经在前面的遍历中减过了一次，不必再减</p>
<p>那么$g(n,j)=g(n,j-1)-p_j^k(g(\frac{n}{p_j},j-1)-g(p_j-1,j-1))$</p>
<p>注意后面的$g(p_j-1,j-1)$ 其实就是$h(i)$在前$j-1$个质数处的前缀和，因为$p_j\le \sqrt n$，所以我们可以用线性筛</p>
<p>筛出来，但是$n$还是很大，我们无法$DP$到$n$</p>
<p>但是因为$p_j$的范围是$\sqrt n$，而$g(n)$由所有的$g(\frac{n}{p_j})$转移而来，所以我们只要计算这$\sqrt n$ 范围内的$h(i)$即可</p>
<p>我们对下表进行离散化用两个数组来存储</p>
<p>以洛谷P5325为例</p>
<p>$g(x)=x^2,h(x)=x$</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetW</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> inv_6 <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> inv_2 <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sqr<span class="token punctuation">)</span> id1<span class="token punctuation">[</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">else</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">GetG</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> id <span class="token operator">=</span> d <span class="token operator">&lt;=</span> sqr <span class="token operator">?</span> id1<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">:</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>
            g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Sup</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> sumg<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Sup</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> sumh<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样我们就求出来了$[1,n]$中所有$h(i)$在质数处的和，$g(n)$</p>
<h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>我们设$S(n,j)=\sum\limits_{i=1}^{n}f(i)[min(i) \ge p_j]$</p>
<p>那么$S(n,j)=g(n)-\sum\limits_{i=1}^{j-1}f(p_i)+\sum\limits_{p_k^e\le n\&amp; k&gt; x}f(p_k^e)(S(\frac{n}{p_k^e}, k)+[e!=1])$</p>
<p>这样跟求$g(n)$的$dp$类似,答案就是$S(n,1)+f(1)$</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="洛谷P5325"><a href="#洛谷P5325" class="headerlink" title="洛谷P5325"></a>洛谷P5325</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>定义$f(x)$, 且$f(p^k)=p^k(p^k-1)$，$p$是一个质数,求$\sum\limits_{i=1}^{n}f(i)$,对$1e9+7$取模</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>当$p$为质数时 $f(p)=p(p-1)=p^2-p$</p>
<p>设$g(x)=x^2,h(x)=x,f(x)=g(x)-h(x)$</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-8</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> psi<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inv_2</span> <span class="token expression"><span class="token punctuation">(</span>Mod<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inv_6</span> <span class="token expression"><span class="token punctuation">(</span>Mod<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span></span></span>
<span class="token keyword">long</span> <span class="token keyword">long</span> sqr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> sumg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sumh<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> prim<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">;</span>
bool mark<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Sup</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Pow</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mark<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prim<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            sumg<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sumg<span class="token punctuation">[</span>tot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
            sumh<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sumh<span class="token punctuation">[</span>tot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">*</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            mark<span class="token punctuation">[</span>i <span class="token operator">*</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">GetW</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> inv_6 <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> inv_2 <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sqr<span class="token punctuation">)</span> id1<span class="token punctuation">[</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">else</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">GetG</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> id <span class="token operator">=</span> d <span class="token operator">&lt;=</span> sqr <span class="token operator">?</span> id1<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">:</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>
            g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Sup</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> sumg<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Sup</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> sumh<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> prim<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> id <span class="token operator">=</span> x <span class="token operator">&lt;=</span> sqr <span class="token operator">?</span> id1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">:</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> Mod <span class="token operator">-</span> sumg<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sumh<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> y<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot <span class="token operator">&amp;&amp;</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">,</span> t <span class="token operator">=</span> t <span class="token operator">*</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> <span class="token keyword">long</span> p1 <span class="token operator">=</span> t <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> p1 <span class="token operator">*</span> <span class="token punctuation">(</span>p1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>x<span class="token operator">/</span>t<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sqr <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>sqr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetW</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GetG</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Min_25筛</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第四场</title>
    <url>//db92c5b8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="E-triples-ll"><a href="#E-triples-ll" class="headerlink" title="E.triples ll"></a>E.triples ll</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>让你用$n$个3的倍数，把$a$或出来,问你有几种方案，对998244353取模</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在二进制中$1,4,16,\mod 3余1$, 而 $2,8,32 \mod 3余2$ </p>
<p>首先如果$a$中为$1$的二进制位在$b$中也都为$1$，那么就称$a$是$b$的子集</p>
<p>我们用$dp[i][j]$来表示二进制位$mod$ $3$ 余$1$的个数为$i$,$mod$ $3$ 余$2$的个数为$j$并且所有是3的倍数的子集个数</p>
<p>我们可以先一个$(logn)^4$求出所有的$dp$值</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> x <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> y <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要求或出来的结果是$a$的子集，那么方案数就是$(a的子集的个数)^n$</p>
<p>但是题目要求或出来的结果是$a$,那我们就要容斥一下了</p>
<p>打个比方，现在$a$的$\mod2$的个数为$1$，$\mod1$的个数为$2$</p>
<p>那么$dp[2][1]$所代表的是$&lt;2,1&gt;$的子集的个数，但有些子集在相或$n$次以后得不到a，这时候就要减掉那些不能或到$a$的子集 </p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gblwj39lltj307s06oweg.jpg" alt="img1"></p>
<p>$dp[2][1]$就像上图中由 A-E,​A-D,A-C,B-E,B-D,B-C 组成，而能或出来$a$的只有A-E,那么我们就要把其余不满足的减掉，也就是减掉$dp[1][1]+dp[2][0]$,发现减多了，我们要加上$dp[1][0]+dp[0][1]$，后面就跟容斥一样，多写几个样例就会发现当$(num1+num2-i-j)\mod2$时是减,其他是加。</p>
<p>注意：减的时候减掉的是不符合个数的$n$次幂</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>

ll C<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> o<span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> x <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> y <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll n<span class="token punctuation">,</span> a<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
            o <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ll f <span class="token operator">=</span> C<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> f <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> f <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>        
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>斜率优化dp</title>
    <url>//f1b7e3b7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>具体可以参考这篇博客<a href="https://www.cnblogs.com/Judge/p/9551035.html">https://www.cnblogs.com/Judge/p/9551035.html</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="斜率"><a href="#斜率" class="headerlink" title="斜率"></a>斜率</h3><p>斜率优化$dp$，听名字就知道是用来优化$dp$的</p>
<p>当我们在推导$dp$公式的时候，如果我们推出来的$dp$转移方程类似为：</p>
<p>$dp[i] = \min\limits_{x=1}^{x&lt;i}$  $or$  $\max\limits_{x=1}^{x&lt;i}$ $\{dp[x] + f(x,i)\}$  $f(x,i)是一个关于x与i的函数$</p>
<p>拿去最小值来说</p>
<p>我们考虑两个决策点$k&lt;j&lt;i$并且$j$比$k$要优</p>
<p>我们我们可以列一个不等式 $dp[j]+f(j,i)\leq dp[k]+f(k,i)$</p>
<p>展开如果可以把式子化成类似$\frac{y_j-y_k}{x_j-x_k}\leq k_i$，那么我们如果如果把每个点$(x_i,y_i)$看成一个坐标，那么</p>
<p>就表示$(x_j,y_j)$与$(x_k,y_k)$的斜率$\leq k_i$, 这样我们可以得到真正有用的点组成了一个凸包的形状</p>
<h3 id="为什么是个凸包？"><a href="#为什么是个凸包？" class="headerlink" title="为什么是个凸包？"></a>为什么是个凸包？</h3><p>当我们去最小值是，我们有一下这么几个点</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblx1fca58j307v06d0sp.jpg" alt="img1"></p>
<p>我们维护一个下凸壳，那么我们找的最小值的直线一定是沿着下凸壳的边缘</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblx1htpwyj30bs08jq32.jpg" alt="img2"></p>
<p>所以说不处于凸壳上的点是没有意义的</p>
<p>另外：最小值维护下凸壳，最大值维护上凸壳</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="求斜率"><a href="#求斜率" class="headerlink" title="求斜率"></a>求斜率</h3><p>一般来说能推出斜率表达式的都可以用斜率优化$dp$</p>
<p>我们已经把式子化成这么一个形式$\frac{y_j-y_k}{x_j-x_k}\leq k_i$ ,那么我们求斜率可以这么写</p>
<p>如果斜率单调就用移指针，不单调就二分答案</p>
<p>以HDU 3507为例：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">ll <span class="token function">getUp</span><span class="token punctuation">(</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">;</span> <span class="token comment">//加一下防止除零的情况</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>当我们化成的这个式子的$\frac{y_j-y_k}{x_j-x_k}\leq k_i$ 的$k_i$是单调的，那么我们可以用单调队列来维护这个凸壳，并且队首是最优解</p>
<p>因为我们维护一个单调的队列，所以当我们在队列里面加点时，根据凸壳的单调性我们可以这么写</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail <span class="token operator">--</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>而如果存在$k&lt;j&lt;i$并且$j$比$k$优，的情况，也就是$\frac{y_j-y_k}{x_j-x_k}\leq k_i$ </p>
<p>我们在队首把$k$踢出去,因为$k$已经不是最优的</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                head <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样我们就可以用单调队列去维护一个单调的凸壳，并且单调队列里面的队首就是最优情况</p>
<h3 id="二分单调栈"><a href="#二分单调栈" class="headerlink" title="二分单调栈"></a>二分单调栈</h3><p>当我们化成的这个式子的$\frac{y_j-y_k}{x_j-x_k}\leq k_i$ 的$k_i$不是单调的，那么我们可以用单调栈来维护这个凸壳</p>
<p>因为凸壳是单调的，所以我们要找的这个$k_i$可以用二分来查找</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="HDU-3507-Print-Article"><a href="#HDU-3507-Print-Article" class="headerlink" title="HDU 3507 Print Article"></a>HDU 3507 Print Article</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有一个$C_i$序列，你可以把序列分为几段，每段的权值为$(\sum\limits_{i=1}^{k}C_i)^2+M$，</p>
<p>求出最小的权值和</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>很容易想到转移方程$dp[i] = \min\limits_{x=1}^{x&lt;i}\{dp[x] + m + (sum[i] - sum[x])^2\}$</p>
<p>我们假设存在一个$k&lt;j&lt;i$并且$j$比$k$要优</p>
<p>那么$dp[j]+m+(sum[i]-sum[j]^2)\leq dp[k]+m+(sum[i]-sum[k])^2$</p>
<p>移项并合并同类项后：</p>
<p>$\frac{dp[j]+sum[j] \times sum[j] - (dp[k]+sum[k]\times sum[k])}{2(sum[j]-sum[k])}\le sum[i]]$</p>
<p>我们设$Y=dp[x]-sum[x],X=2\times sum[x]$</p>
<p>那么式子可以化成:$\frac{Y(j)-Y(k)}{X(j)-X(k)}\le sum[i]$</p>
<p>因为是$sum[i]$是递增的，所以我们可以用单调队列维护一个下凸壳</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">0.0000000001</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

ll <span class="token function">getDp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span> ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span>ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1.0</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                head <span class="token operator">++</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getDp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail <span class="token operator">--</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="洛谷-P4072-征途"><a href="#洛谷-P4072-征途" class="headerlink" title="洛谷 P4072 征途"></a>洛谷 P4072 征途</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>序列分割，给你n个数字，你把序列分割成m个段，每一段的的方差为$v$</p>
<p>输出最小的每一段的之和$\times m^2$</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>提前声明一下， 下面的$c_i$都是一段路的距离之和，而不是单条路的距离，所以是$m$段而不是$n$段</p>
<p>$s^2=\frac{(\frac{\sum\limits_{i=1}^{m}c_i}{n}-c_1)^2+(\frac{\sum\limits_{i=1}^{m}c_i}{m}-c_2)^2+…+(\frac{\sum\limits_{i=1}^{m}c_i}{m}-c_n)^2}{m}$</p>
<p>$s^2=\frac{(\frac{\sum\limits_{i=1}^{m}c_i}{m})^2-2\times \frac{\sum\limits_{i=1}^{m}c_i}{m}\times c_1+c_1^2+(\frac{\sum\limits_{i=1}^{m}c_i}{m})^2-2\times \frac{\sum\limits_{i=1}^{m}c_i}{m}\times c_2+c_2^2+…+(\frac{\sum\limits_{i=1}^{m}c_i}{m})^2-2\times \frac{\sum\limits_{i=1}^{m}c_i}{m}\times c_n+c_n^2}{m}$</p>
<p>$s^2=\frac{m\times (\frac{\sum\limits_{i=1}^{m}c_i}{m})^2-2\times \frac{(\sum\limits_{i=1}^{m}c_i)^2}{m}+(\sum\limits_{i=1}^{m}c_i^2)}{m}$</p>
<p>$s^2=\frac{\frac{(\sum\limits_{i=1}^{m}c_i)^2}{m}-2\times \frac{(\sum\limits_{i=1}^{m}c_i)^2}{m}+(\sum\limits_{i=1}^{m}c_i^2)}{m}$</p>
<p>$s^2=\frac{-\frac{(\sum\limits_{i=1}^{m}c_i)^2}{m}+(\sum\limits_{i=1}^{m}c_i^2)}{m}$</p>
<p>$s^2\times m^2=-(\sum\limits_{i=1}^{n}c_i)^2+m\times (\sum\limits_{i=1}^{n}c_i^2)$</p>
<p>我们发现前面一项是一个常数，而$s^2\times m^2$最小是在$\sum\limits_{i=1}^{m}c_i^2$最小时</p>
<p>这样我们在进行$dp$转移的时候,我们用$sum[x] = \sum\limits_{i=1}^{x}val[i]$    $val[x]$时每一条路的长度</p>
<p>$dp[i] = \min\{dp[x] + (sum[i]-sum[x])^2\}$</p>
<p>按照以往的套路，存在$k&lt;j&lt;i$并且$j$比$k$要优</p>
<p>$dp[j]+(sum[i]-sum[j])^2\le dp[k]+(sum[i]+sum[k])^2$</p>
<p>$dp[j]+sum[j]^2-(dp[k]+sum[k]^2)\le2\times sum[i]sum[j]-2\times sum[i]sum[k]$</p>
<p>$\frac{dp[j]+sum[j]^2-(dp[k]+sum[k]^2)}{2\times(sum[j]]-sum[k])}\le sum[i]$</p>
<p>这样斜率就推出来了，因为$sum[i]$是个递增的值，所以我们可以用单调队列来维护凸壳</p>
<p>然后用一个滚动数组来记录最优值</p>
<h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>

ll sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">getDp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> t <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                head <span class="token operator">++</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getDp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                tail <span class="token operator">--</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>  g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> m <span class="token operator">*</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> val<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> val<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这道题貌似可以用WQS加斜率dp来写，下次来补一下</p>
<h3 id="洛谷P2365-任务安排"><a href="#洛谷P2365-任务安排" class="headerlink" title="洛谷P2365 任务安排"></a>洛谷P2365 任务安排</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>N个任务排成一个序列，你把任务分组完成，每个任务的费用是完成时间乘一个费用系数</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们先设计dp转移方程,因为我们在转移的时候还要考虑前面用了几组,所以我们在转移的时候直接把后面的</p>
<p>费时S加上,</p>
<p>dp转移的时候时间和花费用前缀和维护</p>
<p>$dp[i] = min\{dp[x] + time[i] \times (cost[i] - cost[x])+S\times (cost[n] - cost[x])\}$</p>
<p>按照以往套路,</p>
<p>$dp[j]+time[i]\times(cost[i]-cost[j])+S\times(cost[n] - cost[j])\le dp[k]+time[i]\times(cost[i]-cost[k])+S\times(cost[n] - cost[k])$</p>
<p>$dp[j]-dp[k]-S\times cost[j]+S\times cost[k]\le time[i]\times (cost[j]-cost[k])$</p>
<p>$\frac{dp[j]-S\times cost[j]-(dp[k]-S\times cost[k])}{cost[j]-cost[k]}\le time[i]$</p>
<p>然后用斜率$dp$就直接写了</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>

ll t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> S<span class="token punctuation">;</span>

ll <span class="token function">getDp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span> ll j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>S<span class="token operator">*</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Clac</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Clac</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            head <span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getDp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Clac</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Clac</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tail <span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="洛谷-P4360-锯木厂选址"><a href="#洛谷-P4360-锯木厂选址" class="headerlink" title="洛谷 P4360 锯木厂选址"></a>洛谷 P4360 锯木厂选址</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>从山顶到山底运n棵老树，运一颗树的费用是树的重量乘上距离，为了不浪费决定在山腰上见两个锯木厂，问最小的运输费用</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>我们把树的重量求一个前缀和 $sum[]$，到山底的距离求一个后缀和$dis[]$,所有树运到山底的花费$totsum$</p>
<p>因为只有两个锯木厂，所以我们可以直接写一下$dp$转移</p>
<p>$dp[i] = min\{totsum-dis[x]\times sum[x]-(sum[i]-sum[x])\times dis[i])\}$</p>
<p>套路：</p>
<p>$totsum-dis[j]\times sum[j]-(sum[i]-sum[j])\times dis[i])\leq totsum-dis[k]\times sum[k]-(sum[i]-sum[k])\times dis[i])$</p>
<p>$-dis[j]\times sum[j]+dis[k]\times sum[k]\le dis[i]\times (-sum[j]+sum[k])$</p>
<p>$\frac{dis[j]\times sum[j]-dis[k]\times sum[k]}{sum[j]-sum[k]}\ge dis[i]$  $(因为sum[j]大于sum[k]所以要变号)$</p>
<p>直接套</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">0x7ffffffffffll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>

ll dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> totsum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

ll <span class="token function">getDp</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> totsum <span class="token operator">-</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Clac</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        totsum <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dis<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Clac</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            head <span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getDp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Clac</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">Clac</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            tail <span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="洛谷-P5504-柠檬"><a href="#洛谷-P5504-柠檬" class="headerlink" title="洛谷 P5504 柠檬"></a>洛谷 P5504 柠檬</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>一串贝壳，每个贝壳都有一个值$s_0$你可以选择连续的一段把他变成柠檬，柠檬的个数是$s_0t^2$,$t$是区间柠檬值为$s_0$的个数</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>首先，我们要变的贝壳区间肯定是首尾值相同，然后我们可以对每个相同值得柠檬求一个前缀和</p>
<p>$dp[i] = max\{dp[x-1] + val<a href="sum[i]-sum[x]+1">i</a>^2\}$</p>
<p>套：</p>
<p>$dp[j-1]+val<a href="sum[i]-sum[j]+1">i</a>^2\le dp[k-1]+val<a href="sum[i]-sum[k]+1">i</a>^2$</p>
<p>$\frac{dp[j-1]-dp[k-1] + val[j]sum[j]^2-val[k]sum[k]^2-2val[i]sum[j]+2val[i]sum[k]}{sum[j]-sum[k]}\le 2val[i]sum[i]$</p>
<p>我们发现$2val[i]sum[i]$对于每一类柠檬都是单调的，所以可以直接移指针如果斜率不单调就要在凸壳上二分了</p>
<h4 id="AC代码（移指针）"><a href="#AC代码（移指针）" class="headerlink" title="AC代码（移指针）"></a>AC代码（移指针）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>

ll last<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll top<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll p <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">--</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">*</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">--</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="AC代码（二分）"><a href="#AC代码（二分）" class="headerlink" title="AC代码（二分）"></a>AC代码（二分）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>

ll last<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll top<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span>ll i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Calc</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">find</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll p <span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll l <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> r <span class="token operator">=</span> top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">*</span>s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> m<span class="token punctuation">;</span>
            l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        last<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll p <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">--</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>top<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span> q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2019牛客多校第十场-J-Wood-Processing"><a href="#2019牛客多校第十场-J-Wood-Processing" class="headerlink" title="2019牛客多校第十场 J.Wood Processing"></a>2019牛客多校第十场 J.Wood Processing</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>把n块木板求成高度相同的k块，求浪费的最小</p>
<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>可以说是斜率dp的模板题</p>
<p>我们把高度从高到低排序，那么$dp$转移式就是</p>
<p>$dp[i]=max\{dp[x]+(sum[i]-sum[x])\times h[i]\}$ $sum$是宽的前缀和</p>
<p>我们假设$j&gt;k$并且$j$比$k$优</p>
<p>$dp[j]+(sum[i]-sum[j])\times h[i] &gt;= dp[k]+(sum[i]-sum[k])\times h[i]$</p>
<p>$\frac{dp[j]-dp[k]}{sum[j]-sum[k]}\ge h[i]$</p>
<h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    ll p<span class="token punctuation">,</span> h<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Plan</span><span class="token punctuation">{</span>
    ll h<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>plan<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

bool <span class="token function">cmp</span><span class="token punctuation">(</span>Plan a<span class="token punctuation">,</span> Plan b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>h <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>h<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

ll <span class="token function">getDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">Cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">getUp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getUp</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">getDown</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDown</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getDp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">-</span> plan<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">*</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Cal</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">)</span> head <span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getDp</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">Cal</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">Cal</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail <span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">*</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>plan <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> plan <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> plan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+=</span> plan<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> sum<span class="token operator">-</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>斜率优化dp</tag>
      </tags>
  </entry>
  <entry>
    <title>全排列与逆序对</title>
    <url>//ea46ca8a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>从n个不同元素中任取m（m≤n）个元素，按照一定的顺序排列起来，叫做从n个不同元素中取出m个元素的一个排列。当m＝n时所有的排列情况叫n的全排列。</p>
<h2 id="逆序列"><a href="#逆序列" class="headerlink" title="逆序列"></a>逆序列</h2><h3 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h3><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。</p>
<h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><p>一个排列中逆序的总数就称为这个排列的逆序数。</p>
<h3 id="奇偶排列"><a href="#奇偶排列" class="headerlink" title="奇偶排列"></a>奇偶排列</h3><p>逆序数为偶数的排列称为偶排列；逆序数为奇数的排列称为奇排列</p>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="给排列，求逆序数"><a href="#给排列，求逆序数" class="headerlink" title="给排列，求逆序数"></a>给排列，求逆序数</h3><p>这个问题比较简单，直接对每个数字求一下逆序数，相加就可以了。</p>
<p>可以用线段树，树状数组等优化</p>
<h3 id="根据逆序数推排列数"><a href="#根据逆序数推排列数" class="headerlink" title="根据逆序数推排列数"></a>根据逆序数推排列数</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>给定一个n元排列，它的逆序数存在且唯一,那么我们求一下已知一个n元排列的逆序数为m，这样的n元排列有多少？</p>
<p>我们用$f(n,m)$表示逆序数为m的n元排列的个数</p>
<h4 id="前提知识1"><a href="#前提知识1" class="headerlink" title="前提知识1"></a>前提知识1</h4><h5 id="对任意n-gt-2且0-lt-m-lt-C-n-2-时-f-n-m-gt-1；当m-gt-C-n-2-时-f-n-m-0"><a href="#对任意n-gt-2且0-lt-m-lt-C-n-2-时-f-n-m-gt-1；当m-gt-C-n-2-时-f-n-m-0" class="headerlink" title="对任意n>=2且0<=m<=$C_n^2$时$f(n,m)$>=1；当m>$C_n^2$时,$f(n,m)$=0"></a>对任意n&gt;=2且0&lt;=m&lt;=$C_n^2$时$f(n,m)$&gt;=1；当m&gt;$C_n^2$时,$f(n,m)$=0</h5><p>$f(2,0)=1,f(2,1)=1,f(2,2)=0$</p>
<p>易证</p>
<h4 id="前提知识2"><a href="#前提知识2" class="headerlink" title="前提知识2"></a>前提知识2</h4><h5 id="f-n-m-f-n-C-n-2-m"><a href="#f-n-m-f-n-C-n-2-m" class="headerlink" title="$f(n,m)=f(n,C_n^2-m)$"></a>$f(n,m)=f(n,C_n^2-m)$</h5><p>对于一个逆序数为m的n元排列，$a_1,a_2,a_3,…a_n$，那么$a_n,a_{n-1},a_{n-2}…a_1$的逆序数为$C_n^2-m$</p>
<p>反过来同理</p>
<h4 id="前提知识3"><a href="#前提知识3" class="headerlink" title="前提知识3"></a>前提知识3</h4><h5 id="f-n-1-m-f-n-m-f-n-m-1-…-f-n-m-n"><a href="#f-n-1-m-f-n-m-f-n-m-1-…-f-n-m-n" class="headerlink" title="$f(n+1,m)=f(n,m)+f(n,m-1)+…+f(n,m-n)$"></a>$f(n+1,m)=f(n,m)+f(n,m-1)+…+f(n,m-n)$</h5><p>考虑由$a_1,a_2,…a_n$组成的排列，那么我们在其中加上$a_{n+1}（a_{n+1}&gt;\{a_1,a_2,…a_n\}）$的话，$a_{n+1}$ 可以放在排列中的任意一个位置</p>
<p>放在末尾对逆序列没有影响，那么$f(n+1,m)+=f(n,m)$，放在首位的话逆序对增加$n$那么$f(n+1,m)+=f(n,m-n)$,以此类推，放在排列中的其他位置就是$f(n+1,m)=f(n,m-i)$</p>
<p>那么$f(n+1,m)=f(n,m)+f(n,m-1)+f(n,m-2)+…+f(n,m-n)$</p>
<h4 id="前提知识4"><a href="#前提知识4" class="headerlink" title="前提知识4"></a>前提知识4</h4><h5 id="f-n-0-f-n-C-n-2-1"><a href="#f-n-0-f-n-C-n-2-1" class="headerlink" title="$f(n,0)=f(n,C_n^2)=1$"></a>$f(n,0)=f(n,C_n^2)=1$</h5><h4 id="前提知识5"><a href="#前提知识5" class="headerlink" title="前提知识5"></a>前提知识5</h4><h5 id="f-n-1-f-n-C-n-2-1-n-1"><a href="#f-n-1-f-n-C-n-2-1-n-1" class="headerlink" title="$f(n,1)=f(n,C_n^2-1)=n-1$"></a>$f(n,1)=f(n,C_n^2-1)=n-1$</h5><p>$f(n,1)=f(n-1,1)+f(n-1,0)=f(n-1,1)+1$</p>
<h4 id="前提知识6"><a href="#前提知识6" class="headerlink" title="前提知识6"></a>前提知识6</h4><h5 id="f-n-2-f-n-C-n-2-2-C-n-2-1-n-gt-2"><a href="#f-n-2-f-n-C-n-2-2-C-n-2-1-n-gt-2" class="headerlink" title="$f(n,2)=f(n,C_n^2-2)=C_n^2-1(n>2)$"></a>$f(n,2)=f(n,C_n^2-2)=C_n^2-1(n&gt;2)$</h5><p>由3，4，5可知</p>
<p>$f(n,2)=f(n-1,2)+f(n-1,1)+f(n-1,0)=f(n-1,2)+n-1$</p>
<p>根据$f(2,2)=0$可证</p>
<p>同理：</p>
<p>$f(n,3)=C_n^3-C_n^2-C_n^1(n&gt;3)$</p>
<p>$f(n,4)=C_n^4+2C_n^3-C_n^1(n&gt;4)$</p>
<p>$f(n,5)=C_n^4+3C_n^4+2C_n^3-C_n^2+1(n&gt;5)$</p>
<p>$….$</p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>给定逆序数，求满足此逆序数的最小排序</p>
<h4 id="前提知识1-1"><a href="#前提知识1-1" class="headerlink" title="前提知识1"></a>前提知识1</h4><p>对于n的全排列，在它完全倒序的时候逆序数最多</p>
<h4 id="前提知识2-1"><a href="#前提知识2-1" class="headerlink" title="前提知识2"></a>前提知识2</h4><p>对于一个形如$1,2,3,…,i-1,i,n,…,i+1$的排列$q$，在数$n$前保证首项为1，且严格以公差为1递增而数n以后排列任意的数列</p>
<p>当数$n$之后是递减的时候$q$的逆序数最多，$t=C_{n-i}^{2}$</p>
<p>排列$q$是出现逆序对为$t$的最小排列</p>
<h4 id="前提知识3-1"><a href="#前提知识3-1" class="headerlink" title="前提知识3"></a>前提知识3</h4><p>我们把数$n$之后的第$k$小数与数$n$的前一个数(即$i$)交换，然后是数$n$后面保持逆序，这样得到的新排列的逆序对数为</p>
<p>$t=C_{n-i}^2+k$,且这个排列是逆序数$t$的最小排列</p>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>逆序对</tag>
        <tag>全排列</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第九场</title>
    <url>//8ea435a5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-The-Power-of-Fibonacci"><a href="#A-The-Power-of-Fibonacci" class="headerlink" title="A:  The Power of Fibonacci"></a>A:  The Power of Fibonacci</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你n,m,求$\sum\limits_{i=1}^{n}F_i^m \mod 1e9，F$是斐波那契数列 </p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先斐波那契数列在模意义下是有循环节的，而在$1e9$下的循环节有太大，</p>
<p>所以我们把$1e9$分为两个互质数字的乘积$512*1953125$,而在这两个模下的循环节是可以接受的</p>
<p>然后我们分别算出一个结果用中国剩余定理求出答案就行了</p>
<p>注意快速幂模的时候有模$1e9$不然会T，可能是别的模数取模次数太多造成的超时</p>
<p><code>做完我傻了</code></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span>    </span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">Ksm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> mod<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1953125</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> y<span class="token punctuation">;</span>
    y <span class="token operator">=</span> t <span class="token operator">-</span> a<span class="token operator">/</span>b<span class="token operator">*</span>y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">inv</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">ex_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nr <span class="token operator">=</span> n<span class="token operator">/</span>j<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> j <span class="token operator">&gt;=</span> i<span class="token punctuation">)</span> nr <span class="token operator">++</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> Mod<span class="token punctuation">)</span> <span class="token operator">*</span> nr<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> Inv <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>mod<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll res <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> mod<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> Inv <span class="token operator">+</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token operator">%</span>Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="B-Quadratic-equation"><a href="#B-Quadratic-equation" class="headerlink" title="B: Quadratic equation"></a>B: Quadratic equation</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>$x+y\equiv b\mod p, x\cdot y\equiv c \mod p$</p>
<p>求$x,y$</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>二次剩余基础题，可惜我不会</p>
<p>根据初中知识我们可以化成这样$(x-\frac{b}{2})^2\equiv \frac{b^2-4c}{4} \mod p$</p>
<p>下面就是验证$\frac{b^2-4c}{4}$是否是模$p$下的二次剩余,模板题</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">{</span>
    ll p<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll w<span class="token punctuation">;</span>
<span class="token comment">//二次域乘法</span>
T <span class="token function">Mul_er</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T ans<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>p <span class="token operator">*</span> b<span class="token punctuation">.</span>p <span class="token operator">+</span> a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>d <span class="token operator">%</span> p <span class="token operator">*</span> w <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>p <span class="token operator">*</span> b<span class="token punctuation">.</span>d <span class="token operator">%</span> p <span class="token operator">+</span> a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>p <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//二次域快速幂</span>
T <span class="token function">Ksm_er</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T ans<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ans<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">Mul_er</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token function">Mul_er</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">//求勒让德符号</span>
ll <span class="token function">Legendre</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">Recever</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">%=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> a <span class="token operator">+=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Legendre</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    ll a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
        t <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">-</span> n<span class="token punctuation">;</span>
        w <span class="token operator">=</span> <span class="token function">Recever</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Legendre</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T tmp<span class="token punctuation">;</span>
    tmp<span class="token punctuation">.</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> tmp<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    T ans <span class="token operator">=</span> <span class="token function">Ksm_er</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span>p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        ll x <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1 -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        ll y <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> x <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="C-Inversions-of-all-permutations"><a href="#C-Inversions-of-all-permutations" class="headerlink" title="C: Inversions of all permutations"></a>C: Inversions of all permutations</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>$\sum\limits_{r_i is a permutation of \{a_i\}}b^{t(r_i)}\mod 1e9+7$</p>
<p>求$b$的序列$a$的全排列的逆序对次幂之和</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>对于一个没有重复数字的序列，其逆序数为</p>
<pre class="line-numbers language-none"><code class="language-none">1: 1
2: 1 1
3: 1 2 2 1
4: 1 3 5 6 5 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>3:1 2 2 1</code></p>
<p>代表长度为$3$的序列的逆序数为$0$的有$1$个，逆序数为$1$的有$2$个，逆序数为$3$的有$2$个，逆序数为$3$的有$3$个</p>
<p>我们用$dp$来代表答案，那么长度为$3$的答案就是$dp[3]=b^0+2b^1+2b^2+b^3$</p>
<p>而$dp$转移是有规律的$dp[i] = dp[i-1]\times \sum\limits_{j=0}^{i-1}b^j$</p>
<p>而对于有重复数字的序列，其结果就是$\frac{dp[n]}{\prod dp[重复次数]}$</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> b <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> 
            sum <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> sum <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>二次剩余</title>
    <url>//98066e3c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>对于$P, n$ 如果存在$x$使得 $x^2 \equiv n \mod P$ 则称$n$是模$P$意义下的二次剩余</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>对于$x^2\equiv n(mod p)$ 总共有$\frac{p-1}{2}$ 个n能使得方程有解</p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>考虑所有的$x^2$ ,如果存在两个不同的数字$1&lt; u,v &lt; p$,$u^2\equiv v^2(\mod p)$ ,那么显然$(u^2-v^2)\mod p==0$</p>
<p>即$(u+v)(u-v)\mod p == 0$ ，那么就只能是$u+v\equiv 0(\mod p)$，两个数字相互对应，所有共有$\frac{p-1}{2}$个不同的平方</p>
<h2 id="勒让德符号"><a href="#勒让德符号" class="headerlink" title="勒让德符号"></a>勒让德符号</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p> $(\frac{a}{p})= \begin{cases} 1, &amp; a在模p意义下是二次剩余\\ -1，&amp; a在模p意义下是非二次剩余 \\ 0, &amp; a\equiv 0 (mod p) \end{cases}$ </p>
<h3 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h3><p>$(\frac{a}{p})\equiv a^{\frac{p-1}{2}}(\mod p)$</p>
<h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p>1.若$a$是模p下的二次剩余，那么存在$x^2\equiv a (\mod p)$ ,那么$x^{p-1}\equiv a^{\frac{p-1}{2}}\equiv (\frac{a}{p})\equiv 1(\mod p)$ 根据费马小定理</p>
<p>在$a$是模$p$意义下的二次剩余时$x^{p-1} \equiv 1(\mod p)$显然成立</p>
<p>2.若$a$是模$p$意义下的非二次剩余,那么跟上面同理，显然不存在$x^{p-1}\equiv -1(\mod p)$</p>
<p>3.当$a\equiv 0(\mod p)$显然满足</p>
<h2 id="开根复数域"><a href="#开根复数域" class="headerlink" title="开根复数域"></a>开根复数域</h2><p>我们先定义一个数域$\mathsf{F_p}$定义为$0$到$p-1$这$p$个数在模$p$意义下加减乘除构成的集合</p>
<p>数域$\mathsf{F_{p^2}}$定义为一个开根的复数域，即如果一个$a^2-n$不能开根$(勒让德符号(\frac{a}{p})=-1)$ ，那么我们加上一个复数域</p>
<p>就可以开根,(类似$\sqrt{-1}$我们加上一个复数域就可以开根)，我们另这个不能开根的数字$\sqrt{a^2-n}$为复数域的”虚数单位元”$(类似\sqrt{-1})$ 并设它为$w$ ,那么则任意一个复数域的数字都可以表示为$a+bw$($a$是实部，$b$是虚部，$w$是虚数单位元)  </p>
<p>$\mathsf{F_{p^2}}$数域满足不同复数域的所有四则运算</p>
<p> <img src="二次剩余/img1.jpg" alt="img1"></p>
<h3 id="定理-2"><a href="#定理-2" class="headerlink" title="定理"></a>定理</h3><p>$w^p\equiv -w(\mod p)$</p>
<h4 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h4><p>$w^p\equiv w\cdot w^{p-1} \equiv w\cdot (w^2)^{\frac{p-1}{2}}\equiv w\cdot (a^2-n)^{\frac{p-1}{2}} \equiv -w (\mod p)$</p>
<h3 id="定理-3"><a href="#定理-3" class="headerlink" title="定理"></a>定理</h3><p>$(a+b)^n\equiv a^n+b^n(\mod n)(n \in P)$</p>
<h4 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h4><p>有二项式定理可知: $(a+b)^n\equiv \sum\limits_{i=0}^{n}C_n^ia^ib^{n-i}(\mod n)$</p>
<p>因为n是一个质数，所以除了$i=0,i=n$时，其他的$C_n^i$是无法别消除这能模$p$模成$0$</p>
<h2 id="二次剩余证明"><a href="#二次剩余证明" class="headerlink" title="二次剩余证明"></a>二次剩余证明</h2><p>我们首先随机出来一个$a$,使得$(\frac{a^2-n}{p})$为-1，也就是不能开根，然后我们把他定义为复数域的单位根</p>
<p>$w=\sqrt{a^2-n}$</p>
<p>那么我们求$x^2\equiv n(\mod p)$</p>
<p>$x^2\equiv n\equiv a^2-(a^2-n)\equiv a^2-w^2$</p>
<p>$\equiv (a-w)(a+w)\equiv (a^p+w^p)(a+w)(a满足费马小定理 a^{p-1}\equiv 1(\mod p))$</p>
<p>$\equiv (a+w)^p(a+w)\equiv (a+w)^{p+1}$</p>
<p>$所以x\equiv (a+w)^{\frac{p+1}{2}}$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Ksm</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> w<span class="token punctuation">;</span>
<span class="token comment">//二次域乘法</span>
T <span class="token function">Mul_er</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T ans<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>p <span class="token operator">*</span> b<span class="token punctuation">.</span>p <span class="token operator">+</span> a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>d <span class="token operator">%</span> p <span class="token operator">*</span> w <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>p <span class="token operator">*</span> b<span class="token punctuation">.</span>d <span class="token operator">%</span> p <span class="token operator">+</span> a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>p <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//二次域快速幂</span>
T <span class="token function">Ksm_er</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T ans<span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ans<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">Mul_er</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token function">Mul_er</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">//求勒让德符号</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Legendre</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Recever</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">%=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> a <span class="token operator">+=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Legendre</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
        t <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">-</span> n<span class="token punctuation">;</span>
        w <span class="token operator">=</span> <span class="token function">Recever</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Legendre</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T tmp<span class="token punctuation">;</span>
    tmp<span class="token punctuation">.</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> tmp<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    T ans <span class="token operator">=</span> <span class="token function">Ksm_er</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">.</span>p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
ll x <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>无解，否则
x和p<span class="token operator">-</span>x都是合法解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二次剩余</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第八场</title>
    <url>//f46914fa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="J-Just-Jump"><a href="#J-Just-Jump" class="headerlink" title="J:Just Jump"></a>J:Just Jump</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个长度为L的路径，你起始点在0号点，每次最少移动d步，而且在$t_i$时刻$p_i$点会遭遇攻击</p>
<p>问你到达L点有多少种方法</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先不考虑攻击，到达L点的方法就是一个简单dp  $dp[n]=dp[0]+dp[1]+dp[2]+..+dp[n-d]$</p>
<p>可以用前缀和维护一下，这样dp的复杂度就是O(L)</p>
<p>那么考虑攻击的时候呢，一个明显的思路就是我们已经用dp算出了总的方法数，</p>
<p>那么我们把受到攻击是的路线减去就是不受攻击到达L的方法数</p>
<p>那么当我们在$(t_i,p_i)$受到攻击的方法数是多少呢，我们先把攻击按照位置从小到大排序，时间从小到大排序</p>
<p>首先我们肯定是从$[0,p_i-d]$这些点数转移来的，并且前面的$t_i-1$步每次最少走d步</p>
<p>那么我们在减去$(t_i-1)(d-1)$就变成从最少有1步，那么就是从$[1,p_i-d-(t_i-1)(d-1)]$找$t_i-1$个点，也就是组合数$C_{p_i-t_id+t_i-1}^{t_i-1}$ </p>
<p>但是现在又有了一个问题，就是用$C_{p_i-t_id+t_i-1}^{t_i-1}$ 来计算</p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblvpbk8kyj30lg06pq37.jpg" alt="img1"></p>
<p>我们计算了0—&gt;D的所有路径，但是其中包括了从C到D的路径，而这部分路径因为C的被攻击所以是无效的（C被攻击的时间小于D，C在D之前被攻击），所以我们要减去（C—&gt;D）这部分路径</p>
<p>这样我们就把从0开始$t_i$时刻到达攻击点$p_i$ 的路径数$f[i]$全部算了出来，那么结果就是$dp[L]-=\sum\limits_{i=1}^{m}f[i]*dp[L-node[i].p]$</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
ll Fac<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">3005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll pref<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll L<span class="token punctuation">,</span> d<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    ll t<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
    bool friend operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>p <span class="token operator">==</span> b<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>t <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>t<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>p <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>node<span class="token punctuation">[</span><span class="token number">3005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        Fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    inv<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>Fac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">Calc</span><span class="token punctuation">(</span>ll t<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span>t<span class="token operator">*</span>d<span class="token operator">+</span>t<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Fac<span class="token punctuation">[</span>p<span class="token operator">-</span>t<span class="token operator">*</span>d<span class="token operator">+</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span>inv<span class="token punctuation">[</span>p<span class="token operator">-</span>t<span class="token operator">*</span>d<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>node<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> node<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Calc</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">&gt;</span> node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> 
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">Calc</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">-</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">-</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token operator">%</span>mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> pref<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pref<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pref<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> sum<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">-</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sum<span class="token punctuation">[</span>L<span class="token operator">-</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第七场</title>
    <url>//68238393/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="H-Pair"><a href="#H-Pair" class="headerlink" title="H:Pair"></a>H:Pair</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你3个数字$A,B,C$,让你计算$1\leq x\leq A,1\leq y\leq B$,并且$(x$ $and$ $y)&gt;C$或者$(x$ $xor$ $y)&lt;C$ 这样的</p>
<p>$<x,y>$有多少对</x,y></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>很像数位dp，枚举二进制的每一位，4种状态分别是（A临界，B临界，A$and$B临界，A$xor$B临界）</p>
<p>这样直接数位dp可以算出有多少对不满足条件，然后用总数减去</p>
<p>因为$x,y&gt;1$,所有要在数位dp算出的结果中减去x为0时和y为0时的数量</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
ll dp<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num_a<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_b<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_c<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">GetNum</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>num_a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num_a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>num_b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>num_c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    num_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_a<span class="token punctuation">[</span><span class="token operator">++</span>num_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        a <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    num_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_b<span class="token punctuation">[</span><span class="token operator">++</span>num_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        b <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    num_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_c<span class="token punctuation">[</span><span class="token operator">++</span>num_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> c <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        c <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> an<span class="token punctuation">,</span> <span class="token keyword">int</span> xo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pos<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>an<span class="token punctuation">]</span><span class="token punctuation">[</span>xo<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>an<span class="token punctuation">]</span><span class="token punctuation">[</span>xo<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ua <span class="token operator">=</span> a <span class="token operator">?</span> num_a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ub <span class="token operator">=</span> b <span class="token operator">?</span> num_b<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> uan <span class="token operator">=</span> an <span class="token operator">?</span> num_c<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> uxo <span class="token operator">=</span> xo <span class="token operator">?</span> num_c<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ll ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ua<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> ub<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> uan <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i<span class="token operator">^</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> uxo<span class="token punctuation">)</span> 
                ret <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>ua<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">==</span>ub<span class="token punctuation">)</span><span class="token punctuation">,</span> an<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token operator">==</span>uan<span class="token punctuation">)</span><span class="token punctuation">,</span> xo<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">^</span>j<span class="token punctuation">)</span><span class="token operator">==</span>uxo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>an<span class="token punctuation">]</span><span class="token punctuation">[</span>xo<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GetNum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll ans <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0ll</span><span class="token punctuation">,</span> a<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0ll</span><span class="token punctuation">,</span> b<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">*</span>b<span class="token operator">-</span>ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="I-Chessboard"><a href="#I-Chessboard" class="headerlink" title="I:Chessboard"></a>I:Chessboard</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你一个N，M，然后你可以任意构造一个 k * k的矩阵，使得矩阵内每个元素最少是M，且任意不同行不同列的 k 个元素总和不超过N且都相同，问有多少种构造方法。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblwd83vbfj311u0l5aee.jpg" alt="img1"></p>
<p>我们枚举$k$，我们可以把每个元素减去$M$，那么就相当于$N$减去$ k \times M$,简化问题并且不影响答案</p>
<p><strong><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblwddv055j311p0lan1w.jpg" alt="img2"></strong></p>
<p>构造两个矩阵$Ai,Bi $对于这两个矩阵，我们可知他们前面的系数和为$T$则满足结果  等价于将$T$ 分成$2\times k$份($a$，$b$各有$k$个)采用隔板法 （将$T$ 转换成$1$排，每两个$1$之间有一个隔间，那么$k \times 2 + T$有$k \times 2 - 1 +T$个​隔间，我们选择$k \times 2 - 1$个隔间就可以把这些$1$分成$k \times 2$份</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblwdgjpqdj311x0l7afj.jpg" alt="img3"></p>
<p>为什么会算重，我们拿$T=3,k=2$来举个例子，比如$a_1=1,a_2=2,b_1=0,b_2=0$</p>
<p>那这个矩阵就是长这个样子</p>
<p>$\begin{bmatrix} a_1+b_1 &amp;a_1+b_2 \\\ a_2+b_1 &amp;a_2+b_2 \end{bmatrix}$ $==&gt;$ $\begin{bmatrix} 1 &amp; 1\\ 2 &amp;2 \end{bmatrix}$</p>
<p>跟$\begin{bmatrix} a_1-1+b_1+1 &amp;a_1-1+b_2+1\\ a_2-1+b_1+1 &amp;a_2-1+b_2+1 \end{bmatrix}$ $==&gt;$ $\begin{bmatrix} 1 &amp; 1\\ 2 &amp;2 \end{bmatrix}$</p>
<p>是相同的，也就是当$a_i$全部减1，而$b_i$全部加1时，跟原来的矩阵相同，所以这就重复了,那去重也就是这样去</p>
<p>PS:这篇博客其实是我扒<a href="https://blog.csdn.net/henucm/article/details/99730917">CM大佬</a>的=^=</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>

ll fac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
        fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    inv<span class="token punctuation">[</span>maxn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>maxn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxn<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> inv<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> inv<span class="token punctuation">[</span>n<span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Fac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">*</span> m <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> tt <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token operator">*</span>m<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> tt<span class="token punctuation">;</span> t <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans <span class="token operator">+=</span> <span class="token function">C</span><span class="token punctuation">(</span>t<span class="token operator">+</span>k<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> ans <span class="token operator">-=</span> <span class="token function">C</span><span class="token punctuation">(</span>t<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="K-Function"><a href="#K-Function" class="headerlink" title="K:Function"></a>K:Function</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>$csl(p,x)= \begin{cases} 3e+1 &amp; x=p^e\&amp; p\in prime \&amp; p = a^2+b^2\\1 &amp; x=p^e \&amp; p!= a^2+b^2\\0 &amp; others\end{cases}$</p>
<p>$tl(p,x)=\max\limits_{d|x}csl(p,d)$</p>
<p>求$S=\sum\limits_{i=1}^{n}\prod\limits_{p} tl(p,i)$</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>可得知</p>
<p>$tl(p,x)=\begin{cases}3e+1&amp; x=p^e\&amp; p\in prime \&amp;p=a^2+b^2 \\1 &amp; others\end{cases}$</p>
<p>$f(x)=\prod\limits_{d|n}\begin{cases}3e+1&amp; x=p^e\&amp; p\in prime \&amp;p=a^2+b^2 \\1 &amp; others\end{cases}$</p>
<p>答案就是$f(i)$的前缀和,即$S=\sum\limits_{i=1}^{n}f(i)$</p>
<p>我们先不考虑$p=a^2+b^2$，考虑$i$为质数时的情况$f(i)=3+1$</p>
<p>$i$为质数次幂的情况$f(p^e)=3e+1$</p>
<p>这样可以快速算出i为质数和i的质数次幂的情况</p>
<p>可以用$min_25$筛来求这个前缀和</p>
<p>那么现在我们来考虑$p=a^2+b^2$这个限制，因为$min_25$筛由构造一个函数，把所有数字看成质数，</p>
<p>我们可以设$h[i][4]$，来代表i以前由多少数字余数为$0，1，2，3$，通过dp可以得到有多少质数余数为$0，1，2，3$</p>
<p>因为费马二次定理，我们知道模$4$与$1$的可以分解成$a^2+b^2$，而模$4$余$3$的一定不行，那么质数部分我们就都算出来了，下面的合数部分就用$min_25$筛就好了</p>
<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

ll sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> id1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll sqr<span class="token punctuation">;</span>
bool vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">f</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span> ll e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">init</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prime<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                sum<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>tot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            vis<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">getW</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//离散下标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> l <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        r <span class="token operator">=</span> n<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">/</span>l<span class="token punctuation">;</span><span class="token comment">//把所有数字当成质数</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        h<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sqr<span class="token punctuation">)</span> id1<span class="token punctuation">[</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">else</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>w<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">getG</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//dp都质数模4的个数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ll j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ll d <span class="token operator">=</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ll id <span class="token operator">=</span> d <span class="token operator">&lt;=</span> sqr <span class="token operator">?</span> id1<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">:</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> r <span class="token operator">++</span><span class="token punctuation">)</span> 
                h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">*</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">*</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ll <span class="token function">S</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll y<span class="token punctuation">,</span> ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ll id <span class="token operator">=</span> x <span class="token operator">&lt;=</span> sqr <span class="token operator">?</span> id1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">:</span> id2<span class="token punctuation">[</span>n<span class="token operator">/</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> h<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模4余1的值为4，余3的值为1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> y<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot <span class="token operator">&amp;&amp;</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll t <span class="token operator">=</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">,</span> t <span class="token operator">=</span> t <span class="token operator">*</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
            ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">S</span><span class="token punctuation">(</span>x<span class="token operator">/</span>t<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> t<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll n<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sqr <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span>sqr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getW</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getG</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//S(n,1,n)+f(1)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第五场</title>
    <url>//b40c00ff/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="B-generator-1"><a href="#B-generator-1" class="headerlink" title="B:generator 1"></a>B:generator 1</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你$x_0,x_1,a,b, x_i=ax_{i-1}+bx_{i-2}$让你求出$x_n$</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>典型的矩阵快速幂，但是n的范围太大，所以得快速幂得用十进制快速幂</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
ll mod<span class="token punctuation">;</span>
  
<span class="token keyword">struct</span> <span class="token class-name">Matrix</span><span class="token punctuation">{</span>
    ll mat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
    <span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
        mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">void</span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
  
<span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Matrix x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
  
Matrix operator <span class="token operator">*</span> <span class="token punctuation">(</span>Matrix x<span class="token punctuation">,</span> Matrix y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Matrix t<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
                t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">.</span>mat<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  
Matrix <span class="token function">Ksm</span><span class="token punctuation">(</span>Matrix x<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//cout &lt;&lt; b &lt;&lt; endl;</span>
    Matrix t<span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> t <span class="token operator">=</span> t <span class="token operator">*</span> x<span class="token punctuation">;</span>
        x <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Print(t);</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  
  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll x0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%lld"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s<span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Matrix t<span class="token punctuation">,</span> ans<span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x0<span class="token punctuation">;</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x1<span class="token punctuation">;</span>
    Matrix res<span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// Print(res);</span>
       <span class="token comment">// Print(t);</span>
    <span class="token punctuation">}</span>
    ans <span class="token operator">=</span> ans <span class="token operator">*</span> res<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="C-generator-2"><a href="#C-generator-2" class="headerlink" title="C:generator 2"></a>C:generator 2</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有这么一个递推式$x_i=(a\cdot x_{i-1}+b)\mod p$，让你求$v$在$[1,n-1]$中第一次出现的位置</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为递推式模$p$，所以$x$的循环节一定小于$p$，</p>
<p>而$x$又是这种形式$x_n=a(a(a(ax+b)+b)+b)+b$ </p>
<p>所以我们的任务就变成$A^{m} \equiv v\mod p$求最小的$m$</p>
<p>${A^1=x,A^2=(ax+b),A^3=a(ax+b)+b,A^4=a(a(ax+b)+b)+b)+b}$</p>
<p>而$A^m\equiv v\mod p$明显可以用BSGS</p>
<p>但是BSGS的一个使用条件能不能求出$A^{-i*S}$</p>
<p>但是我们怎么求出$A^{-i*S}$呢</p>
<p>正常的加是乘a加b，那么除就是除a减$\frac{b}{a}$</p>
<p>举个例子:</p>
<p>$x_0=x,x_1=ax+b,x_2=a(ax+b)+b,x_3=a(a(ax+b)+b)+b$</p>
<p>我们从$x_3$降到$x_1$,$x_3$先除$a$再减去$\frac{b}{a}$变成$x_2$，然后再除$a$减去$\frac{b}{a}$变成$x_1$</p>
<p>那我们从$A^{2S+j}$降到$A^{S+j}$只需要进行$S$次操作即可</p>
<p>这样我们就可以用BSGS了</p>
<p>跟BSGS的步骤差不多，我们可以把式子化成 $A^{i*S+j}\equiv v\mod p$</p>
<p>我们可以预处理出来$A^S$ ，然后遍历找到一个$A^j\equiv v<em>A^{-i</em>S}\mod p$</p>
<p>也就是说在这个式子中$A^{-i*S}$不是一个值，而是一种操作，把$v$所代表的次数降下$S$</p>
<p>$x_0=1,x_1=2*1+1,x_2=,x_4=15,x_5=31$</p>
<p>因为我们已经预处理了一个$A^S$,那么在我们遍历$i$的过程中每次降下一个$S$，知道找到或者找不到</p>
<p>用Hash存一下$A^j$</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>pis<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span>
pis d<span class="token punctuation">[</span>limit<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> vals<span class="token punctuation">[</span>limit<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>limit<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">inv</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> Q<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld %lld %lld %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>Q <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> x0<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d<span class="token operator">+</span>limit<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vals<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> pos<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">==</span> d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&amp;&amp;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> inv_a <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inv_b <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token operator">*</span> inv_a <span class="token operator">%</span> p<span class="token punctuation">;</span> 
    ll aa <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aa <span class="token operator">=</span> aa <span class="token operator">*</span> inv_a <span class="token operator">%</span> p<span class="token punctuation">;</span>
        bb <span class="token operator">=</span> <span class="token punctuation">(</span>bb <span class="token operator">*</span> inv_a <span class="token operator">+</span> inv_b<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>Q <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> vals<span class="token operator">+</span>cnt<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span> vals<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">&lt;</span> cnt <span class="token operator">&amp;&amp;</span> vals<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> p<span class="token operator">/</span><span class="token punctuation">(</span>limit<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v <span class="token operator">=</span> <span class="token punctuation">(</span>aa <span class="token operator">*</span> v <span class="token operator">+</span> bb<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
            it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> vals<span class="token operator">+</span>cnt<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span> vals<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">&lt;</span>cnt <span class="token operator">&amp;&amp;</span> vals<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> res <span class="token operator">=</span> i<span class="token operator">*</span><span class="token punctuation">(</span>limit<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>pos<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第二场</title>
    <url>//3bd8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-Eddy-Walker"><a href="#A-Eddy-Walker" class="headerlink" title="A:Eddy Walker"></a>A:Eddy Walker</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个n的点的环，一开始从0号点开始，每次可以前进1或者后退1，问第一次站在m号点的时候已经遍历完所有点的概率，求出前缀概率积</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>一：</p>
<p>暴力打表找规律</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">double</span> p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
bool vis<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

bool <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">double</span> px<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>px <span class="token operator">&lt;</span> <span class="token number">1e-10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> nxt <span class="token operator">=</span> <span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> px<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        nxt <span class="token operator">=</span> <span class="token punctuation">(</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> px<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> p<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> n <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n: %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i: %d, p: %lf\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblvqxupfjj304g08ymx5.jpg" alt="img1"></p>
<p>这是打表的结果，可以发现结果与m无关(当m&gt;0时)而且近似为$\frac{1}{n-1}$</p>
<p>二：<br>数学分析:<br>因为是最后站在一个非0的位置上，而每个非零的点的最后一次到达的概率是相同的，所以是$\frac{1}{n-1}$</p>
<h3 id="B-Eddy-Walker2"><a href="#B-Eddy-Walker2" class="headerlink" title="B:Eddy Walker2"></a>B:Eddy Walker2</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>现在是给你一条链，从0点出发，一个最多走k步，每一步的概率都是$\frac{1}{k}$ ,问最后走到n的概率</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>根据题意可以写出一个递推式子：</p>
<p>$dp[i] = \frac{1}{k}\sum\limits_{i=1}^{k}dp[n-i]$</p>
<p>如果n很小的话，可以直接用dp来写，但是n的大小是$1e^{9}$，所以我们就得用BM直接套板子线性递推</p>
<p>但是有一个问题，就是n可能为无穷，我们可以这样来写，</p>
<p>我们每次行动的移动记录期望是$\frac{1}{k}\sum\limits_{i=1}^{k}i=\frac{(k+1)k}{2k}=\frac{k+1}{2}$ ,也就是每行动一次大概移动$\frac{k+1}{2}$ ，而我们移动到n的次数可能为m次，那么移动的距离期望就是$\frac{(k+1)m}{2}$ 而n在其中，在这$\frac{(k+1)m}{2}$个点中，我们一共会走m个点，那么就是n在这m个点之间的概率$\frac{1}{m}$ , 期望就是$m$  ,而在整体的概率就是$\frac{m}{\frac{(k+1)m}{2}}=\frac{2}{k+1}$ </p>
<p>$dp[i]=\begin{cases} \frac{1}{k}\cdot (dp[i-1]+dp[i-2]+…+dp[i-k]),i&gt;=k\\ \frac{2}{k+1},i=\infty \\\end{cases}$</p>
<h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> ll mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sz</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> VI<span class="token punctuation">;</span>
 
ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> _<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
namespace Linear_Seq<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span>
    ll res<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> base<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> _c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> _md<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> Md<span class="token punctuation">;</span>
     
    <span class="token keyword">void</span> <span class="token function">Mul</span><span class="token punctuation">(</span>ll <span class="token operator">*</span>a<span class="token punctuation">,</span> ll <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token operator">+</span>k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> _c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                _c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>_c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> k<span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>Md<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                _c<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token operator">+</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>_c<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token operator">+</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> _c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> _md<span class="token punctuation">[</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span> VI a<span class="token punctuation">,</span> VI b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">sz</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">sz</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">sz</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> _md<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _md<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Md<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>_md<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> Md<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>pnt<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> pnt <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> pnt<span class="token punctuation">;</span> p <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Mul</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> res<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>Md<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                    res<span class="token punctuation">[</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> _md<span class="token punctuation">[</span>Md<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    VI <span class="token function">BM</span><span class="token punctuation">(</span>VI s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        VI <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ll d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> s<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>m<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> L <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                VI T <span class="token operator">=</span> C<span class="token punctuation">;</span>
                ll c <span class="token operator">=</span> mod <span class="token operator">-</span> d <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">sz</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> C<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">+</span> c <span class="token operator">*</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                L <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> L<span class="token punctuation">;</span> B <span class="token operator">=</span> T<span class="token punctuation">;</span>
                b <span class="token operator">=</span> d<span class="token punctuation">;</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                ll c <span class="token operator">=</span> mod <span class="token operator">-</span> d <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">sz</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> C<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span> <span class="token operator">+</span> c <span class="token operator">*</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token operator">++</span> m<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> C<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">int</span> <span class="token function">Gao</span><span class="token punctuation">(</span>VI a<span class="token punctuation">,</span> ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        VI c <span class="token operator">=</span> <span class="token function">BM</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">sz</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mod<span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token function">VI</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sz</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
using namespace Linear_Seq<span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    VI <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">Ksm</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> mod<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">Gao</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="E-MAZE"><a href="#E-MAZE" class="headerlink" title="E:MAZE"></a>E:MAZE</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一个NxM的地图，0表示可走，1表示不可走，</p>
<p>有$Q$次询问，可能会对某一位置取反，可能问你从$(1,a)$到$(n,b)$有多少走法</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>因为题目 要求不能往回走，所以如果我们从下面开始走，那么我们在横向移动是就不能改变方向，然后向上走</p>
<p>我们先用$dp$来考虑一下做法：设$dp[i][j]$是经由下面$dp[i-1][j]$走过来的走法数，那么从左边或右边走过来的方法数呢，我们可以在最后在加一层，那么$dp[0][j]$就加上了第1层左右到达$dp[1][j]$的方法数</p>
<p>那么$dp[i][j] = sum(dp[i-1][j]+dp[i-1][j-1] + … dp[i-1][j-k])+sum(dp[i-1][j+1]+dp[i-1][j+2]+…+dp[i-1][j+k])$</p>
<p>$dp[i][j]$由$i-1$层，$i$的左边第一个1和$i$的右边第一个1，这么一段区间里的$dp$值转移过来</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblvr084gfj30c401tgld.jpg" alt="img2"></p>
<p>比如这样一个2X6的地图,</p>
<p>$dp[1][3]=dp[2][2]+dp[2][3]+dp[2][4]+d[2][5]$</p>
<p>$dp[1][4]=dp[2][2]+dp[2][3]+dp[2][4]+d[2][5]$</p>
<p>由于上一层的每个值都是有下面的值组成，那么我们就可以构造出一个矩阵</p>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gblvr2ih74j306b04la9u.jpg" alt="img3"><br>这样我们就能从第$i$层转移到第$i-1$层了</p>
<p>现在来考虑地图修改的情况</p>
<p>这n个矩阵我们可以用一个线段树来维护，地图修改时用线段树来修改矩阵就行了</p>
<h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
 
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> Q<span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">Maze</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> maze<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token function">Maze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
 
    Maze friend operator <span class="token operator">*</span> <span class="token punctuation">(</span>Maze a<span class="token punctuation">,</span> Maze b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Maze c<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span>
                    c<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">Seg</span><span class="token punctuation">{</span>
    Maze w<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">--</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">else</span> w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>maze<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">else</span> w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>maze<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">Build</span><span class="token punctuation">(</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Build</span><span class="token punctuation">(</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">Updata</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                    w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">--</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">else</span> w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>maze<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">else</span> w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>maze<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>rt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">Updata</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Updata</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>seg<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    seg<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//seg.Print(1, 1, N);</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>Q <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> op<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> c<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> seg<span class="token punctuation">.</span><span class="token function">Updata</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            seg<span class="token punctuation">.</span><span class="token function">Updata</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Maze ans <span class="token operator">=</span> seg<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            Maze t1<span class="token punctuation">;</span>
            t1<span class="token punctuation">.</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            t1 <span class="token operator">=</span> t1 <span class="token operator">*</span> ans<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> t1<span class="token punctuation">.</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
     
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="F-Partition-problen"><a href="#F-Partition-problen" class="headerlink" title="F:Partition problen"></a>F:Partition problen</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给你2N个人，每对人如果不在同一队的话，有一个竞争值，你要把这些人分为人数相等的两个队，使得竞争值最大</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>直接暴力</p>
<h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//队友代码：</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> ll cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span> b<span class="token punctuation">)</span> sum <span class="token operator">+=</span> c<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span> a<span class="token punctuation">)</span> sum <span class="token operator">+=</span> c<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="H-Second-Large-Rectangle"><a href="#H-Second-Large-Rectangle" class="headerlink" title="H:Second Large Rectangle"></a>H:Second Large Rectangle</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给你一个NXM的矩阵，只有01组成，求第二大的全为1的子矩阵</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>单调栈求最大子矩阵，在过程中就也求出了第二大的子矩阵，然后第一大的宽减一，高减一，和第二大的比较输出最大的</p>
<p>单调栈求最大子矩阵的方法：</p>
<p>逐层遍历，对于每一层求出一个h[]，h表示以此层为底1的高度</p>
<p>比如：<br><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblvr4t3iuj305502a0sh.jpg" alt="img4"></p>
<p>这样一个矩阵,h为：</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblvr776j5j308802qjr5.jpg" alt="img5"></p>
<p>这样对于每一层就变成一个求最大矩阵的形式，</p>
<p>对于每一层用单调栈求出最大矩阵，注意要记得去重，像上图中的第二层，第二列，第三列，第四列求出的是同一个矩阵，不去重的话无法跟第二大的比较，去重很简单，就记录一下，左边界和上边界即可，</p>
<h4 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Pis</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> res<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h<span class="token punctuation">;</span>

  bool friend operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Pis a<span class="token punctuation">,</span> Pis b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>res <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> maz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> suf<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
stack<span class="token operator">&lt;</span>pis<span class="token operator">&gt;</span> sta<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>pis<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Pis<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getPS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span><span class="token operator">-</span>inf<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      suf<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">getH</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>maz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
      maz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">getH</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">getPS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>pis<span class="token punctuation">{</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          mp<span class="token punctuation">[</span>pis<span class="token punctuation">{</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Pis<span class="token punctuation">{</span>sum<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>  
  <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tx <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>res<span class="token operator">/</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">,</span> ty <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>res<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>tx<span class="token operator">*</span><span class="token punctuation">(</span>ty<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>ty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第一场</title>
    <url>//aba2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A. Equivalent Prefixes"></a>A. Equivalent Prefixes</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>两个序列相等的条件是RMQ(u,l,r) = RMQ(u,l,r)，($1\leq l \leq r\leq m$) ,RMQ(u,l,r)代表序列u，的任意区间(l,r）的最小值的序号，求一个最大的P，使得$\lbrace a_1, a_2,…a_p \rbrace$和$\lbrace b_1,b_2,…b_p \rbrace$相等</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们假设$last_a[i]= max\lbrace j|j&lt;i \&amp;\&amp; a_j&lt;a_i\rbrace$ ,也就是$a_i$左边序号最大的小于$a_i$的数字的位置，</p>
<p>我们用单调栈去求这个last，求得以后</p>
<p>那么我们求序列[1,r]的RMQ，就是找到last[r],last[last[r]],last[last[last[r]],的值</p>
<p>如果两个序列的last数组相同，那么就证明$RMQ(a,l,r)=RMQ(b,l,r)$</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lasta<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> lastb<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

stack<span class="token operator">&lt;</span>pis<span class="token operator">&gt;</span> sta<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lasta<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lastb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pis<span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lasta<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> lastb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cnt <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B.Integration"></a>B.Integration</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>已知$\int_0^{\infty}\frac{1}{1+x^2}dx=\frac{\pi}{2}$</p>
<p>求：$\frac{1}{\pi}\int_0^{\infty}\frac{1}{\prod\limits_{i=1}^{n}(a_i^2+x^2)}dx$</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>我们先算$\frac{1}{\prod\limits_{i=1}^{n}(a_i^2+x^2)}$<br>$=\frac{1}{a_1^2+x^2}  \frac{1}{a_2^2+x^2}\frac{1}{\prod\limits_{i=3}^{n}a_i^2+x^2}\\<br>=\frac{1}{(a_2^2-a_1^2)}(\frac{1}{a_1^2+x^2}-\frac{1}{a_2^2+x^2})\frac{1}{\prod\limits_{i=3}^{n}a_i^2+x^2}\\<br>=\frac{1}{(a_2^2-a_1^2)}(\frac{1}{a_1^2+x^2}-\frac{1}{a_2^2+x^2})\frac{1}{a_3^2+x^2}\frac{1}{\prod\limits_{i=4}^{n}a_i^2+x^2}\\<br>=\frac{1}{(a_2^2-a_1^2)}(\frac{1}{a_1^2+x^2}\frac{1}{a_3^2+x^2}-\frac{1}{a_2^2+x^2}\frac{1}{a_3^2+x^2})\frac{1}{\prod\limits_{i=4}^{n}a_i^2+x^2}\\<br>=\frac{1}{(a_2^2-a_1^2)}(\frac{1}{(a_1^2-a_3^2)}(\frac{1}{a_3^2+x^2}-\frac{1}{a_1^2+x^2})-\frac{1}{(a_3^2-a_2^2)}(\frac{1}{a_2^2+x^2}-\frac{1}{a_3^2+x^2}))\frac{1}{\prod\limits_{i=4}^{n}a_i^2+x^2}\\<br>=(\frac{1}{a_2^2-a_1^2}\frac{1}{a_3^2-a_1^2})\frac{1}{a_1^2+x^2}+(\frac{1}{a_1^2-a_2^2}\frac{1}{a_3^2-a_2^2})\frac{1}{a_2^2+x^2}+(\frac{1}{a_1^2-a_3^2}\frac{1}{a_2^2-a_3^2})\frac{1}{a_3^2+x^2}\\<br>=…\\<br>=\sum\limits_{i=1}^{n}\frac{1}{\prod\limits_{j=1,j!=i}^{n}(a_j^2-a_i^2)}\frac{1}{a_i^2+x^2}$<br>我们设$c_i=\prod\limits_{j=1,j!=i}^{n}(a_j^2-a_i^2)$<br>$原式=\sum\limits_{i=1}^{n}\frac{1}{c_i}\frac{1}{a_i^2+x^2}$<br>那么<br>$\frac{1}{\pi}\int_0^{\infty}\frac{1}{\prod\limits_{i=1}^{n}(a_i^2+x^2)}dx\\<br>=\frac{1}{\pi}\int_0^{\infty}\sum\limits_{i=1}^{n}\frac{1}{c_i}\frac{1}{a_i^2+x^2}\\<br>=\frac{1}{\pi}\sum\limits_{i=1}^{n}\frac{1}{c_i}\int_0^{\infty}\frac{1}{a_i^2+x^2}\\<br>=\frac{1}{\pi}\sum\limits_{i=1}^{n}\frac{1}{c_i}\frac{\pi}{2a_i}\\<br>=\sum\limits_{i=1}^{n}\frac{1}{2c_ia_i}$</p>
<h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>

ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

ll <span class="token function">ex_gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll d <span class="token operator">=</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll t <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> t <span class="token operator">-</span> a <span class="token operator">/</span> b <span class="token operator">*</span> y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getInv</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">ex_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> idx<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        res <span class="token operator">*=</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        res <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">getInv</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans <span class="token operator">*</span> <span class="token function">getInv</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="C-Euclidean-Distance"><a href="#C-Euclidean-Distance" class="headerlink" title="C:Euclidean Distance"></a>C:Euclidean Distance</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一些点$(\frac{a_1}{m},\frac{a_2}{m},…,\frac{a_n}{m})$,让你找一些$p_i$,使得$\sum\limits_{i=1}^{n}(p_i-a_i)^2$最小,$p_i$满足$\sum\limits_{i=1}^{n}p_i=1,p_i&gt;=0$</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>听说题解是用拉格朗日乘子法，但我也不会，<br>我看到有别人用的是贪心<br>因为所有的$a_i$都是除以m的，所以我们把$a_i$和$p_i$都乘以m，那么我们就变成了用m步使得面积最小（负数的面积不能变小只能变大）</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblwpw02trj30ex0bp747.jpg" alt="img1"><br>那么贪心的做法就是把大的尽量的变小，因为是排过序的，所以前面的要比后面的大。<br>每次都试着把前i-1块变得跟第i块平齐，如果不能就把前(i-1)块全部减小$\frac{k}{i-1}$,保持前面的平齐<br><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblwpylruqj30dy0b1mx7.jpg" alt="img2"></p>
<h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>

ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

bool <span class="token function">cmp</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>b <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll k <span class="token operator">=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                k <span class="token operator">-=</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> 
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span><span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                m <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> m <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">;</span>
            m <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> m <span class="token operator">*</span> m<span class="token punctuation">;</span>
        ll k1 <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">/=</span> k1<span class="token punctuation">;</span>
        m <span class="token operator">/=</span> k1<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="E-ABBA"><a href="#E-ABBA" class="headerlink" title="E:ABBA"></a>E:ABBA</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给你n个AB和m个BA，问你能构造出多少个长度为(n+m)*2并且能组成n个AB和B个BA的串</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>如果我们把A看做-1，B看成1，那么构成串的前缀和应该在[-n,m]，如果不在就是不合法的串<br>然后我们在用dp[i][j]来表示构成串的前i+j位中有i个A,j个B，那么我们考虑dp[i][j]—&gt;(dp[i+1][j],dp[i][j+1])<br>转移是只需要判断(dp[i+1][j],dp[i][j+1])是否合法即可</p>
<h4 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
 
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">+</span>m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">,</span> i<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="H-XOR"><a href="#H-XOR" class="headerlink" title="H:XOR"></a>H:XOR</h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给你一堆数，让你找他们子集xor和位0的的子集的大小之和</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>明显的线性集问题,首先我们要知道一堆数字组成线性集，</p>
<p>可以范围线性集外的数字和线性集内的数字，线性集内的数字可以xor出线性集外的所有子集</p>
<p>因为是问子集大小的和，所以我们可以转化成求每个数字的贡献</p>
<p>分为两种：我们设数字总数为$n$,线性集大小为$r$</p>
<p>1.线性集外数字的贡献：</p>
<p>因为线性集内的数字能把线性集外的所有子集xor出来。</p>
<p>我们枚举线性集外的每一个数字$x$，那么如果线性集内的数字能把$x$xor出来那么，$x$对应的</p>
<p>线性集外的子集大小就为$2^{n-r-1}$,即这个数字的贡献就为$2^{n-r-1}$</p>
<p>2.线性集内的数字的贡献：</p>
<p>对剩下的n-1个数字做一次线性集，看是否能把$x$xor出来，能xor出来贡献就为$2^{n-r-1}$，不能就为0</p>
<h4 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pis<span class="token punctuation">;</span>
 
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
bool vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">LB</span><span class="token punctuation">{</span>
    ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bool flag<span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> false<span class="token punctuation">;</span>
        cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> cnt <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>
                x <span class="token operator">^=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            flag <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    bool <span class="token function">Fin</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x <span class="token operator">^=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">;</span>
 
ll <span class="token function">Ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        A<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> B<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">Fin</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                A<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> B<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll r <span class="token operator">=</span> A<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ll base <span class="token operator">=</span> <span class="token function">Ksm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">-</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll sum <span class="token operator">=</span> base <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>r<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it<span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ll x <span class="token operator">=</span> a<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">62</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
                C<span class="token punctuation">.</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">.</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            C<span class="token punctuation">.</span>flag <span class="token operator">=</span> B<span class="token punctuation">.</span>flag<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it2<span class="token operator">:</span> vec<span class="token punctuation">)</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">!=</span> it2<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>it2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">Fin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="I-Points-Division"><a href="#I-Points-Division" class="headerlink" title="I:Points Division"></a>I:Points Division</h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>给你n个点，把点划分成A,B两部分，规定$i\in A$ and $j\in B$  and $x_j \leq x_i$ and $y_i\leq y_j$</p>
<p>求最后$\sum\limits_{i\in A}a_i+\sum\limits_{j\in B}b_j$ 的最大值</p>
<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>我们发现$A$位于左上角，$B$位于右上角，$AB$边界时一条不下降的折线,所以我们可以沿着这条折线进行$dp$，</p>
<p>我们规定折线上的点全是$B$上的点。</p>
<p>首先我们先把纵坐标离散化，然后用$dp[i]$来表示当高度为i时最大值为多少</p>
<p>然后我们来求每一个点对结果的贡献，</p>
<p>对于一个点$i$,有两种情况:</p>
<p>​        一：这个点不在折线上，那么大于$y_i$并且在折线上面的点$j$，$i$相当于位于$B$，那么$i$对于$j$的贡献就是$b_i$,对于那些小于$y_i$并且在折线上面的点$k$，$i$相当于位于$A$，那么$i$对$k$的贡献就是$a_i$,</p>
<p>​        二：这个点在折线上，$dp[i]$就由从$1到i-1$的点的最大值+$b_i$ 也就是$dp[i] = \max\limits_{1\leq j &lt; i} dp[j] + b_i$ </p>
<p>大体思路就是这样，因为我们要对区间操作，所以要用一个线段树来维护一下</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>因为我们默认折线上的点全是属于$B$的点，这就导致不会有$A=P$ and $B=\emptyset$的情况，但是我们在点中加入一个$(0,0)$的点，因为$1\leq x_i, y_i\leq 10^9$那么所有的点都位于$(0,0)$上面，对$(0,0)$的贡献就是$B=\emptyset$的值</p>
<h4 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>

    bool friend operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">==</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ty<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Seg</span><span class="token punctuation">{</span>
    ll dp<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lazy<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">Build</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Build</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span> lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span> dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">Updata</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">,</span> ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//区间更新</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> L <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>
            lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>R <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">Updata</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//单点更新</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">Updata</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ll <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> L <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ll Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> <span class="token function">Query</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>R <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> <span class="token function">Query</span><span class="token punctuation">(</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>seg<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        ty<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ty<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>ty<span class="token punctuation">,</span> ty <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>ty<span class="token punctuation">,</span> ty<span class="token operator">+</span>cnt<span class="token punctuation">)</span> <span class="token operator">-</span> ty<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> 
            node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>ty<span class="token punctuation">,</span> ty <span class="token operator">+</span> cnt<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> ty <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        seg<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> cnt<span class="token punctuation">)</span> seg<span class="token punctuation">.</span><span class="token function">Updata</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[node.y+1~cnt]+a</span>
            seg<span class="token punctuation">.</span><span class="token function">Updata</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> seg<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">+</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp[i] = max</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> seg<span class="token punctuation">.</span><span class="token function">Updata</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1~node.y] + b</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> seg<span class="token punctuation">.</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Blog</title>
    <url>//81cc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是我的第一篇博客，主要写一些Hexo的配置</p>
<h1 id="Hexo-Github-搭建博客："><a href="#Hexo-Github-搭建博客：" class="headerlink" title="Hexo + Github 搭建博客："></a>Hexo + Github 搭建博客：</h1><p><a href="https://blog.csdn.net/ainuser/article/details/77609180">跟着这篇博客走即可</a></p>
<h1 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h1><p>Hexo目录下的_config.yml称为站点配置文件</p>
<p>Hexo/themes/next/目录下的_config.yml称为主题配置文件</p>
<h2 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h2><p>下载next主题</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblv57b6g3j30om01v74a.jpg" alt="img1"></p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">git</span> clone https<span class="token punctuation">:</span><span class="token comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在站点配置文件 <code>_config.yml</code></p>
<p><img src="https://wx2.sinaimg.cn/mw690/0083TyOJly1gblv59sp7bj30el03i0t4.jpg" alt="img2"></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在主题配置文件<code>_config.yml</code>中可以选择四种scheme，我选择的是<code>Gemini</code></p>
<p><img src="https://wx1.sinaimg.cn/mw690/0083TyOJly1gblv5clsagj309q07raa7.jpg" alt="img3"></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># ---------------------------------------------------------------</span>
<span class="token comment"># Scheme Settings</span>
<span class="token comment"># ---------------------------------------------------------------</span>

<span class="token comment"># Schemes</span>
<span class="token comment">#scheme: Muse</span>
<span class="token comment">#scheme: Mist</span>
<span class="token comment">#scheme: Pisces</span>
<span class="token key atrule">scheme</span><span class="token punctuation">:</span> Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h2><p>配置站点配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 标题
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 副标题
<span class="token key atrule">description</span><span class="token punctuation">:</span> 描述
<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者
<span class="token key atrule">language</span><span class="token punctuation">:</span> 语言（简体中文是zh<span class="token punctuation">-</span>Hans）
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> 网站时区（Hexo 默认使用您电脑的时区，不用写）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="菜单信息配置："><a href="#菜单信息配置：" class="headerlink" title="菜单信息配置："></a>菜单信息配置：</h2><p>配置主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> home
  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> user
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> tags
  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> th
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> archive
  <span class="token comment">#schedule: /schedule/ || calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || sitemap</span>
  <span class="token comment">#commonweal: /404/ || heartbeat</span>

<span class="token comment"># Enable/Disable menu icons.</span>
<span class="token key atrule">menu_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置标签，分类页面"><a href="#设置标签，分类页面" class="headerlink" title="设置标签，分类页面"></a>设置标签，分类页面</h2><p>在Git-Bash中输入：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">hexo new page "tags"
hexo new page "categories"
hexo new page "about"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://wx4.sinaimg.cn/mw690/0083TyOJly1gblv5ezol4j30c401kjrb.jpg" alt="img4"></p>
<p>这时在<code>Hexo/source/</code>下出现一个<code>tags/index.md</code>和<code>categories/index.md</code></p>
<p>这时你修改<code>index.md</code>的属性，新加<code>type</code>属性</p>
<p><code>tags的index</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 标签
<span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token datetime number">2019-08-10 00:11:16</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>categories的index</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 分类
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-08-10 00:08:44</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span>
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>about的index</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 这是我的自我介绍
<span class="token key atrule">layout</span><span class="token punctuation">:</span> about
<span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>comments: false</code>是关闭评论功能</p>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>在Hexo的根目录下执行</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>searchdb <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>站点配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span> <span class="token comment"># 本地搜索插件</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在主题配置文件<code>_config.yml</code>中</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># if auto, trigger search by changing input</span>
  <span class="token comment"># if manual, trigger search by pressing enter key or search button</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment"># show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h2><p>把你要作为头像的图片放到：<code>Hexo/themes/next/source/images</code></p>
<p>然后更改主题配置文件<code>_config.yml</code>中的 <code>Sidebar Avaatar</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">avatar</span><span class="token punctuation">:</span> /images/header.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="网站缩略图图标"><a href="#网站缩略图图标" class="headerlink" title="网站缩略图图标"></a>网站缩略图图标</h2><p>把你要作为缩略图的图片放到：<code>Hexo/themes/next/source/images</code></p>
<p>然后打开主题配置文件<code>_config.yml</code>,找到 <code>favicon</code>，修改成这样</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /images/header.jpg
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /images/header.jpg
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /images/header.jpg
  <span class="token key atrule">safari_pinned_tab</span><span class="token punctuation">:</span> /images/logo.svg
  <span class="token comment">#android_manifest: /images/manifest.json</span>
  <span class="token comment">#ms_browserconfig: /images/browserconfig.xml</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改链接文本样式"><a href="#修改链接文本样式" class="headerlink" title="修改链接文本样式"></a>修改链接文本样式</h2><p>打开<code>Hexo/themes/next/source/css/_common/components/post.styl</code>，添加</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">.post-body p a <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0593d3</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">px</span> solid <span class="token hexcode">#0593d3</span><span class="token punctuation">;</span></span>
  <span class="token selector">&amp;:hover <span class="token punctuation">{</span></span>
    <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fc6423</span><span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">px</span> solid <span class="token hexcode">#fc6423</span><span class="token punctuation">;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p>注册登录<a href="https://www.livere.com/">来必力</a>, 安装City，获得安装代码中的<code>data-uid="xxx"</code></p>
<p>配置主题配置文件<code>_config.yml</code>,添加<code>LiveRe Uid</code>:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">livere_uid</span><span class="token punctuation">:</span> <span class="token comment">#你的LiveRe UID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="添加访问计数"><a href="#添加访问计数" class="headerlink" title="添加访问计数"></a>添加访问计数</h2><p>next已经集成了busuanzi计数，编辑<code>Hexo/themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code> </p>
<p>将</p>
<p><code>&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</code></p>
<p>改为</p>
<p><code>&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</code></p>
<p>主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Show PV/UV of the website/page with busuanzi.</span>
<span class="token comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span>
<span class="token key atrule">busuanzi_count</span><span class="token punctuation">:</span>
  <span class="token comment"># count values only if the other configs are false</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># custom uv span for the whole site</span>
  <span class="token key atrule">site_uv</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_visitors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_visitors_icon</span><span class="token punctuation">:</span> user
  <span class="token key atrule">total_view</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_views_icon</span><span class="token punctuation">:</span> eye
  <span class="token key atrule">post_views</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">post_view_icon</span><span class="token punctuation">:</span> eye
  <span class="token key atrule">site_uv_header</span><span class="token punctuation">:</span> &lt;i class="fa fa<span class="token punctuation">-</span>user"<span class="token punctuation">&gt;</span>&lt;/i<span class="token punctuation">&gt;</span> 访客数
  <span class="token key atrule">site_uv_footer</span><span class="token punctuation">:</span> 人
  <span class="token comment"># custom pv span for the whole site</span>
  <span class="token key atrule">site_pv</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">site_pv_header</span><span class="token punctuation">:</span> &lt;i class="fa fa<span class="token punctuation">-</span>eye"<span class="token punctuation">&gt;</span>&lt;/i<span class="token punctuation">&gt;</span> 总访问量
  <span class="token key atrule">site_pv_footer</span><span class="token punctuation">:</span> 次
  <span class="token comment"># custom pv span for one page only</span>
  <span class="token key atrule">page_pv</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">page_pv_header</span><span class="token punctuation">:</span> &lt;i class="fa fa<span class="token punctuation">-</span>file<span class="token punctuation">-</span>o"<span class="token punctuation">&gt;</span>&lt;/i<span class="token punctuation">&gt;</span>  阅读数
  <span class="token key atrule">page_pv_footer</span><span class="token punctuation">:</span> 次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文章版权信息"><a href="#文章版权信息" class="headerlink" title="文章版权信息"></a>文章版权信息</h2><p>编辑主题配置文件<code>_config.yml</code>，修改</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_copyright</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>编辑主题配置文件<code>_config.yml</code>,修改</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Reward</span>
<span class="token key atrule">reward_comment</span><span class="token punctuation">:</span> 求打赏文本
<span class="token key atrule">wechatpay</span><span class="token punctuation">:</span> /images/wechatpay.png  <span class="token comment"># 微信收款二维码 图片路径</span>
<span class="token key atrule">alipay</span><span class="token punctuation">:</span> /images/alipay.png        <span class="token comment"># 支付宝收款二维码 图片路径</span>
<span class="token comment">#bitcoin: /images/bitcoin.png     # 比特币</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加更新时间"><a href="#添加更新时间" class="headerlink" title="添加更新时间"></a>添加更新时间</h2><p>编辑主题配置文件<code>_config.yml</code>,修改</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_meta</span><span class="token punctuation">:</span>
  <span class="token key atrule">item_text</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">created_at</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 创建时间</span>
  <span class="token key atrule">updated_at</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 更新时间</span>
  <span class="token comment"># Only show 'updated' if different from 'created'.</span>
  <span class="token key atrule">updated_diff</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 只使用更新时间</span>
  <span class="token comment"># If true, post's time format will be hexo config's date_format + ' ' + time_format.</span>
  <span class="token key atrule">date_time_merge</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改文章底部的标签"><a href="#修改文章底部的标签" class="headerlink" title="修改文章底部的标签"></a>修改文章底部的标签</h2><p>编辑<code>Hexo/themes/next/layout/_macro/post.swig</code></p>
<p>找到<code>rel="tag"&gt;#</code></p>
<p>将<code>#</code>改为<code>&lt;i class="fa fa-tag"&gt;&lt;/i&gt;</code></p>
<h2 id="文章底部添加”本文结束”"><a href="#文章底部添加”本文结束”" class="headerlink" title="文章底部添加”本文结束”"></a>文章底部添加”本文结束”</h2><p>编辑<code>Hexo/themes/next/laayout/_macro/post.swig</code>，在文章结束的地方加上</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token keyword">not</span> is_index <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"text-align:center;color: #ccc;font-size:14px;"</span><span class="token operator">&gt;</span>
        <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Thanks <span class="token keyword">for</span> your attention<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="在页脚添加运行时间"><a href="#在页脚添加运行时间" class="headerlink" title="在页脚添加运行时间"></a>在页脚添加运行时间</h2><p>编辑<code>themes/next/layout/_partials/footer.swig</code></p>
<p>在所示位置加上代码：</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0083TyOJly1gblv5hgdmij30so0j0diq.jpg" alt="img5"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token comment">### 运行时间 ####}</span>
<span class="token operator">&lt;</span>span <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"sitetime"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">&gt;</span>
	function siteTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		window<span class="token punctuation">.</span>setTimeout<span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
		var minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
		var hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
		var days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>
		var years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>
		var today <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span>getFullYear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span>getMonth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
		var todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span>getDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span>getHours<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span>getMinutes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span>getSeconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">/</span><span class="token operator">*</span> Date<span class="token punctuation">.</span>UTC<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span> 返回date对象距世界标准时间<span class="token punctuation">(</span>UTC<span class="token punctuation">)</span><span class="token number">1970</span>年<span class="token number">1</span>月<span class="token number">1</span>日午夜之间的毫秒数<span class="token punctuation">(</span>时间戳<span class="token punctuation">)</span>
		year <span class="token operator">-</span> 作为date对象的年份，为<span class="token number">4</span>位年份值
		month <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">11</span>之间的整数，做为date对象的月份
		day <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span>之间的整数，做为date对象的天数
		hours <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">(</span>午夜<span class="token number">24</span>点<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">23</span>之间的整数，做为date对象的小时数
		minutes <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>之间的整数，做为date对象的分钟数
		seconds <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>之间的整数，做为date对象的秒数
		microseconds <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">999</span>之间的整数，做为date对象的毫秒数 <span class="token operator">*</span><span class="token operator">/</span>
		var t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span>UTC<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">//</span>北京时间<span class="token number">2018</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>
		var t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span>UTC<span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span>todayMonth<span class="token punctuation">,</span>todayDate<span class="token punctuation">,</span>todayHour<span class="token punctuation">,</span>todayMinute<span class="token punctuation">,</span>todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
		var diff <span class="token operator">=</span> t2<span class="token operator">-</span>t1<span class="token punctuation">;</span>
		var diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>diff<span class="token operator">/</span>years<span class="token punctuation">)</span><span class="token punctuation">;</span>
		var diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>diff<span class="token operator">/</span>days<span class="token punctuation">)</span><span class="token operator">-</span>diffYears<span class="token operator">*</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		var diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>diff<span class="token operator">-</span><span class="token punctuation">(</span>diffYears<span class="token operator">*</span><span class="token number">365</span><span class="token operator">+</span>diffDays<span class="token punctuation">)</span><span class="token operator">*</span>days<span class="token punctuation">)</span><span class="token operator">/</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>
		var diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>diff<span class="token operator">-</span><span class="token punctuation">(</span>diffYears<span class="token operator">*</span><span class="token number">365</span><span class="token operator">+</span>diffDays<span class="token punctuation">)</span><span class="token operator">*</span>days<span class="token operator">-</span>diffHours<span class="token operator">*</span>hours<span class="token punctuation">)</span><span class="token operator">/</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		var diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>diff<span class="token operator">-</span><span class="token punctuation">(</span>diffYears<span class="token operator">*</span><span class="token number">365</span><span class="token operator">+</span>diffDays<span class="token punctuation">)</span><span class="token operator">*</span>days<span class="token operator">-</span>diffHours<span class="token operator">*</span>hours<span class="token operator">-</span>diffMinutes<span class="token operator">*</span>minutes<span class="token punctuation">)</span><span class="token operator">/</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
		document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">" 已运行"</span><span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays<span class="token operator">+</span><span class="token string">" 天 "</span><span class="token operator">+</span>diffHours<span class="token operator">+</span><span class="token string">" 小时 "</span><span class="token operator">+</span>diffMinutes<span class="token operator">+</span><span class="token string">" 分钟 "</span><span class="token operator">+</span>diffSeconds<span class="token operator">+</span><span class="token string">" 秒"</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">*</span>因为建站时间还没有一年，就将之注释掉了。需要的可以取消<span class="token operator">*</span><span class="token operator">/</span>
	siteTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Latex公式"><a href="#Latex公式" class="headerlink" title="Latex公式"></a>Latex公式</h2><p>更换Hexo的Markdown渲染引擎</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">npm uninstall hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>marked <span class="token operator">--</span>save
npm install hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>kramed <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后打开<code>node_modules/kramed/lib/rules/inline.js</code></p>
<p>替换11行的escape变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//  escape: /^\\([\\`*{}\[\]()#$+\-.!_&gt;])/,</span>
  escape<span class="token operator">:</span> <span class="token operator">/</span><span class="token operator">^</span>\\<span class="token punctuation">(</span><span class="token punctuation">[</span>`<span class="token operator">*</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>#$<span class="token operator">+</span>\<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">!</span>_<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>改变20行的em变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span>
  em<span class="token operator">:</span> <span class="token operator">/</span><span class="token operator">^</span>\<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span>\<span class="token operator">*</span>\<span class="token operator">*</span><span class="token operator">|</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span>\<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>\<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>next集成了Mathjax，编辑主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># MathJax Support</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">engine</span><span class="token punctuation">:</span> mathjax
  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> //cdn.bootcss.com/mathjax/2.7.1/latest.js<span class="token punctuation">?</span>config=TeX<span class="token punctuation">-</span>AMS<span class="token punctuation">-</span>MML_HTMLorMML

<span class="token comment"># Han Support docs: https://hanzi.pro/</span>
<span class="token key atrule">han</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在写文章时要在文章的配置中加上<code>mathjax: true</code></p>
<h2 id="短链接"><a href="#短链接" class="headerlink" title="短链接"></a>短链接</h2><p>在根目录执行</p>
<p><code>npm install hexo-abbrlink --save</code></p>
<p>配置站点配置文件<code>_config.yml</code>,修改</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># abbrlink config</span>
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>
  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#support crc16(default) and crc32</span>
  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex    <span class="token comment">#support dec(default) and hex</span>

<span class="token comment"># 更改 permalink 值</span>
<span class="token key atrule">permalink</span><span class="token punctuation">:</span> /<span class="token punctuation">:</span>abbrlink/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文章封面图片"><a href="#文章封面图片" class="headerlink" title="文章封面图片"></a>文章封面图片</h2><p>在根目录执行</p>
<p><code>npm install --save hexo-less</code></p>
<p>在写文章时手动设置文章摘要<code>&lt;!-- less --&gt;</code>为分界线</p>
<h2 id="social"><a href="#social" class="headerlink" title="social"></a>social</h2><p>修改主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">social</span><span class="token punctuation">:</span>
  <span class="token comment">#GitHub: https://github.com/yourname || github</span>
  <span class="token comment">#Google: https://plus.google.com/yourname || google</span>
  <span class="token comment">#Twitter: https://twitter.com/yourname || twitter</span>
  <span class="token comment">#E-Mail: mailto:yourname@gmail.com || envelope</span>
  <span class="token comment">#FB Page: https://www.facebook.com/yourname || facebook</span>
  <span class="token comment">#VK Group: https://vk.com/yourname || vk</span>
  <span class="token comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span>
  <span class="token comment">#YouTube: https://youtube.com/yourname || youtube</span>
  <span class="token comment">#Instagram: https://instagram.com/yourname || instagram</span>
  <span class="token comment">#Skype: skype:yourname?call|chat || skype</span>

<span class="token key atrule">social_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span> github
  <span class="token key atrule">Twitter</span><span class="token punctuation">:</span> twitter
  <span class="token key atrule">微博</span><span class="token punctuation">:</span> weibo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><p>修改主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Blog rolls</span>
<span class="token key atrule">links_icon</span><span class="token punctuation">:</span> link
<span class="token key atrule">links_title</span><span class="token punctuation">:</span> Friend Links
<span class="token key atrule">links_layout</span><span class="token punctuation">:</span> block
<span class="token comment">#links_layout: inline</span>
<span class="token key atrule">links</span><span class="token punctuation">:</span>
  <span class="token key atrule">github</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//github.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字数统计和阅读时长"><a href="#字数统计和阅读时长" class="headerlink" title="字数统计和阅读时长"></a>字数统计和阅读时长</h2><p>在根目录执行</p>
<p><code>npm install hexo-symbols-count-time --save</code></p>
<p>修改站点配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>
 <span class="token comment">#文章内是否显示</span>
  <span class="token key atrule">symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token comment"># 网页底部是否显示</span>
  <span class="token key atrule">total_symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post wordcount display settings</span>
<span class="token comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span>
<span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment">#文章中的显示是否显示文字（本文字数|阅读时长） </span>
  <span class="token key atrule">item_text_post</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment">#网页底部的显示是否显示文字（站点总字数|站点阅读时长） </span>
  <span class="token key atrule">item_text_total</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># Average Word Length (chars count in word)</span>
  <span class="token key atrule">awl</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token comment"># Words Per Minute</span>
  <span class="token key atrule">wpm</span><span class="token punctuation">:</span> <span class="token number">275</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="隐藏网页底部信息"><a href="#隐藏网页底部信息" class="headerlink" title="隐藏网页底部信息"></a>隐藏网页底部信息</h2><p>修改主题配置文件<code>_config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">footer</span><span class="token punctuation">:</span>
  <span class="token comment"># Specify the date when the site was setup.</span>
  <span class="token comment"># If not defined, current year will be used.</span>
  <span class="token comment">#since: 2015</span>

  <span class="token comment"># Icon between year and copyright info.</span>
  <span class="token key atrule">icon</span><span class="token punctuation">:</span> user
  <span class="token key atrule">counter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

  <span class="token comment"># If not defined, will be used `author` from Hexo main config.</span>
  <span class="token key atrule">copyright</span><span class="token punctuation">:</span>
  <span class="token comment"># -------------------------------------------------------------</span>
  <span class="token comment"># Hexo link (Powered by Hexo).</span>
  <span class="token key atrule">powered</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token key atrule">theme</span><span class="token punctuation">:</span>
    <span class="token comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># Version info of NexT after scheme info (vX.X.X).</span>
    <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># -------------------------------------------------------------</span>
  <span class="token comment"># Any custom text can be defined here.</span>
  <span class="token comment">#custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;</span>

<span class="token comment"># ---------------------------------------------------------------</span>
<span class="token comment"># SEO Settings</span>
<span class="token comment"># ---------------------------------------------------------------</span>

<span class="token comment"># Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.</span>
<span class="token comment"># See: https://support.google.com/webmasters/answer/139066</span>
<span class="token comment"># Tips: Before you open this tag, remember set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )</span>
<span class="token key atrule">canonical</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.</span>
<span class="token key atrule">seo</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token comment"># If true, will add site-subtitle to index page, added in main hexo config.</span>
<span class="token comment"># subtitle: Subtitle</span>
<span class="token key atrule">index_with_subtitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h2><p>在根目录执行</p>
<p><code>npm install hexo-generator-feed --save</code></p>
<p>修改站点配置文件<code>_config.yml</code>,在<code>Extensions</code>下添加</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># RSS订阅</span>
<span class="token key atrule">feed</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom
  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>
  <span class="token key atrule">hub</span><span class="token punctuation">:</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span>
  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>
  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改主题配置文件 <code>_config.yml</code>修改<code>rss</code>为</p>
<p><code>rss: /atom.xml</code></p>
<h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><p>在GItHub上<a href="https://github.com/crozynski/comicneue">下载</a>后，解压后将所有Web文件夹下的所有内容放入<code>Hexo/theme/next/source/fonts</code></p>
<p>然后修改<code>Hexo/themes/next/source/css/_custom/custom.styl</code></p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token comment">//字体</span>
<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Light.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Light-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Light-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Regular.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Regular-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Regular-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Bold.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Bold-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Bold-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Light.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Light-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Light-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Regular.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Regular-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Regular-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Bold.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>

<span class="token atrule-declaration"><span class="token atrule">@font-face</span> <span class="token punctuation">{</span></span>
  <span class="token property-declaration"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue Angular'</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('/fonts/ComicNeue-Angular-Bold-Oblique.eot')</span><span class="token punctuation">;</span></span>
  src<span class="token punctuation">:</span> <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold-Oblique.eot?#iefix'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold-Oblique.woff2'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold-Oblique.woff'</span><span class="token punctuation">)</span> format<span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
       <span class="token func"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/fonts/ComicNeue-Angular-Bold-Oblique.ttf'</span><span class="token punctuation">)</span>  format<span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span></span>
  <span class="token property-declaration"><span class="token property">font-style</span><span class="token punctuation">:</span> oblique<span class="token punctuation">;</span></span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改主题配置文件 <code>_config.yml</code>修改<code>font</code>为</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">font</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

  <span class="token comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span>

  <span class="token comment"># Font options:</span>
  <span class="token comment"># `external: true` will load this font family from `host` above.</span>
  <span class="token comment"># `family: Times New Roman`. Without any quotes.</span>
  <span class="token comment"># `size: xx`. Use `px` as unit.</span>

  <span class="token comment"># Global font settings used on &lt;body&gt; element.</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6).</span>
  <span class="token comment"># Fallback to `global` font settings.</span>
  <span class="token key atrule">headings</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment"># Font settings for posts.</span>
  <span class="token comment"># Fallback to `global` font settings.</span>
  <span class="token key atrule">posts</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span>

  <span class="token comment"># Font settings for Logo.</span>
  <span class="token comment"># Fallback to `global` font settings.</span>
  <span class="token key atrule">logo</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span>
    <span class="token key atrule">size</span><span class="token punctuation">:</span>

  <span class="token comment"># Font settings for &lt;code&gt; and code blocks.</span>
  <span class="token key atrule">codes</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">family</span><span class="token punctuation">:</span> <span class="token string">'Comic Neue'</span>
    size<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>刚开始的字体是默认14px，在代码部分会很小，所以可以在<code>themes/next/source/css/_variables/base.styl</code></p>
<p>修改 font size和code font  为18px就很好</p>
<h2 id="设置新建文件配置"><a href="#设置新建文件配置" class="headerlink" title="设置新建文件配置"></a>设置新建文件配置</h2><p>进入<code>Hexo/scaffolds</code>修改<code>post.md</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="新建带日期的博文"><a href="#新建带日期的博文" class="headerlink" title="新建带日期的博文"></a>新建带日期的博文</h2><p>修改站点配置文件<code>-config.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Writing</span>
<span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year<span class="token punctuation">-</span><span class="token punctuation">:</span>month<span class="token punctuation">-</span><span class="token punctuation">:</span>day<span class="token punctuation">-</span><span class="token punctuation">:</span>title.md <span class="token comment"># File name of new posts</span>
<span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post
<span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Transform title into titlecase</span>
<span class="token key atrule">external_link</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Open external links in new tab</span>
<span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 同时生成一个文件夹</span>
<span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">highlight</span><span class="token punctuation">:</span> <span class="token comment"># Hexo自带代码高亮插件</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  tab_replace<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>把背景图片存放到<code>Hexo/themes/next/source/images</code></p>
<p>再在<code>Hexo/themes/next/source/css/_custom/custom/styl</code>修改一下</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">body <span class="token punctuation">{</span></span> <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(/images/music.png)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参考博客：</p>
<p><a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>
<p><a href="https://www.cnblogs.com/liziczh/p/9318656.html">https://www.cnblogs.com/liziczh/p/9318656.html</a></p>
<p><a href="https://xian6ge.netlify.com/posts/82ce1911/">https://xian6ge.netlify.com/posts/82ce1911/</a></p>
<p><a href="https://www.jianshu.com/p/805bd0b65d98https://www.jianshu.com/p/805bd0b65d98">https://www.jianshu.com/p/805bd0b65d98https://www.jianshu.com/p/805bd0b65d98</a></p>
<p><a href="https://www.jianshu.com/p/3a01cc514ce7?utm_source=oschina-app">https://www.jianshu.com/p/3a01cc514ce7?utm_source=oschina-app</a></p>
<p><a href="https://leflacon.github.io/7167e0bc/">https://leflacon.github.io/7167e0bc/</a></p>]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
